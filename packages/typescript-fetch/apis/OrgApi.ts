/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  AddOrgUserCommand,
  ErrorResponseBody,
  OrgDetailsDTO,
  OrgUserDTO,
  SuccessResponseBody,
  UpdateOrgAddressForm,
  UpdateOrgForm,
  UpdateOrgUserCommand,
  UserLookupDTO,
} from '../models/index.js';
import {
    AddOrgUserCommandFromJSON,
    AddOrgUserCommandToJSON,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    OrgDetailsDTOFromJSON,
    OrgDetailsDTOToJSON,
    OrgUserDTOFromJSON,
    OrgUserDTOToJSON,
    SuccessResponseBodyFromJSON,
    SuccessResponseBodyToJSON,
    UpdateOrgAddressFormFromJSON,
    UpdateOrgAddressFormToJSON,
    UpdateOrgFormFromJSON,
    UpdateOrgFormToJSON,
    UpdateOrgUserCommandFromJSON,
    UpdateOrgUserCommandToJSON,
    UserLookupDTOFromJSON,
    UserLookupDTOToJSON,
} from '../models/index.js';

export interface OrgApiAddOrgUserToCurrentOrgRequest {
    body: AddOrgUserCommand;
}

export interface OrgApiGetOrgUsersForCurrentOrgLookupRequest {
    query?: string;
    limit?: number;
}

export interface OrgApiRemoveOrgUserForCurrentOrgRequest {
    userId: number;
}

export interface OrgApiUpdateCurrentOrgRequest {
    body: UpdateOrgForm;
}

export interface OrgApiUpdateCurrentOrgAddressRequest {
    body: UpdateOrgAddressForm;
}

export interface OrgApiUpdateOrgUserForCurrentOrgRequest {
    userId: number;
    body: UpdateOrgUserCommand;
}

/**
 * 
 */
export class OrgApi extends runtime.BaseAPI {

    /**
     * Adds a global user to the current organization.  If you are running Grafana Enterprise and have Fine-grained access control enabled you need to have a permission with action: `org.users:add` with scope `users:*`.
     * Add a new user to the current organization.
     */
    async addOrgUserToCurrentOrgRaw(requestParameters: OrgApiAddOrgUserToCurrentOrgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling addOrgUserToCurrentOrg().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/org/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddOrgUserCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Adds a global user to the current organization.  If you are running Grafana Enterprise and have Fine-grained access control enabled you need to have a permission with action: `org.users:add` with scope `users:*`.
     * Add a new user to the current organization.
     */
    async addOrgUserToCurrentOrg(requestParameters: OrgApiAddOrgUserToCurrentOrgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.addOrgUserToCurrentOrgRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get current Organization.
     */
    async getCurrentOrgRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrgDetailsDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/org`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrgDetailsDTOFromJSON(jsonValue));
    }

    /**
     * Get current Organization.
     */
    async getCurrentOrg(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrgDetailsDTO> {
        const response = await this.getCurrentOrgRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns all org users within the current organization. Accessible to users with org admin role. If you are running Grafana Enterprise and have Fine-grained access control enabled you need to have a permission with action: `org.users:read` with scope `users:*`.
     * Get all users within the current organization.
     */
    async getOrgUsersForCurrentOrgRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrgUserDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/org/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrgUserDTOFromJSON));
    }

    /**
     * Returns all org users within the current organization. Accessible to users with org admin role. If you are running Grafana Enterprise and have Fine-grained access control enabled you need to have a permission with action: `org.users:read` with scope `users:*`.
     * Get all users within the current organization.
     */
    async getOrgUsersForCurrentOrg(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrgUserDTO>> {
        const response = await this.getOrgUsersForCurrentOrgRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns all org users within the current organization, but with less detailed information. Accessible to users with org admin role, admin in any folder or admin of any team. Mainly used by Grafana UI for providing list of users when adding team members and when editing folder/dashboard permissions.
     * Get all users within the current organization (lookup)
     */
    async getOrgUsersForCurrentOrgLookupRaw(requestParameters: OrgApiGetOrgUsersForCurrentOrgLookupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserLookupDTO>>> {
        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/org/users/lookup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserLookupDTOFromJSON));
    }

    /**
     * Returns all org users within the current organization, but with less detailed information. Accessible to users with org admin role, admin in any folder or admin of any team. Mainly used by Grafana UI for providing list of users when adding team members and when editing folder/dashboard permissions.
     * Get all users within the current organization (lookup)
     */
    async getOrgUsersForCurrentOrgLookup(requestParameters: OrgApiGetOrgUsersForCurrentOrgLookupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserLookupDTO>> {
        const response = await this.getOrgUsersForCurrentOrgLookupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * If you are running Grafana Enterprise and have Fine-grained access control enabled you need to have a permission with action: `org.users:remove` with scope `users:*`.
     * Delete user in current organization.
     */
    async removeOrgUserForCurrentOrgRaw(requestParameters: OrgApiRemoveOrgUserForCurrentOrgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling removeOrgUserForCurrentOrg().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/org/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * If you are running Grafana Enterprise and have Fine-grained access control enabled you need to have a permission with action: `org.users:remove` with scope `users:*`.
     * Delete user in current organization.
     */
    async removeOrgUserForCurrentOrg(requestParameters: OrgApiRemoveOrgUserForCurrentOrgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.removeOrgUserForCurrentOrgRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update current Organization.
     */
    async updateCurrentOrgRaw(requestParameters: OrgApiUpdateCurrentOrgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateCurrentOrg().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/org`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrgFormToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Update current Organization.
     */
    async updateCurrentOrg(requestParameters: OrgApiUpdateCurrentOrgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.updateCurrentOrgRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update current Organization\'s address.
     */
    async updateCurrentOrgAddressRaw(requestParameters: OrgApiUpdateCurrentOrgAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateCurrentOrgAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/org/address`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrgAddressFormToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Update current Organization\'s address.
     */
    async updateCurrentOrgAddress(requestParameters: OrgApiUpdateCurrentOrgAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.updateCurrentOrgAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * If you are running Grafana Enterprise and have Fine-grained access control enabled you need to have a permission with action: `org.users.role:update` with scope `users:*`.
     * Updates the given user.
     */
    async updateOrgUserForCurrentOrgRaw(requestParameters: OrgApiUpdateOrgUserForCurrentOrgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateOrgUserForCurrentOrg().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateOrgUserForCurrentOrg().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/org/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrgUserCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * If you are running Grafana Enterprise and have Fine-grained access control enabled you need to have a permission with action: `org.users.role:update` with scope `users:*`.
     * Updates the given user.
     */
    async updateOrgUserForCurrentOrg(requestParameters: OrgApiUpdateOrgUserForCurrentOrgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.updateOrgUserForCurrentOrgRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
