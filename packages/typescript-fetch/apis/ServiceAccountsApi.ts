/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  AddServiceAccountTokenCommand,
  CreateServiceAccountForm,
  ErrorResponseBody,
  NewApiKeyResult,
  SearchOrgServiceAccountsResult,
  ServiceAccountDTO,
  SuccessResponseBody,
  TokenDTO,
  UpdateServiceAccount200Response,
  UpdateServiceAccountForm,
} from '../models/index.js';
import {
    AddServiceAccountTokenCommandFromJSON,
    AddServiceAccountTokenCommandToJSON,
    CreateServiceAccountFormFromJSON,
    CreateServiceAccountFormToJSON,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    NewApiKeyResultFromJSON,
    NewApiKeyResultToJSON,
    SearchOrgServiceAccountsResultFromJSON,
    SearchOrgServiceAccountsResultToJSON,
    ServiceAccountDTOFromJSON,
    ServiceAccountDTOToJSON,
    SuccessResponseBodyFromJSON,
    SuccessResponseBodyToJSON,
    TokenDTOFromJSON,
    TokenDTOToJSON,
    UpdateServiceAccount200ResponseFromJSON,
    UpdateServiceAccount200ResponseToJSON,
    UpdateServiceAccountFormFromJSON,
    UpdateServiceAccountFormToJSON,
} from '../models/index.js';

export interface ServiceAccountsApiCreateServiceAccountRequest {
    body?: CreateServiceAccountForm;
}

export interface ServiceAccountsApiCreateTokenRequest {
    serviceAccountId: number;
    body?: AddServiceAccountTokenCommand;
}

export interface ServiceAccountsApiDeleteServiceAccountRequest {
    serviceAccountId: number;
}

export interface ServiceAccountsApiDeleteTokenRequest {
    tokenId: number;
    serviceAccountId: number;
}

export interface ServiceAccountsApiListTokensRequest {
    serviceAccountId: number;
}

export interface ServiceAccountsApiRetrieveServiceAccountRequest {
    serviceAccountId: number;
}

export interface ServiceAccountsApiSearchOrgServiceAccountsWithPagingRequest {
    disabled?: boolean;
    expiredTokens?: boolean;
    query?: string;
    perpage?: number;
    page?: number;
}

export interface ServiceAccountsApiUpdateServiceAccountRequest {
    serviceAccountId: number;
    body?: UpdateServiceAccountForm;
}

/**
 * 
 */
export class ServiceAccountsApi extends runtime.BaseAPI {

    /**
     * Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation): action: `serviceaccounts:write` scope: `serviceaccounts:*`  Requires basic authentication and that the authenticated user is a Grafana Admin.
     * Create service account
     */
    async createServiceAccountRaw(requestParameters: ServiceAccountsApiCreateServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceAccountDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/serviceaccounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateServiceAccountFormToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceAccountDTOFromJSON(jsonValue));
    }

    /**
     * Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation): action: `serviceaccounts:write` scope: `serviceaccounts:*`  Requires basic authentication and that the authenticated user is a Grafana Admin.
     * Create service account
     */
    async createServiceAccount(requestParameters: ServiceAccountsApiCreateServiceAccountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceAccountDTO> {
        const response = await this.createServiceAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation): action: `serviceaccounts:write` scope: `serviceaccounts:id:1` (single service account)
     * CreateNewToken adds a token to a service account
     */
    async createTokenRaw(requestParameters: ServiceAccountsApiCreateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewApiKeyResult>> {
        if (requestParameters['serviceAccountId'] == null) {
            throw new runtime.RequiredError(
                'serviceAccountId',
                'Required parameter "serviceAccountId" was null or undefined when calling createToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/serviceaccounts/{serviceAccountId}/tokens`.replace(`{${"serviceAccountId"}}`, encodeURIComponent(String(requestParameters['serviceAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddServiceAccountTokenCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NewApiKeyResultFromJSON(jsonValue));
    }

    /**
     * Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation): action: `serviceaccounts:write` scope: `serviceaccounts:id:1` (single service account)
     * CreateNewToken adds a token to a service account
     */
    async createToken(requestParameters: ServiceAccountsApiCreateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewApiKeyResult> {
        const response = await this.createTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation): action: `serviceaccounts:delete` scope: `serviceaccounts:id:1` (single service account)
     * Delete service account
     */
    async deleteServiceAccountRaw(requestParameters: ServiceAccountsApiDeleteServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['serviceAccountId'] == null) {
            throw new runtime.RequiredError(
                'serviceAccountId',
                'Required parameter "serviceAccountId" was null or undefined when calling deleteServiceAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/serviceaccounts/{serviceAccountId}`.replace(`{${"serviceAccountId"}}`, encodeURIComponent(String(requestParameters['serviceAccountId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation): action: `serviceaccounts:delete` scope: `serviceaccounts:id:1` (single service account)
     * Delete service account
     */
    async deleteServiceAccount(requestParameters: ServiceAccountsApiDeleteServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.deleteServiceAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation): action: `serviceaccounts:write` scope: `serviceaccounts:id:1` (single service account)  Requires basic authentication and that the authenticated user is a Grafana Admin.
     * DeleteToken deletes service account tokens
     */
    async deleteTokenRaw(requestParameters: ServiceAccountsApiDeleteTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['tokenId'] == null) {
            throw new runtime.RequiredError(
                'tokenId',
                'Required parameter "tokenId" was null or undefined when calling deleteToken().'
            );
        }

        if (requestParameters['serviceAccountId'] == null) {
            throw new runtime.RequiredError(
                'serviceAccountId',
                'Required parameter "serviceAccountId" was null or undefined when calling deleteToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/serviceaccounts/{serviceAccountId}/tokens/{tokenId}`.replace(`{${"tokenId"}}`, encodeURIComponent(String(requestParameters['tokenId']))).replace(`{${"serviceAccountId"}}`, encodeURIComponent(String(requestParameters['serviceAccountId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation): action: `serviceaccounts:write` scope: `serviceaccounts:id:1` (single service account)  Requires basic authentication and that the authenticated user is a Grafana Admin.
     * DeleteToken deletes service account tokens
     */
    async deleteToken(requestParameters: ServiceAccountsApiDeleteTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.deleteTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation): action: `serviceaccounts:read` scope: `global:serviceaccounts:id:1` (single service account)  Requires basic authentication and that the authenticated user is a Grafana Admin.
     * Get service account tokens
     */
    async listTokensRaw(requestParameters: ServiceAccountsApiListTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TokenDTO>>> {
        if (requestParameters['serviceAccountId'] == null) {
            throw new runtime.RequiredError(
                'serviceAccountId',
                'Required parameter "serviceAccountId" was null or undefined when calling listTokens().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/serviceaccounts/{serviceAccountId}/tokens`.replace(`{${"serviceAccountId"}}`, encodeURIComponent(String(requestParameters['serviceAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TokenDTOFromJSON));
    }

    /**
     * Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation): action: `serviceaccounts:read` scope: `global:serviceaccounts:id:1` (single service account)  Requires basic authentication and that the authenticated user is a Grafana Admin.
     * Get service account tokens
     */
    async listTokens(requestParameters: ServiceAccountsApiListTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TokenDTO>> {
        const response = await this.listTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation): action: `serviceaccounts:read` scope: `serviceaccounts:id:1` (single service account)
     * Get single serviceaccount by Id
     */
    async retrieveServiceAccountRaw(requestParameters: ServiceAccountsApiRetrieveServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceAccountDTO>> {
        if (requestParameters['serviceAccountId'] == null) {
            throw new runtime.RequiredError(
                'serviceAccountId',
                'Required parameter "serviceAccountId" was null or undefined when calling retrieveServiceAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/serviceaccounts/{serviceAccountId}`.replace(`{${"serviceAccountId"}}`, encodeURIComponent(String(requestParameters['serviceAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceAccountDTOFromJSON(jsonValue));
    }

    /**
     * Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation): action: `serviceaccounts:read` scope: `serviceaccounts:id:1` (single service account)
     * Get single serviceaccount by Id
     */
    async retrieveServiceAccount(requestParameters: ServiceAccountsApiRetrieveServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceAccountDTO> {
        const response = await this.retrieveServiceAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation): action: `serviceaccounts:read` scope: `serviceaccounts:*`
     * Search service accounts with paging
     */
    async searchOrgServiceAccountsWithPagingRaw(requestParameters: ServiceAccountsApiSearchOrgServiceAccountsWithPagingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchOrgServiceAccountsResult>> {
        const queryParameters: any = {};

        if (requestParameters['disabled'] != null) {
            queryParameters['Disabled'] = requestParameters['disabled'];
        }

        if (requestParameters['expiredTokens'] != null) {
            queryParameters['expiredTokens'] = requestParameters['expiredTokens'];
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['perpage'] != null) {
            queryParameters['perpage'] = requestParameters['perpage'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/serviceaccounts/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchOrgServiceAccountsResultFromJSON(jsonValue));
    }

    /**
     * Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation): action: `serviceaccounts:read` scope: `serviceaccounts:*`
     * Search service accounts with paging
     */
    async searchOrgServiceAccountsWithPaging(requestParameters: ServiceAccountsApiSearchOrgServiceAccountsWithPagingRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchOrgServiceAccountsResult> {
        const response = await this.searchOrgServiceAccountsWithPagingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation): action: `serviceaccounts:write` scope: `serviceaccounts:id:1` (single service account)
     * Update service account
     */
    async updateServiceAccountRaw(requestParameters: ServiceAccountsApiUpdateServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateServiceAccount200Response>> {
        if (requestParameters['serviceAccountId'] == null) {
            throw new runtime.RequiredError(
                'serviceAccountId',
                'Required parameter "serviceAccountId" was null or undefined when calling updateServiceAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/serviceaccounts/{serviceAccountId}`.replace(`{${"serviceAccountId"}}`, encodeURIComponent(String(requestParameters['serviceAccountId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateServiceAccountFormToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateServiceAccount200ResponseFromJSON(jsonValue));
    }

    /**
     * Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation): action: `serviceaccounts:write` scope: `serviceaccounts:id:1` (single service account)
     * Update service account
     */
    async updateServiceAccount(requestParameters: ServiceAccountsApiUpdateServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateServiceAccount200Response> {
        const response = await this.updateServiceAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
