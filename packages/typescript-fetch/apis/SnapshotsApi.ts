/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDashboardSnapshot200Response,
  CreateDashboardSnapshotCommand,
  DashboardSnapshotDTO,
  ErrorResponseBody,
  GetSharingOptions200Response,
  SuccessResponseBody,
} from '../models/index';
import {
    CreateDashboardSnapshot200ResponseFromJSON,
    CreateDashboardSnapshot200ResponseToJSON,
    CreateDashboardSnapshotCommandFromJSON,
    CreateDashboardSnapshotCommandToJSON,
    DashboardSnapshotDTOFromJSON,
    DashboardSnapshotDTOToJSON,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    GetSharingOptions200ResponseFromJSON,
    GetSharingOptions200ResponseToJSON,
    SuccessResponseBodyFromJSON,
    SuccessResponseBodyToJSON,
} from '../models/index';

export interface SnapshotsApiCreateDashboardSnapshotRequest {
    body: CreateDashboardSnapshotCommand;
}

export interface SnapshotsApiDeleteDashboardSnapshotRequest {
    key: string;
}

export interface SnapshotsApiDeleteDashboardSnapshotByDeleteKeyRequest {
    deleteKey: string;
}

export interface SnapshotsApiGetDashboardSnapshotRequest {
    key: string;
}

export interface SnapshotsApiSearchDashboardSnapshotsRequest {
    query?: string;
    limit?: number;
}

/**
 * 
 */
export class SnapshotsApi extends runtime.BaseAPI {

    /**
     * Snapshot public mode should be enabled or authentication is required.
     * When creating a snapshot using the API, you have to provide the full dashboard payload including the snapshot data. This endpoint is designed for the Grafana UI.
     */
    async createDashboardSnapshotRaw(requestParameters: SnapshotsApiCreateDashboardSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateDashboardSnapshot200Response>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createDashboardSnapshot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snapshots`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDashboardSnapshotCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateDashboardSnapshot200ResponseFromJSON(jsonValue));
    }

    /**
     * Snapshot public mode should be enabled or authentication is required.
     * When creating a snapshot using the API, you have to provide the full dashboard payload including the snapshot data. This endpoint is designed for the Grafana UI.
     */
    async createDashboardSnapshot(requestParameters: SnapshotsApiCreateDashboardSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateDashboardSnapshot200Response> {
        const response = await this.createDashboardSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Snapshot by Key.
     */
    async deleteDashboardSnapshotRaw(requestParameters: SnapshotsApiDeleteDashboardSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling deleteDashboardSnapshot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snapshots/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Delete Snapshot by Key.
     */
    async deleteDashboardSnapshot(requestParameters: SnapshotsApiDeleteDashboardSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.deleteDashboardSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Snapshot public mode should be enabled or authentication is required.
     * Delete Snapshot by deleteKey.
     */
    async deleteDashboardSnapshotByDeleteKeyRaw(requestParameters: SnapshotsApiDeleteDashboardSnapshotByDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['deleteKey'] == null) {
            throw new runtime.RequiredError(
                'deleteKey',
                'Required parameter "deleteKey" was null or undefined when calling deleteDashboardSnapshotByDeleteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snapshots-delete/{deleteKey}`.replace(`{${"deleteKey"}}`, encodeURIComponent(String(requestParameters['deleteKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Snapshot public mode should be enabled or authentication is required.
     * Delete Snapshot by deleteKey.
     */
    async deleteDashboardSnapshotByDeleteKey(requestParameters: SnapshotsApiDeleteDashboardSnapshotByDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.deleteDashboardSnapshotByDeleteKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Snapshot by Key.
     */
    async getDashboardSnapshotRaw(requestParameters: SnapshotsApiGetDashboardSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling getDashboardSnapshot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snapshots/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get Snapshot by Key.
     */
    async getDashboardSnapshot(requestParameters: SnapshotsApiGetDashboardSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getDashboardSnapshotRaw(requestParameters, initOverrides);
    }

    /**
     * Get snapshot sharing settings.
     */
    async getSharingOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSharingOptions200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/snapshot/shared-options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSharingOptions200ResponseFromJSON(jsonValue));
    }

    /**
     * Get snapshot sharing settings.
     */
    async getSharingOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSharingOptions200Response> {
        const response = await this.getSharingOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * List snapshots.
     */
    async searchDashboardSnapshotsRaw(requestParameters: SnapshotsApiSearchDashboardSnapshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DashboardSnapshotDTO>>> {
        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/dashboard/snapshots`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DashboardSnapshotDTOFromJSON));
    }

    /**
     * List snapshots.
     */
    async searchDashboardSnapshots(requestParameters: SnapshotsApiSearchDashboardSnapshotsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DashboardSnapshotDTO>> {
        const response = await this.searchDashboardSnapshotsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
