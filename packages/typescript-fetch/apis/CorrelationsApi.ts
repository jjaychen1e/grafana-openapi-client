/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Correlation,
  CreateCorrelationCommand,
  CreateCorrelationResponseBody,
  DeleteCorrelationResponseBody,
  ErrorResponseBody,
  UpdateCorrelationCommand,
  UpdateCorrelationResponseBody,
} from '../models/index';
import {
    CorrelationFromJSON,
    CorrelationToJSON,
    CreateCorrelationCommandFromJSON,
    CreateCorrelationCommandToJSON,
    CreateCorrelationResponseBodyFromJSON,
    CreateCorrelationResponseBodyToJSON,
    DeleteCorrelationResponseBodyFromJSON,
    DeleteCorrelationResponseBodyToJSON,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    UpdateCorrelationCommandFromJSON,
    UpdateCorrelationCommandToJSON,
    UpdateCorrelationResponseBodyFromJSON,
    UpdateCorrelationResponseBodyToJSON,
} from '../models/index';

export interface CorrelationsApiCreateCorrelationRequest {
    sourceUID: string;
    body: CreateCorrelationCommand;
}

export interface CorrelationsApiDeleteCorrelationRequest {
    uid: string;
    correlationUID: string;
}

export interface CorrelationsApiGetCorrelationRequest {
    sourceUID: string;
    correlationUID: string;
}

export interface CorrelationsApiGetCorrelationsRequest {
    limit?: number;
    page?: number;
    sourceUID?: Array<string>;
}

export interface CorrelationsApiGetCorrelationsBySourceUIDRequest {
    sourceUID: string;
}

export interface CorrelationsApiUpdateCorrelationRequest {
    sourceUID: string;
    correlationUID: string;
    body?: UpdateCorrelationCommand;
}

/**
 * 
 */
export class CorrelationsApi extends runtime.BaseAPI {

    /**
     * Add correlation.
     */
    async createCorrelationRaw(requestParameters: CorrelationsApiCreateCorrelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCorrelationResponseBody>> {
        if (requestParameters['sourceUID'] == null) {
            throw new runtime.RequiredError(
                'sourceUID',
                'Required parameter "sourceUID" was null or undefined when calling createCorrelation().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createCorrelation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/datasources/uid/{sourceUID}/correlations`.replace(`{${"sourceUID"}}`, encodeURIComponent(String(requestParameters['sourceUID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCorrelationCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCorrelationResponseBodyFromJSON(jsonValue));
    }

    /**
     * Add correlation.
     */
    async createCorrelation(requestParameters: CorrelationsApiCreateCorrelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCorrelationResponseBody> {
        const response = await this.createCorrelationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a correlation.
     */
    async deleteCorrelationRaw(requestParameters: CorrelationsApiDeleteCorrelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteCorrelationResponseBody>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling deleteCorrelation().'
            );
        }

        if (requestParameters['correlationUID'] == null) {
            throw new runtime.RequiredError(
                'correlationUID',
                'Required parameter "correlationUID" was null or undefined when calling deleteCorrelation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/datasources/uid/{uid}/correlations/{correlationUID}`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))).replace(`{${"correlationUID"}}`, encodeURIComponent(String(requestParameters['correlationUID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteCorrelationResponseBodyFromJSON(jsonValue));
    }

    /**
     * Delete a correlation.
     */
    async deleteCorrelation(requestParameters: CorrelationsApiDeleteCorrelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteCorrelationResponseBody> {
        const response = await this.deleteCorrelationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a correlation.
     */
    async getCorrelationRaw(requestParameters: CorrelationsApiGetCorrelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Correlation>> {
        if (requestParameters['sourceUID'] == null) {
            throw new runtime.RequiredError(
                'sourceUID',
                'Required parameter "sourceUID" was null or undefined when calling getCorrelation().'
            );
        }

        if (requestParameters['correlationUID'] == null) {
            throw new runtime.RequiredError(
                'correlationUID',
                'Required parameter "correlationUID" was null or undefined when calling getCorrelation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/datasources/uid/{sourceUID}/correlations/{correlationUID}`.replace(`{${"sourceUID"}}`, encodeURIComponent(String(requestParameters['sourceUID']))).replace(`{${"correlationUID"}}`, encodeURIComponent(String(requestParameters['correlationUID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CorrelationFromJSON(jsonValue));
    }

    /**
     * Gets a correlation.
     */
    async getCorrelation(requestParameters: CorrelationsApiGetCorrelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Correlation> {
        const response = await this.getCorrelationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all correlations.
     */
    async getCorrelationsRaw(requestParameters: CorrelationsApiGetCorrelationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Correlation>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['sourceUID'] != null) {
            queryParameters['sourceUID'] = requestParameters['sourceUID'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/datasources/correlations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CorrelationFromJSON));
    }

    /**
     * Gets all correlations.
     */
    async getCorrelations(requestParameters: CorrelationsApiGetCorrelationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Correlation>> {
        const response = await this.getCorrelationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all correlations originating from the given data source.
     */
    async getCorrelationsBySourceUIDRaw(requestParameters: CorrelationsApiGetCorrelationsBySourceUIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Correlation>>> {
        if (requestParameters['sourceUID'] == null) {
            throw new runtime.RequiredError(
                'sourceUID',
                'Required parameter "sourceUID" was null or undefined when calling getCorrelationsBySourceUID().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/datasources/uid/{sourceUID}/correlations`.replace(`{${"sourceUID"}}`, encodeURIComponent(String(requestParameters['sourceUID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CorrelationFromJSON));
    }

    /**
     * Gets all correlations originating from the given data source.
     */
    async getCorrelationsBySourceUID(requestParameters: CorrelationsApiGetCorrelationsBySourceUIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Correlation>> {
        const response = await this.getCorrelationsBySourceUIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a correlation.
     */
    async updateCorrelationRaw(requestParameters: CorrelationsApiUpdateCorrelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateCorrelationResponseBody>> {
        if (requestParameters['sourceUID'] == null) {
            throw new runtime.RequiredError(
                'sourceUID',
                'Required parameter "sourceUID" was null or undefined when calling updateCorrelation().'
            );
        }

        if (requestParameters['correlationUID'] == null) {
            throw new runtime.RequiredError(
                'correlationUID',
                'Required parameter "correlationUID" was null or undefined when calling updateCorrelation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/datasources/uid/{sourceUID}/correlations/{correlationUID}`.replace(`{${"sourceUID"}}`, encodeURIComponent(String(requestParameters['sourceUID']))).replace(`{${"correlationUID"}}`, encodeURIComponent(String(requestParameters['correlationUID']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCorrelationCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateCorrelationResponseBodyFromJSON(jsonValue));
    }

    /**
     * Updates a correlation.
     */
    async updateCorrelation(requestParameters: CorrelationsApiUpdateCorrelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateCorrelationResponseBody> {
        const response = await this.updateCorrelationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
