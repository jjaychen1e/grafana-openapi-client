/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  DashboardVersionMeta,
  ErrorResponseBody,
  PostDashboard200Response,
  RestoreDashboardVersionCommand,
} from '../models/index.js';
import {
    DashboardVersionMetaFromJSON,
    DashboardVersionMetaToJSON,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    PostDashboard200ResponseFromJSON,
    PostDashboard200ResponseToJSON,
    RestoreDashboardVersionCommandFromJSON,
    RestoreDashboardVersionCommandToJSON,
} from '../models/index.js';

export interface DashboardVersionsApiGetDashboardVersionByIDRequest {
    dashboardID: number;
    dashboardVersionID: number;
}

export interface DashboardVersionsApiGetDashboardVersionByUIDRequest {
    dashboardVersionID: number;
    uid: string;
}

export interface DashboardVersionsApiGetDashboardVersionsByIDRequest {
    dashboardID: number;
}

export interface DashboardVersionsApiGetDashboardVersionsByUIDRequest {
    uid: string;
    limit?: number;
    start?: number;
}

export interface DashboardVersionsApiRestoreDashboardVersionByIDRequest {
    dashboardID: number;
    body: RestoreDashboardVersionCommand;
}

export interface DashboardVersionsApiRestoreDashboardVersionByUIDRequest {
    uid: string;
    body: RestoreDashboardVersionCommand;
}

/**
 * 
 */
export class DashboardVersionsApi extends runtime.BaseAPI {

    /**
     * Please refer to [updated API](#/dashboard_versions/getDashboardVersionByUID) instead
     * Get a specific dashboard version.
     * @deprecated
     */
    async getDashboardVersionByIDRaw(requestParameters: DashboardVersionsApiGetDashboardVersionByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DashboardVersionMeta>> {
        if (requestParameters['dashboardID'] == null) {
            throw new runtime.RequiredError(
                'dashboardID',
                'Required parameter "dashboardID" was null or undefined when calling getDashboardVersionByID().'
            );
        }

        if (requestParameters['dashboardVersionID'] == null) {
            throw new runtime.RequiredError(
                'dashboardVersionID',
                'Required parameter "dashboardVersionID" was null or undefined when calling getDashboardVersionByID().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/dashboards/id/{DashboardID}/versions/{DashboardVersionID}`.replace(`{${"DashboardID"}}`, encodeURIComponent(String(requestParameters['dashboardID']))).replace(`{${"DashboardVersionID"}}`, encodeURIComponent(String(requestParameters['dashboardVersionID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DashboardVersionMetaFromJSON(jsonValue));
    }

    /**
     * Please refer to [updated API](#/dashboard_versions/getDashboardVersionByUID) instead
     * Get a specific dashboard version.
     * @deprecated
     */
    async getDashboardVersionByID(requestParameters: DashboardVersionsApiGetDashboardVersionByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DashboardVersionMeta> {
        const response = await this.getDashboardVersionByIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific dashboard version using UID.
     */
    async getDashboardVersionByUIDRaw(requestParameters: DashboardVersionsApiGetDashboardVersionByUIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DashboardVersionMeta>> {
        if (requestParameters['dashboardVersionID'] == null) {
            throw new runtime.RequiredError(
                'dashboardVersionID',
                'Required parameter "dashboardVersionID" was null or undefined when calling getDashboardVersionByUID().'
            );
        }

        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling getDashboardVersionByUID().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/dashboards/uid/{uid}/versions/{DashboardVersionID}`.replace(`{${"DashboardVersionID"}}`, encodeURIComponent(String(requestParameters['dashboardVersionID']))).replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DashboardVersionMetaFromJSON(jsonValue));
    }

    /**
     * Get a specific dashboard version using UID.
     */
    async getDashboardVersionByUID(requestParameters: DashboardVersionsApiGetDashboardVersionByUIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DashboardVersionMeta> {
        const response = await this.getDashboardVersionByUIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Please refer to [updated API](#/dashboard_versions/getDashboardVersionsByUID) instead
     * Gets all existing versions for the dashboard.
     * @deprecated
     */
    async getDashboardVersionsByIDRaw(requestParameters: DashboardVersionsApiGetDashboardVersionsByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DashboardVersionMeta>>> {
        if (requestParameters['dashboardID'] == null) {
            throw new runtime.RequiredError(
                'dashboardID',
                'Required parameter "dashboardID" was null or undefined when calling getDashboardVersionsByID().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/dashboards/id/{DashboardID}/versions`.replace(`{${"DashboardID"}}`, encodeURIComponent(String(requestParameters['dashboardID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DashboardVersionMetaFromJSON));
    }

    /**
     * Please refer to [updated API](#/dashboard_versions/getDashboardVersionsByUID) instead
     * Gets all existing versions for the dashboard.
     * @deprecated
     */
    async getDashboardVersionsByID(requestParameters: DashboardVersionsApiGetDashboardVersionsByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DashboardVersionMeta>> {
        const response = await this.getDashboardVersionsByIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all existing versions for the dashboard using UID.
     */
    async getDashboardVersionsByUIDRaw(requestParameters: DashboardVersionsApiGetDashboardVersionsByUIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DashboardVersionMeta>>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling getDashboardVersionsByUID().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/dashboards/uid/{uid}/versions`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DashboardVersionMetaFromJSON));
    }

    /**
     * Gets all existing versions for the dashboard using UID.
     */
    async getDashboardVersionsByUID(requestParameters: DashboardVersionsApiGetDashboardVersionsByUIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DashboardVersionMeta>> {
        const response = await this.getDashboardVersionsByUIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Please refer to [updated API](#/dashboard_versions/restoreDashboardVersionByUID) instead
     * Restore a dashboard to a given dashboard version.
     * @deprecated
     */
    async restoreDashboardVersionByIDRaw(requestParameters: DashboardVersionsApiRestoreDashboardVersionByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostDashboard200Response>> {
        if (requestParameters['dashboardID'] == null) {
            throw new runtime.RequiredError(
                'dashboardID',
                'Required parameter "dashboardID" was null or undefined when calling restoreDashboardVersionByID().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling restoreDashboardVersionByID().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/dashboards/id/{DashboardID}/restore`.replace(`{${"DashboardID"}}`, encodeURIComponent(String(requestParameters['dashboardID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestoreDashboardVersionCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostDashboard200ResponseFromJSON(jsonValue));
    }

    /**
     * Please refer to [updated API](#/dashboard_versions/restoreDashboardVersionByUID) instead
     * Restore a dashboard to a given dashboard version.
     * @deprecated
     */
    async restoreDashboardVersionByID(requestParameters: DashboardVersionsApiRestoreDashboardVersionByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostDashboard200Response> {
        const response = await this.restoreDashboardVersionByIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Restore a dashboard to a given dashboard version using UID.
     */
    async restoreDashboardVersionByUIDRaw(requestParameters: DashboardVersionsApiRestoreDashboardVersionByUIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostDashboard200Response>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling restoreDashboardVersionByUID().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling restoreDashboardVersionByUID().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/dashboards/uid/{uid}/restore`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestoreDashboardVersionCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostDashboard200ResponseFromJSON(jsonValue));
    }

    /**
     * Restore a dashboard to a given dashboard version using UID.
     */
    async restoreDashboardVersionByUID(requestParameters: DashboardVersionsApiRestoreDashboardVersionByUIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostDashboard200Response> {
        const response = await this.restoreDashboardVersionByUIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
