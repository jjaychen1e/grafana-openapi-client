/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangeUserPasswordCommand,
  ClearHelpFlags200Response,
  ErrorResponseBody,
  QuotaDTO,
  RevokeAuthTokenCmd,
  SuccessResponseBody,
  TeamDTO,
  UpdateUserCommand,
  UserOrgDTO,
  UserProfileDTO,
  UserToken,
} from '../models/index';
import {
    ChangeUserPasswordCommandFromJSON,
    ChangeUserPasswordCommandToJSON,
    ClearHelpFlags200ResponseFromJSON,
    ClearHelpFlags200ResponseToJSON,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    QuotaDTOFromJSON,
    QuotaDTOToJSON,
    RevokeAuthTokenCmdFromJSON,
    RevokeAuthTokenCmdToJSON,
    SuccessResponseBodyFromJSON,
    SuccessResponseBodyToJSON,
    TeamDTOFromJSON,
    TeamDTOToJSON,
    UpdateUserCommandFromJSON,
    UpdateUserCommandToJSON,
    UserOrgDTOFromJSON,
    UserOrgDTOToJSON,
    UserProfileDTOFromJSON,
    UserProfileDTOToJSON,
    UserTokenFromJSON,
    UserTokenToJSON,
} from '../models/index';

export interface SignedInUserApiChangeUserPasswordRequest {
    body: ChangeUserPasswordCommand;
}

export interface SignedInUserApiRevokeUserAuthTokenRequest {
    body: RevokeAuthTokenCmd;
}

export interface SignedInUserApiSetHelpFlagRequest {
    flagId: string;
}

export interface SignedInUserApiStarDashboardRequest {
    dashboardId: string;
}

export interface SignedInUserApiStarDashboardByUIDRequest {
    dashboardUid: string;
}

export interface SignedInUserApiUnstarDashboardRequest {
    dashboardId: string;
}

export interface SignedInUserApiUnstarDashboardByUIDRequest {
    dashboardUid: string;
}

export interface SignedInUserApiUpdateSignedInUserRequest {
    body: UpdateUserCommand;
}

export interface SignedInUserApiUserSetUsingOrgRequest {
    orgId: number;
}

/**
 * 
 */
export class SignedInUserApi extends runtime.BaseAPI {

    /**
     * Changes the password for the user.
     * Change Password.
     */
    async changeUserPasswordRaw(requestParameters: SignedInUserApiChangeUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling changeUserPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeUserPasswordCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Changes the password for the user.
     * Change Password.
     */
    async changeUserPassword(requestParameters: SignedInUserApiChangeUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.changeUserPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Clear user help flag.
     */
    async clearHelpFlagsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClearHelpFlags200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/helpflags/clear`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClearHelpFlags200ResponseFromJSON(jsonValue));
    }

    /**
     * Clear user help flag.
     */
    async clearHelpFlags(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClearHelpFlags200Response> {
        const response = await this.clearHelpFlagsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get (current authenticated user)
     */
    async getSignedInUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfileDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileDTOFromJSON(jsonValue));
    }

    /**
     * Get (current authenticated user)
     */
    async getSignedInUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfileDTO> {
        const response = await this.getSignedInUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Return a list of all organizations of the current user.
     * Organizations of the actual User.
     */
    async getSignedInUserOrgListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserOrgDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/orgs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserOrgDTOFromJSON));
    }

    /**
     * Return a list of all organizations of the current user.
     * Organizations of the actual User.
     */
    async getSignedInUserOrgList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserOrgDTO>> {
        const response = await this.getSignedInUserOrgListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Return a list of all teams that the current user is member of.
     * Teams that the actual User is member of.
     */
    async getSignedInUserTeamListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeamDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/teams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamDTOFromJSON));
    }

    /**
     * Return a list of all teams that the current user is member of.
     * Teams that the actual User is member of.
     */
    async getSignedInUserTeamList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeamDTO>> {
        const response = await this.getSignedInUserTeamListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Return a list of all auth tokens (devices) that the actual user currently have logged in from.
     * Auth tokens of the actual User.
     */
    async getUserAuthTokensRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserToken>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/auth-tokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserTokenFromJSON));
    }

    /**
     * Return a list of all auth tokens (devices) that the actual user currently have logged in from.
     * Auth tokens of the actual User.
     */
    async getUserAuthTokens(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserToken>> {
        const response = await this.getUserAuthTokensRaw(initOverrides);
        return await response.value();
    }

    /**
     * Fetch user quota.
     */
    async getUserQuotasRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QuotaDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/quotas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuotaDTOFromJSON));
    }

    /**
     * Fetch user quota.
     */
    async getUserQuotas(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QuotaDTO>> {
        const response = await this.getUserQuotasRaw(initOverrides);
        return await response.value();
    }

    /**
     * Revokes the given auth token (device) for the actual user. User of issued auth token (device) will no longer be logged in and will be required to authenticate again upon next activity.
     * Revoke an auth token of the actual User.
     */
    async revokeUserAuthTokenRaw(requestParameters: SignedInUserApiRevokeUserAuthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling revokeUserAuthToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/revoke-auth-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RevokeAuthTokenCmdToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Revokes the given auth token (device) for the actual user. User of issued auth token (device) will no longer be logged in and will be required to authenticate again upon next activity.
     * Revoke an auth token of the actual User.
     */
    async revokeUserAuthToken(requestParameters: SignedInUserApiRevokeUserAuthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.revokeUserAuthTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set user help flag.
     */
    async setHelpFlagRaw(requestParameters: SignedInUserApiSetHelpFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClearHelpFlags200Response>> {
        if (requestParameters['flagId'] == null) {
            throw new runtime.RequiredError(
                'flagId',
                'Required parameter "flagId" was null or undefined when calling setHelpFlag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/helpflags/{flag_id}`.replace(`{${"flag_id"}}`, encodeURIComponent(String(requestParameters['flagId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClearHelpFlags200ResponseFromJSON(jsonValue));
    }

    /**
     * Set user help flag.
     */
    async setHelpFlag(requestParameters: SignedInUserApiSetHelpFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClearHelpFlags200Response> {
        const response = await this.setHelpFlagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stars the given Dashboard for the actual user.
     * Star a dashboard.
     * @deprecated
     */
    async starDashboardRaw(requestParameters: SignedInUserApiStarDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['dashboardId'] == null) {
            throw new runtime.RequiredError(
                'dashboardId',
                'Required parameter "dashboardId" was null or undefined when calling starDashboard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/stars/dashboard/{dashboard_id}`.replace(`{${"dashboard_id"}}`, encodeURIComponent(String(requestParameters['dashboardId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Stars the given Dashboard for the actual user.
     * Star a dashboard.
     * @deprecated
     */
    async starDashboard(requestParameters: SignedInUserApiStarDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.starDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stars the given Dashboard for the actual user.
     * Star a dashboard.
     */
    async starDashboardByUIDRaw(requestParameters: SignedInUserApiStarDashboardByUIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['dashboardUid'] == null) {
            throw new runtime.RequiredError(
                'dashboardUid',
                'Required parameter "dashboardUid" was null or undefined when calling starDashboardByUID().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/stars/dashboard/uid/{dashboard_uid}`.replace(`{${"dashboard_uid"}}`, encodeURIComponent(String(requestParameters['dashboardUid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Stars the given Dashboard for the actual user.
     * Star a dashboard.
     */
    async starDashboardByUID(requestParameters: SignedInUserApiStarDashboardByUIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.starDashboardByUIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the starring of the given Dashboard for the actual user.
     * Unstar a dashboard.
     * @deprecated
     */
    async unstarDashboardRaw(requestParameters: SignedInUserApiUnstarDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['dashboardId'] == null) {
            throw new runtime.RequiredError(
                'dashboardId',
                'Required parameter "dashboardId" was null or undefined when calling unstarDashboard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/stars/dashboard/{dashboard_id}`.replace(`{${"dashboard_id"}}`, encodeURIComponent(String(requestParameters['dashboardId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Deletes the starring of the given Dashboard for the actual user.
     * Unstar a dashboard.
     * @deprecated
     */
    async unstarDashboard(requestParameters: SignedInUserApiUnstarDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.unstarDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the starring of the given Dashboard for the actual user.
     * Unstar a dashboard.
     */
    async unstarDashboardByUIDRaw(requestParameters: SignedInUserApiUnstarDashboardByUIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['dashboardUid'] == null) {
            throw new runtime.RequiredError(
                'dashboardUid',
                'Required parameter "dashboardUid" was null or undefined when calling unstarDashboardByUID().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/stars/dashboard/uid/{dashboard_uid}`.replace(`{${"dashboard_uid"}}`, encodeURIComponent(String(requestParameters['dashboardUid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Deletes the starring of the given Dashboard for the actual user.
     * Unstar a dashboard.
     */
    async unstarDashboardByUID(requestParameters: SignedInUserApiUnstarDashboardByUIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.unstarDashboardByUIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update signed in User.
     */
    async updateSignedInUserRaw(requestParameters: SignedInUserApiUpdateSignedInUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateSignedInUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Update signed in User.
     */
    async updateSignedInUser(requestParameters: SignedInUserApiUpdateSignedInUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.updateSignedInUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Switch user context to the given organization.
     * Switch user context for signed in user.
     */
    async userSetUsingOrgRaw(requestParameters: SignedInUserApiUserSetUsingOrgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling userSetUsingOrg().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/using/{org_id}`.replace(`{${"org_id"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Switch user context to the given organization.
     * Switch user context for signed in user.
     */
    async userSetUsingOrg(requestParameters: SignedInUserApiUserSetUsingOrgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.userSetUsingOrgRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
