/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  DashboardACLInfoDTO,
  ErrorResponseBody,
  SuccessResponseBody,
  UpdateDashboardACLCommand,
} from '../models/index.js';
import {
    DashboardACLInfoDTOFromJSON,
    DashboardACLInfoDTOToJSON,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    SuccessResponseBodyFromJSON,
    SuccessResponseBodyToJSON,
    UpdateDashboardACLCommandFromJSON,
    UpdateDashboardACLCommandToJSON,
} from '../models/index.js';

export interface FolderPermissionsApiGetFolderPermissionListRequest {
    folderUid: string;
}

export interface FolderPermissionsApiUpdateFolderPermissionsRequest {
    folderUid: string;
    body: UpdateDashboardACLCommand;
}

/**
 * 
 */
export class FolderPermissionsApi extends runtime.BaseAPI {

    /**
     * Gets all existing permissions for the folder with the given `uid`.
     */
    async getFolderPermissionListRaw(requestParameters: FolderPermissionsApiGetFolderPermissionListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DashboardACLInfoDTO>>> {
        if (requestParameters['folderUid'] == null) {
            throw new runtime.RequiredError(
                'folderUid',
                'Required parameter "folderUid" was null or undefined when calling getFolderPermissionList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/folders/{folder_uid}/permissions`.replace(`{${"folder_uid"}}`, encodeURIComponent(String(requestParameters['folderUid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DashboardACLInfoDTOFromJSON));
    }

    /**
     * Gets all existing permissions for the folder with the given `uid`.
     */
    async getFolderPermissionList(requestParameters: FolderPermissionsApiGetFolderPermissionListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DashboardACLInfoDTO>> {
        const response = await this.getFolderPermissionListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates permissions for a folder. This operation will remove existing permissions if they’re not included in the request.
     */
    async updateFolderPermissionsRaw(requestParameters: FolderPermissionsApiUpdateFolderPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['folderUid'] == null) {
            throw new runtime.RequiredError(
                'folderUid',
                'Required parameter "folderUid" was null or undefined when calling updateFolderPermissions().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateFolderPermissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/folders/{folder_uid}/permissions`.replace(`{${"folder_uid"}}`, encodeURIComponent(String(requestParameters['folderUid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDashboardACLCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Updates permissions for a folder. This operation will remove existing permissions if they’re not included in the request.
     */
    async updateFolderPermissions(requestParameters: FolderPermissionsApiUpdateFolderPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.updateFolderPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
