/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiKeyDTO,
  ErrorResponseBody,
  SuccessResponseBody,
} from '../models/index';
import {
    ApiKeyDTOFromJSON,
    ApiKeyDTOToJSON,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    SuccessResponseBodyFromJSON,
    SuccessResponseBodyToJSON,
} from '../models/index';

export interface ApiKeysApiDeleteAPIkeyRequest {
    id: number;
}

export interface ApiKeysApiGetAPIkeysRequest {
    includeExpired?: boolean;
}

/**
 * 
 */
export class ApiKeysApi extends runtime.BaseAPI {

    /**
     * Will return details of the created API key.
     * Creates an API key.
     * @deprecated
     */
    async addAPIkeyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/auth/keys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Will return details of the created API key.
     * Creates an API key.
     * @deprecated
     */
    async addAPIkey(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addAPIkeyRaw(initOverrides);
    }

    /**
     * Deletes an API key. Deprecated. See: https://grafana.com/docs/grafana/next/administration/service-accounts/migrate-api-keys/.
     * Delete API key.
     * @deprecated
     */
    async deleteAPIkeyRaw(requestParameters: ApiKeysApiDeleteAPIkeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteAPIkey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/auth/keys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Deletes an API key. Deprecated. See: https://grafana.com/docs/grafana/next/administration/service-accounts/migrate-api-keys/.
     * Delete API key.
     * @deprecated
     */
    async deleteAPIkey(requestParameters: ApiKeysApiDeleteAPIkeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.deleteAPIkeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Will return auth keys.  Deprecated: true.  Deprecated. Please use GET /api/serviceaccounts and GET /api/serviceaccounts/{id}/tokens instead see https://grafana.com/docs/grafana/next/administration/service-accounts/migrate-api-keys/.
     * Get auth keys.
     */
    async getAPIkeysRaw(requestParameters: ApiKeysApiGetAPIkeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiKeyDTO>>> {
        const queryParameters: any = {};

        if (requestParameters['includeExpired'] != null) {
            queryParameters['includeExpired'] = requestParameters['includeExpired'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/auth/keys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiKeyDTOFromJSON));
    }

    /**
     * Will return auth keys.  Deprecated: true.  Deprecated. Please use GET /api/serviceaccounts and GET /api/serviceaccounts/{id}/tokens instead see https://grafana.com/docs/grafana/next/administration/service-accounts/migrate-api-keys/.
     * Get auth keys.
     */
    async getAPIkeys(requestParameters: ApiKeysApiGetAPIkeysRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiKeyDTO>> {
        const response = await this.getAPIkeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
