/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActiveUserStats,
  DeleteTokenCommand,
  ErrorResponseBody,
  Token,
} from '../models/index';
import {
    ActiveUserStatsFromJSON,
    ActiveUserStatsToJSON,
    DeleteTokenCommandFromJSON,
    DeleteTokenCommandToJSON,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    TokenFromJSON,
    TokenToJSON,
} from '../models/index';

export interface LicensingApiDeleteLicenseTokenRequest {
    body: DeleteTokenCommand;
}

export interface LicensingApiPostLicenseTokenRequest {
    body: DeleteTokenCommand;
}

export interface LicensingApiPostRenewLicenseTokenRequest {
    body: object;
}

/**
 * 
 */
export class LicensingApi extends runtime.BaseAPI {

    /**
     * Removes the license stored in the Grafana database. Available in Grafana Enterprise v7.4+.  You need to have a permission with action `licensing:delete`.
     * Remove license from database.
     */
    async deleteLicenseTokenRaw(requestParameters: LicensingApiDeleteLicenseTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ErrorResponseBody>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling deleteLicenseToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/licensing/token`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteTokenCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ErrorResponseBodyFromJSON(jsonValue));
    }

    /**
     * Removes the license stored in the Grafana database. Available in Grafana Enterprise v7.4+.  You need to have a permission with action `licensing:delete`.
     * Remove license from database.
     */
    async deleteLicenseToken(requestParameters: LicensingApiDeleteLicenseTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ErrorResponseBody> {
        const response = await this.deleteLicenseTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You need to have a permission with action `licensing.reports:read`.
     * Get custom permissions report in CSV format.
     * @deprecated
     */
    async getCustomPermissionsCSVRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/licensing/custom-permissions-csv`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * You need to have a permission with action `licensing.reports:read`.
     * Get custom permissions report in CSV format.
     * @deprecated
     */
    async getCustomPermissionsCSV(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getCustomPermissionsCSVRaw(initOverrides);
    }

    /**
     * You need to have a permission with action `licensing.reports:read`.
     * Get custom permissions report.
     * @deprecated
     */
    async getCustomPermissionsReportRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/licensing/custom-permissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * You need to have a permission with action `licensing.reports:read`.
     * Get custom permissions report.
     * @deprecated
     */
    async getCustomPermissionsReport(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getCustomPermissionsReportRaw(initOverrides);
    }

    /**
     * You need to have a permission with action `licensing:read`.
     * Get license token.
     */
    async getLicenseTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/licensing/token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * You need to have a permission with action `licensing:read`.
     * Get license token.
     */
    async getLicenseToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.getLicenseTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Check license availability.
     */
    async getStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/licensing/check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check license availability.
     */
    async getStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getStatusRaw(initOverrides);
    }

    /**
     * You need to have a permission with action `licensing:update`.
     * Create license token.
     */
    async postLicenseTokenRaw(requestParameters: LicensingApiPostLicenseTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling postLicenseToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/licensing/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteTokenCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * You need to have a permission with action `licensing:update`.
     * Create license token.
     */
    async postLicenseToken(requestParameters: LicensingApiPostLicenseTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.postLicenseTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Manually ask license issuer for a new token. Available in Grafana Enterprise v7.4+.  You need to have a permission with action `licensing:update`.
     * Manually force license refresh.
     */
    async postRenewLicenseTokenRaw(requestParameters: LicensingApiPostRenewLicenseTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling postRenewLicenseToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/licensing/token/renew`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manually ask license issuer for a new token. Available in Grafana Enterprise v7.4+.  You need to have a permission with action `licensing:update`.
     * Manually force license refresh.
     */
    async postRenewLicenseToken(requestParameters: LicensingApiPostRenewLicenseTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postRenewLicenseTokenRaw(requestParameters, initOverrides);
    }

    /**
     * You need to have a permission with action `licensing:read`.
     * Refresh license stats.
     */
    async refreshLicenseStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActiveUserStats>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/licensing/refresh-stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActiveUserStatsFromJSON(jsonValue));
    }

    /**
     * You need to have a permission with action `licensing:read`.
     * Refresh license stats.
     */
    async refreshLicenseStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActiveUserStats> {
        const response = await this.refreshLicenseStatsRaw(initOverrides);
        return await response.value();
    }

}
