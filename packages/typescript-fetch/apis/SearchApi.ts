/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ErrorResponseBody,
  Hit,
  ListSortOptions200Response,
} from '../models/index.js';
import {
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    HitFromJSON,
    HitToJSON,
    ListSortOptions200ResponseFromJSON,
    ListSortOptions200ResponseToJSON,
} from '../models/index.js';

export interface SearchApiSearchRequest {
    query?: string;
    tag?: Array<string>;
    type?: SearchTypeEnum;
    dashboardIds?: Array<number>;
    dashboardUIDs?: Array<string>;
    folderIds?: Array<number>;
    folderUIDs?: Array<string>;
    starred?: boolean;
    limit?: number;
    page?: number;
    permission?: SearchPermissionEnum;
    sort?: SearchSortEnum;
    deleted?: boolean;
}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI {

    /**
     * List search sorting options.
     */
    async listSortOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListSortOptions200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/search/sorting`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListSortOptions200ResponseFromJSON(jsonValue));
    }

    /**
     * List search sorting options.
     */
    async listSortOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListSortOptions200Response> {
        const response = await this.listSortOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async searchRaw(requestParameters: SearchApiSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Hit>>> {
        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['tag'] != null) {
            queryParameters['tag'] = requestParameters['tag'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['dashboardIds'] != null) {
            queryParameters['dashboardIds'] = requestParameters['dashboardIds']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['dashboardUIDs'] != null) {
            queryParameters['dashboardUIDs'] = requestParameters['dashboardUIDs']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['folderIds'] != null) {
            queryParameters['folderIds'] = requestParameters['folderIds']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['folderUIDs'] != null) {
            queryParameters['folderUIDs'] = requestParameters['folderUIDs']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['starred'] != null) {
            queryParameters['starred'] = requestParameters['starred'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['permission'] != null) {
            queryParameters['permission'] = requestParameters['permission'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['deleted'] != null) {
            queryParameters['deleted'] = requestParameters['deleted'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HitFromJSON));
    }

    /**
     */
    async search(requestParameters: SearchApiSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Hit>> {
        const response = await this.searchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SearchTypeEnum = {
    Folder: 'dash-folder',
    Db: 'dash-db'
} as const;
export type SearchTypeEnum = typeof SearchTypeEnum[keyof typeof SearchTypeEnum];
/**
 * @export
 */
export const SearchPermissionEnum = {
    Edit: 'Edit',
    View: 'View'
} as const;
export type SearchPermissionEnum = typeof SearchPermissionEnum[keyof typeof SearchPermissionEnum];
/**
 * @export
 */
export const SearchSortEnum = {
    Asc: 'alpha-asc',
    Desc: 'alpha-desc'
} as const;
export type SearchSortEnum = typeof SearchSortEnum[keyof typeof SearchSortEnum];
