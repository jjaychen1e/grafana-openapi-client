/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponseBody,
  PatchPrefsCmd,
  Preferences,
  SuccessResponseBody,
  UpdatePrefsCmd,
} from '../models/index';
import {
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    PatchPrefsCmdFromJSON,
    PatchPrefsCmdToJSON,
    PreferencesFromJSON,
    PreferencesToJSON,
    SuccessResponseBodyFromJSON,
    SuccessResponseBodyToJSON,
    UpdatePrefsCmdFromJSON,
    UpdatePrefsCmdToJSON,
} from '../models/index';

export interface UserPreferencesApiPatchUserPreferencesRequest {
    body: PatchPrefsCmd;
}

export interface UserPreferencesApiUpdateUserPreferencesRequest {
    body: UpdatePrefsCmd;
}

/**
 * 
 */
export class UserPreferencesApi extends runtime.BaseAPI {

    /**
     * Get user preferences.
     */
    async getUserPreferencesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Preferences>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/preferences`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PreferencesFromJSON(jsonValue));
    }

    /**
     * Get user preferences.
     */
    async getUserPreferences(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Preferences> {
        const response = await this.getUserPreferencesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Patch user preferences.
     */
    async patchUserPreferencesRaw(requestParameters: UserPreferencesApiPatchUserPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchUserPreferences().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/preferences`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchPrefsCmdToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Patch user preferences.
     */
    async patchUserPreferences(requestParameters: UserPreferencesApiPatchUserPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.patchUserPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Omitting a key (`theme`, `homeDashboardId`, `timezone`) will cause the current value to be replaced with the system default value.
     * Update user preferences.
     */
    async updateUserPreferencesRaw(requestParameters: UserPreferencesApiUpdateUserPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateUserPreferences().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/preferences`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePrefsCmdToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Omitting a key (`theme`, `homeDashboardId`, `timezone`) will cause the current value to be replaced with the system default value.
     * Update user preferences.
     */
    async updateUserPreferences(requestParameters: UserPreferencesApiUpdateUserPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.updateUserPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
