/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePlaylistCommand,
  ErrorResponseBody,
  Playlist,
  PlaylistDTO,
  PlaylistItemDTO,
  SuccessResponseBody,
  UpdatePlaylistCommand,
} from '../models/index';
import {
    CreatePlaylistCommandFromJSON,
    CreatePlaylistCommandToJSON,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    PlaylistFromJSON,
    PlaylistToJSON,
    PlaylistDTOFromJSON,
    PlaylistDTOToJSON,
    PlaylistItemDTOFromJSON,
    PlaylistItemDTOToJSON,
    SuccessResponseBodyFromJSON,
    SuccessResponseBodyToJSON,
    UpdatePlaylistCommandFromJSON,
    UpdatePlaylistCommandToJSON,
} from '../models/index';

export interface PlaylistsApiCreatePlaylistRequest {
    body: CreatePlaylistCommand;
}

export interface PlaylistsApiDeletePlaylistRequest {
    uid: string;
}

export interface PlaylistsApiGetPlaylistRequest {
    uid: string;
}

export interface PlaylistsApiGetPlaylistItemsRequest {
    uid: string;
}

export interface PlaylistsApiSearchPlaylistsRequest {
    query?: string;
    limit?: number;
}

export interface PlaylistsApiUpdatePlaylistRequest {
    uid: string;
    body: UpdatePlaylistCommand;
}

/**
 * 
 */
export class PlaylistsApi extends runtime.BaseAPI {

    /**
     * Create playlist.
     */
    async createPlaylistRaw(requestParameters: PlaylistsApiCreatePlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Playlist>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createPlaylist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/playlists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePlaylistCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaylistFromJSON(jsonValue));
    }

    /**
     * Create playlist.
     */
    async createPlaylist(requestParameters: PlaylistsApiCreatePlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Playlist> {
        const response = await this.createPlaylistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete playlist.
     */
    async deletePlaylistRaw(requestParameters: PlaylistsApiDeletePlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling deletePlaylist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/playlists/{uid}`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Delete playlist.
     */
    async deletePlaylist(requestParameters: PlaylistsApiDeletePlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.deletePlaylistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get playlist.
     */
    async getPlaylistRaw(requestParameters: PlaylistsApiGetPlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaylistDTO>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling getPlaylist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/playlists/{uid}`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaylistDTOFromJSON(jsonValue));
    }

    /**
     * Get playlist.
     */
    async getPlaylist(requestParameters: PlaylistsApiGetPlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaylistDTO> {
        const response = await this.getPlaylistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get playlist items.
     */
    async getPlaylistItemsRaw(requestParameters: PlaylistsApiGetPlaylistItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlaylistItemDTO>>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling getPlaylistItems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/playlists/{uid}/items`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistItemDTOFromJSON));
    }

    /**
     * Get playlist items.
     */
    async getPlaylistItems(requestParameters: PlaylistsApiGetPlaylistItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlaylistItemDTO>> {
        const response = await this.getPlaylistItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get playlists.
     */
    async searchPlaylistsRaw(requestParameters: PlaylistsApiSearchPlaylistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Playlist>>> {
        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/playlists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistFromJSON));
    }

    /**
     * Get playlists.
     */
    async searchPlaylists(requestParameters: PlaylistsApiSearchPlaylistsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Playlist>> {
        const response = await this.searchPlaylistsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update playlist.
     */
    async updatePlaylistRaw(requestParameters: PlaylistsApiUpdatePlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaylistDTO>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling updatePlaylist().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updatePlaylist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/playlists/{uid}`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePlaylistCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaylistDTOFromJSON(jsonValue));
    }

    /**
     * Update playlist.
     */
    async updatePlaylist(requestParameters: PlaylistsApiUpdatePlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaylistDTO> {
        const response = await this.updatePlaylistRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
