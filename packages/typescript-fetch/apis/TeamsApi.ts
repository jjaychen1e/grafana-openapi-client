/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  AddTeamMemberCommand,
  CreateTeam200Response,
  CreateTeamCommand,
  ErrorResponseBody,
  Preferences,
  SearchTeamQueryResult,
  SetTeamMembershipsCommand,
  SuccessResponseBody,
  TeamDTO,
  TeamMemberDTO,
  UpdatePrefsCmd,
  UpdateTeamCommand,
  UpdateTeamMemberCommand,
} from '../models/index.js';
import {
    AddTeamMemberCommandFromJSON,
    AddTeamMemberCommandToJSON,
    CreateTeam200ResponseFromJSON,
    CreateTeam200ResponseToJSON,
    CreateTeamCommandFromJSON,
    CreateTeamCommandToJSON,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    PreferencesFromJSON,
    PreferencesToJSON,
    SearchTeamQueryResultFromJSON,
    SearchTeamQueryResultToJSON,
    SetTeamMembershipsCommandFromJSON,
    SetTeamMembershipsCommandToJSON,
    SuccessResponseBodyFromJSON,
    SuccessResponseBodyToJSON,
    TeamDTOFromJSON,
    TeamDTOToJSON,
    TeamMemberDTOFromJSON,
    TeamMemberDTOToJSON,
    UpdatePrefsCmdFromJSON,
    UpdatePrefsCmdToJSON,
    UpdateTeamCommandFromJSON,
    UpdateTeamCommandToJSON,
    UpdateTeamMemberCommandFromJSON,
    UpdateTeamMemberCommandToJSON,
} from '../models/index.js';

export interface TeamsApiAddTeamMemberRequest {
    teamId: string;
    body: AddTeamMemberCommand;
}

export interface TeamsApiCreateTeamRequest {
    body: CreateTeamCommand;
}

export interface TeamsApiDeleteTeamByIDRequest {
    teamId: string;
}

export interface TeamsApiGetTeamByIDRequest {
    teamId: string;
}

export interface TeamsApiGetTeamMembersRequest {
    teamId: string;
}

export interface TeamsApiGetTeamPreferencesRequest {
    teamId: string;
}

export interface TeamsApiRemoveTeamMemberRequest {
    teamId: string;
    userId: number;
}

export interface TeamsApiSearchTeamsRequest {
    page?: number;
    perpage?: number;
    name?: string;
    query?: string;
}

export interface TeamsApiSetTeamMembershipsRequest {
    teamId: string;
    body: SetTeamMembershipsCommand;
}

export interface TeamsApiUpdateTeamRequest {
    teamId: string;
    body: UpdateTeamCommand;
}

export interface TeamsApiUpdateTeamMemberRequest {
    teamId: string;
    userId: number;
    body: UpdateTeamMemberCommand;
}

export interface TeamsApiUpdateTeamPreferencesRequest {
    teamId: string;
    body: UpdatePrefsCmd;
}

/**
 * 
 */
export class TeamsApi extends runtime.BaseAPI {

    /**
     * Add Team Member.
     */
    async addTeamMemberRaw(requestParameters: TeamsApiAddTeamMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling addTeamMember().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling addTeamMember().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{team_id}/members`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddTeamMemberCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Add Team Member.
     */
    async addTeamMember(requestParameters: TeamsApiAddTeamMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.addTeamMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add Team.
     */
    async createTeamRaw(requestParameters: TeamsApiCreateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTeam200Response>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTeamCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTeam200ResponseFromJSON(jsonValue));
    }

    /**
     * Add Team.
     */
    async createTeam(requestParameters: TeamsApiCreateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTeam200Response> {
        const response = await this.createTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Team By ID.
     */
    async deleteTeamByIDRaw(requestParameters: TeamsApiDeleteTeamByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling deleteTeamByID().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{team_id}`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Delete Team By ID.
     */
    async deleteTeamByID(requestParameters: TeamsApiDeleteTeamByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.deleteTeamByIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Team By ID.
     */
    async getTeamByIDRaw(requestParameters: TeamsApiGetTeamByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDTO>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling getTeamByID().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{team_id}`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDTOFromJSON(jsonValue));
    }

    /**
     * Get Team By ID.
     */
    async getTeamByID(requestParameters: TeamsApiGetTeamByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDTO> {
        const response = await this.getTeamByIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Team Members.
     */
    async getTeamMembersRaw(requestParameters: TeamsApiGetTeamMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeamMemberDTO>>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling getTeamMembers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{team_id}/members`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamMemberDTOFromJSON));
    }

    /**
     * Get Team Members.
     */
    async getTeamMembers(requestParameters: TeamsApiGetTeamMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeamMemberDTO>> {
        const response = await this.getTeamMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Team Preferences.
     */
    async getTeamPreferencesRaw(requestParameters: TeamsApiGetTeamPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Preferences>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling getTeamPreferences().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{team_id}/preferences`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PreferencesFromJSON(jsonValue));
    }

    /**
     * Get Team Preferences.
     */
    async getTeamPreferences(requestParameters: TeamsApiGetTeamPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Preferences> {
        const response = await this.getTeamPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Member From Team.
     */
    async removeTeamMemberRaw(requestParameters: TeamsApiRemoveTeamMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling removeTeamMember().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling removeTeamMember().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{team_id}/members/{user_id}`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters['teamId']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Remove Member From Team.
     */
    async removeTeamMember(requestParameters: TeamsApiRemoveTeamMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.removeTeamMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Team Search With Paging.
     */
    async searchTeamsRaw(requestParameters: TeamsApiSearchTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTeamQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['perpage'] != null) {
            queryParameters['perpage'] = requestParameters['perpage'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchTeamQueryResultFromJSON(jsonValue));
    }

    /**
     * Team Search With Paging.
     */
    async searchTeams(requestParameters: TeamsApiSearchTeamsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTeamQueryResult> {
        const response = await this.searchTeamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Takes user emails, and updates team members and admins to the provided lists of users. Any current team members and admins not in the provided lists will be removed.
     * Set team memberships.
     */
    async setTeamMembershipsRaw(requestParameters: TeamsApiSetTeamMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling setTeamMemberships().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling setTeamMemberships().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{team_id}/members`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetTeamMembershipsCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Takes user emails, and updates team members and admins to the provided lists of users. Any current team members and admins not in the provided lists will be removed.
     * Set team memberships.
     */
    async setTeamMemberships(requestParameters: TeamsApiSetTeamMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.setTeamMembershipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Team.
     */
    async updateTeamRaw(requestParameters: TeamsApiUpdateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling updateTeam().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{team_id}`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTeamCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Update Team.
     */
    async updateTeam(requestParameters: TeamsApiUpdateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.updateTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Team Member.
     */
    async updateTeamMemberRaw(requestParameters: TeamsApiUpdateTeamMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling updateTeamMember().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateTeamMember().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateTeamMember().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{team_id}/members/{user_id}`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters['teamId']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTeamMemberCommandToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Update Team Member.
     */
    async updateTeamMember(requestParameters: TeamsApiUpdateTeamMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.updateTeamMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Team Preferences.
     */
    async updateTeamPreferencesRaw(requestParameters: TeamsApiUpdateTeamPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling updateTeamPreferences().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateTeamPreferences().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{team_id}/preferences`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePrefsCmdToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Update Team Preferences.
     */
    async updateTeamPreferences(requestParameters: TeamsApiUpdateTeamPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.updateTeamPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
