/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponseBody,
  SuccessResponseBody,
  TeamGroupDTO,
  TeamGroupMapping,
} from '../models/index';
import {
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    SuccessResponseBodyFromJSON,
    SuccessResponseBodyToJSON,
    TeamGroupDTOFromJSON,
    TeamGroupDTOToJSON,
    TeamGroupMappingFromJSON,
    TeamGroupMappingToJSON,
} from '../models/index';

export interface SyncTeamGroupsApiAddTeamGroupApiRequest {
    teamId: number;
    body: TeamGroupMapping;
}

export interface SyncTeamGroupsApiGetTeamGroupsApiRequest {
    teamId: number;
}

export interface SyncTeamGroupsApiRemoveTeamGroupApiQueryRequest {
    teamId: number;
    groupId?: string;
}

/**
 * 
 */
export class SyncTeamGroupsApi extends runtime.BaseAPI {

    /**
     * Add External Group.
     */
    async addTeamGroupApiRaw(requestParameters: SyncTeamGroupsApiAddTeamGroupApiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling addTeamGroupApi().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling addTeamGroupApi().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{teamId}/groups`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeamGroupMappingToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Add External Group.
     */
    async addTeamGroupApi(requestParameters: SyncTeamGroupsApiAddTeamGroupApiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.addTeamGroupApiRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get External Groups.
     */
    async getTeamGroupsApiRaw(requestParameters: SyncTeamGroupsApiGetTeamGroupsApiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeamGroupDTO>>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling getTeamGroupsApi().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{teamId}/groups`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamGroupDTOFromJSON));
    }

    /**
     * Get External Groups.
     */
    async getTeamGroupsApi(requestParameters: SyncTeamGroupsApiGetTeamGroupsApiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeamGroupDTO>> {
        const response = await this.getTeamGroupsApiRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove External Group.
     */
    async removeTeamGroupApiQueryRaw(requestParameters: SyncTeamGroupsApiRemoveTeamGroupApiQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling removeTeamGroupApiQuery().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['groupId'] != null) {
            queryParameters['groupId'] = requestParameters['groupId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{teamId}/groups`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Remove External Group.
     */
    async removeTeamGroupApiQuery(requestParameters: SyncTeamGroupsApiRemoveTeamGroupApiQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.removeTeamGroupApiQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
