/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  AnnotationEvent,
  DashboardFullWithMeta,
  PublicDashboard,
  PublicDashboardDTO,
  PublicDashboardListResponseWithPagination,
  PublicError,
  QueryDataResponse,
  SuccessResponseBody,
} from '../models/index.js';
import {
    AnnotationEventFromJSON,
    AnnotationEventToJSON,
    DashboardFullWithMetaFromJSON,
    DashboardFullWithMetaToJSON,
    PublicDashboardFromJSON,
    PublicDashboardToJSON,
    PublicDashboardDTOFromJSON,
    PublicDashboardDTOToJSON,
    PublicDashboardListResponseWithPaginationFromJSON,
    PublicDashboardListResponseWithPaginationToJSON,
    PublicErrorFromJSON,
    PublicErrorToJSON,
    QueryDataResponseFromJSON,
    QueryDataResponseToJSON,
    SuccessResponseBodyFromJSON,
    SuccessResponseBodyToJSON,
} from '../models/index.js';

export interface DashboardPublicApiCreatePublicDashboardRequest {
    dashboardUid: string;
    body: PublicDashboardDTO;
}

export interface DashboardPublicApiDeletePublicDashboardRequest {
    dashboardUid: string;
    uid: string;
}

export interface DashboardPublicApiGetPublicAnnotationsRequest {
    accessToken: string;
}

export interface DashboardPublicApiGetPublicDashboardRequest {
    dashboardUid: string;
}

export interface DashboardPublicApiQueryPublicDashboardRequest {
    accessToken: string;
    panelId: number;
}

export interface DashboardPublicApiUpdatePublicDashboardRequest {
    dashboardUid: string;
    uid: string;
    body: PublicDashboardDTO;
}

export interface DashboardPublicApiViewPublicDashboardRequest {
    accessToken: string;
}

/**
 * 
 */
export class DashboardPublicApi extends runtime.BaseAPI {

    /**
     * Create public dashboard for a dashboard
     */
    async createPublicDashboardRaw(requestParameters: DashboardPublicApiCreatePublicDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicDashboard>> {
        if (requestParameters['dashboardUid'] == null) {
            throw new runtime.RequiredError(
                'dashboardUid',
                'Required parameter "dashboardUid" was null or undefined when calling createPublicDashboard().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createPublicDashboard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/dashboards/uid/{dashboardUid}/public-dashboards`.replace(`{${"dashboardUid"}}`, encodeURIComponent(String(requestParameters['dashboardUid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicDashboardDTOToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicDashboardFromJSON(jsonValue));
    }

    /**
     * Create public dashboard for a dashboard
     */
    async createPublicDashboard(requestParameters: DashboardPublicApiCreatePublicDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicDashboard> {
        const response = await this.createPublicDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete public dashboard for a dashboard
     */
    async deletePublicDashboardRaw(requestParameters: DashboardPublicApiDeletePublicDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponseBody>> {
        if (requestParameters['dashboardUid'] == null) {
            throw new runtime.RequiredError(
                'dashboardUid',
                'Required parameter "dashboardUid" was null or undefined when calling deletePublicDashboard().'
            );
        }

        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling deletePublicDashboard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/dashboards/uid/{dashboardUid}/public-dashboards/{uid}`.replace(`{${"dashboardUid"}}`, encodeURIComponent(String(requestParameters['dashboardUid']))).replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseBodyFromJSON(jsonValue));
    }

    /**
     * Delete public dashboard for a dashboard
     */
    async deletePublicDashboard(requestParameters: DashboardPublicApiDeletePublicDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponseBody> {
        const response = await this.deletePublicDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get annotations for a public dashboard
     */
    async getPublicAnnotationsRaw(requestParameters: DashboardPublicApiGetPublicAnnotationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AnnotationEvent>>> {
        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling getPublicAnnotations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/public/dashboards/{accessToken}/annotations`.replace(`{${"accessToken"}}`, encodeURIComponent(String(requestParameters['accessToken']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AnnotationEventFromJSON));
    }

    /**
     * Get annotations for a public dashboard
     */
    async getPublicAnnotations(requestParameters: DashboardPublicApiGetPublicAnnotationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AnnotationEvent>> {
        const response = await this.getPublicAnnotationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get public dashboard by dashboardUid
     */
    async getPublicDashboardRaw(requestParameters: DashboardPublicApiGetPublicDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicDashboard>> {
        if (requestParameters['dashboardUid'] == null) {
            throw new runtime.RequiredError(
                'dashboardUid',
                'Required parameter "dashboardUid" was null or undefined when calling getPublicDashboard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/dashboards/uid/{dashboardUid}/public-dashboards`.replace(`{${"dashboardUid"}}`, encodeURIComponent(String(requestParameters['dashboardUid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicDashboardFromJSON(jsonValue));
    }

    /**
     * Get public dashboard by dashboardUid
     */
    async getPublicDashboard(requestParameters: DashboardPublicApiGetPublicDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicDashboard> {
        const response = await this.getPublicDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of public dashboards
     */
    async listPublicDashboardsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicDashboardListResponseWithPagination>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/dashboards/public-dashboards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicDashboardListResponseWithPaginationFromJSON(jsonValue));
    }

    /**
     * Get list of public dashboards
     */
    async listPublicDashboards(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicDashboardListResponseWithPagination> {
        const response = await this.listPublicDashboardsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get results for a given panel on a public dashboard
     */
    async queryPublicDashboardRaw(requestParameters: DashboardPublicApiQueryPublicDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryDataResponse>> {
        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling queryPublicDashboard().'
            );
        }

        if (requestParameters['panelId'] == null) {
            throw new runtime.RequiredError(
                'panelId',
                'Required parameter "panelId" was null or undefined when calling queryPublicDashboard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/public/dashboards/{accessToken}/panels/{panelId}/query`.replace(`{${"accessToken"}}`, encodeURIComponent(String(requestParameters['accessToken']))).replace(`{${"panelId"}}`, encodeURIComponent(String(requestParameters['panelId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryDataResponseFromJSON(jsonValue));
    }

    /**
     * Get results for a given panel on a public dashboard
     */
    async queryPublicDashboard(requestParameters: DashboardPublicApiQueryPublicDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryDataResponse> {
        const response = await this.queryPublicDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update public dashboard for a dashboard
     */
    async updatePublicDashboardRaw(requestParameters: DashboardPublicApiUpdatePublicDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicDashboard>> {
        if (requestParameters['dashboardUid'] == null) {
            throw new runtime.RequiredError(
                'dashboardUid',
                'Required parameter "dashboardUid" was null or undefined when calling updatePublicDashboard().'
            );
        }

        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling updatePublicDashboard().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updatePublicDashboard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/dashboards/uid/{dashboardUid}/public-dashboards/{uid}`.replace(`{${"dashboardUid"}}`, encodeURIComponent(String(requestParameters['dashboardUid']))).replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PublicDashboardDTOToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicDashboardFromJSON(jsonValue));
    }

    /**
     * Update public dashboard for a dashboard
     */
    async updatePublicDashboard(requestParameters: DashboardPublicApiUpdatePublicDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicDashboard> {
        const response = await this.updatePublicDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get public dashboard for view
     */
    async viewPublicDashboardRaw(requestParameters: DashboardPublicApiViewPublicDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DashboardFullWithMeta>> {
        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling viewPublicDashboard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/public/dashboards/{accessToken}`.replace(`{${"accessToken"}}`, encodeURIComponent(String(requestParameters['accessToken']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DashboardFullWithMetaFromJSON(jsonValue));
    }

    /**
     * Get public dashboard for view
     */
    async viewPublicDashboard(requestParameters: DashboardPublicApiViewPublicDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DashboardFullWithMeta> {
        const response = await this.viewPublicDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
