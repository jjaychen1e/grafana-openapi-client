/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  CloudMigrationSessionListResponseDTO,
  CloudMigrationSessionRequestDTO,
  CloudMigrationSessionResponseDTO,
  CreateAccessTokenResponseDTO,
  CreateSnapshotResponseDTO,
  ErrorResponseBody,
  GetAccessTokenResponseDTO,
  GetSnapshotResponseDTO,
  SnapshotListResponseDTO,
} from '../models/index.js';
import {
    CloudMigrationSessionListResponseDTOFromJSON,
    CloudMigrationSessionListResponseDTOToJSON,
    CloudMigrationSessionRequestDTOFromJSON,
    CloudMigrationSessionRequestDTOToJSON,
    CloudMigrationSessionResponseDTOFromJSON,
    CloudMigrationSessionResponseDTOToJSON,
    CreateAccessTokenResponseDTOFromJSON,
    CreateAccessTokenResponseDTOToJSON,
    CreateSnapshotResponseDTOFromJSON,
    CreateSnapshotResponseDTOToJSON,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    GetAccessTokenResponseDTOFromJSON,
    GetAccessTokenResponseDTOToJSON,
    GetSnapshotResponseDTOFromJSON,
    GetSnapshotResponseDTOToJSON,
    SnapshotListResponseDTOFromJSON,
    SnapshotListResponseDTOToJSON,
} from '../models/index.js';

export interface MigrationsApiCancelSnapshotRequest {
    uid: string;
    snapshotUid: string;
}

export interface MigrationsApiCreateSessionRequest {
    body: CloudMigrationSessionRequestDTO;
}

export interface MigrationsApiCreateSnapshotRequest {
    uid: string;
}

export interface MigrationsApiDeleteCloudMigrationTokenRequest {
    uid: string;
}

export interface MigrationsApiDeleteSessionRequest {
    uid: string;
}

export interface MigrationsApiGetSessionRequest {
    uid: string;
}

export interface MigrationsApiGetShapshotListRequest {
    uid: string;
    page?: number;
    limit?: number;
    sort?: string;
}

export interface MigrationsApiGetSnapshotRequest {
    uid: string;
    snapshotUid: string;
    resultPage?: number;
    resultLimit?: number;
}

export interface MigrationsApiUploadSnapshotRequest {
    uid: string;
    snapshotUid: string;
}

/**
 * 
 */
export class MigrationsApi extends runtime.BaseAPI {

    /**
     * TODO: Implement
     * Cancel a snapshot, wherever it is in its processing chain.
     */
    async cancelSnapshotRaw(requestParameters: MigrationsApiCancelSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling cancelSnapshot().'
            );
        }

        if (requestParameters['snapshotUid'] == null) {
            throw new runtime.RequiredError(
                'snapshotUid',
                'Required parameter "snapshotUid" was null or undefined when calling cancelSnapshot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/cloudmigration/migration/{uid}/snapshot/{snapshotUid}/cancel`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))).replace(`{${"snapshotUid"}}`, encodeURIComponent(String(requestParameters['snapshotUid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * TODO: Implement
     * Cancel a snapshot, wherever it is in its processing chain.
     */
    async cancelSnapshot(requestParameters: MigrationsApiCancelSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cancelSnapshotRaw(requestParameters, initOverrides);
    }

    /**
     * Create gcom access token.
     */
    async createCloudMigrationTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAccessTokenResponseDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/cloudmigration/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAccessTokenResponseDTOFromJSON(jsonValue));
    }

    /**
     * Create gcom access token.
     */
    async createCloudMigrationToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAccessTokenResponseDTO> {
        const response = await this.createCloudMigrationTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a migration session.
     */
    async createSessionRaw(requestParameters: MigrationsApiCreateSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CloudMigrationSessionResponseDTO>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/cloudmigration/migration`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloudMigrationSessionRequestDTOToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CloudMigrationSessionResponseDTOFromJSON(jsonValue));
    }

    /**
     * Create a migration session.
     */
    async createSession(requestParameters: MigrationsApiCreateSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CloudMigrationSessionResponseDTO> {
        const response = await this.createSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * If the snapshot initialization is successful, the snapshot uid is returned.
     * Trigger the creation of an instance snapshot associated with the provided session.
     */
    async createSnapshotRaw(requestParameters: MigrationsApiCreateSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSnapshotResponseDTO>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling createSnapshot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/cloudmigration/migration/{uid}/snapshot`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSnapshotResponseDTOFromJSON(jsonValue));
    }

    /**
     * If the snapshot initialization is successful, the snapshot uid is returned.
     * Trigger the creation of an instance snapshot associated with the provided session.
     */
    async createSnapshot(requestParameters: MigrationsApiCreateSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSnapshotResponseDTO> {
        const response = await this.createSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a cloud migration token.
     */
    async deleteCloudMigrationTokenRaw(requestParameters: MigrationsApiDeleteCloudMigrationTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling deleteCloudMigrationToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/cloudmigration/token/{uid}`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a cloud migration token.
     */
    async deleteCloudMigrationToken(requestParameters: MigrationsApiDeleteCloudMigrationTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCloudMigrationTokenRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a migration session by its uid.
     */
    async deleteSessionRaw(requestParameters: MigrationsApiDeleteSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling deleteSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/cloudmigration/migration/{uid}`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a migration session by its uid.
     */
    async deleteSession(requestParameters: MigrationsApiDeleteSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSessionRaw(requestParameters, initOverrides);
    }

    /**
     * Fetch the cloud migration token if it exists.
     */
    async getCloudMigrationTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccessTokenResponseDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/cloudmigration/token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccessTokenResponseDTOFromJSON(jsonValue));
    }

    /**
     * Fetch the cloud migration token if it exists.
     */
    async getCloudMigrationToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccessTokenResponseDTO> {
        const response = await this.getCloudMigrationTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a cloud migration session by its uid.
     */
    async getSessionRaw(requestParameters: MigrationsApiGetSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CloudMigrationSessionResponseDTO>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling getSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/cloudmigration/migration/{uid}`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CloudMigrationSessionResponseDTOFromJSON(jsonValue));
    }

    /**
     * Get a cloud migration session by its uid.
     */
    async getSession(requestParameters: MigrationsApiGetSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CloudMigrationSessionResponseDTO> {
        const response = await this.getSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all cloud migration sessions that have been created.
     */
    async getSessionListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CloudMigrationSessionListResponseDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/cloudmigration/migration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CloudMigrationSessionListResponseDTOFromJSON(jsonValue));
    }

    /**
     * Get a list of all cloud migration sessions that have been created.
     */
    async getSessionList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CloudMigrationSessionListResponseDTO> {
        const response = await this.getSessionListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a list of snapshots for a session.
     */
    async getShapshotListRaw(requestParameters: MigrationsApiGetShapshotListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SnapshotListResponseDTO>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling getShapshotList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/cloudmigration/migration/{uid}/snapshots`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SnapshotListResponseDTOFromJSON(jsonValue));
    }

    /**
     * Get a list of snapshots for a session.
     */
    async getShapshotList(requestParameters: MigrationsApiGetShapshotListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SnapshotListResponseDTO> {
        const response = await this.getShapshotListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get metadata about a snapshot, including where it is in its processing and final results.
     */
    async getSnapshotRaw(requestParameters: MigrationsApiGetSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSnapshotResponseDTO>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling getSnapshot().'
            );
        }

        if (requestParameters['snapshotUid'] == null) {
            throw new runtime.RequiredError(
                'snapshotUid',
                'Required parameter "snapshotUid" was null or undefined when calling getSnapshot().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['resultPage'] != null) {
            queryParameters['resultPage'] = requestParameters['resultPage'];
        }

        if (requestParameters['resultLimit'] != null) {
            queryParameters['resultLimit'] = requestParameters['resultLimit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/cloudmigration/migration/{uid}/snapshot/{snapshotUid}`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))).replace(`{${"snapshotUid"}}`, encodeURIComponent(String(requestParameters['snapshotUid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSnapshotResponseDTOFromJSON(jsonValue));
    }

    /**
     * Get metadata about a snapshot, including where it is in its processing and final results.
     */
    async getSnapshot(requestParameters: MigrationsApiGetSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSnapshotResponseDTO> {
        const response = await this.getSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload a snapshot to the Grafana Migration Service for processing.
     */
    async uploadSnapshotRaw(requestParameters: MigrationsApiUploadSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling uploadSnapshot().'
            );
        }

        if (requestParameters['snapshotUid'] == null) {
            throw new runtime.RequiredError(
                'snapshotUid',
                'Required parameter "snapshotUid" was null or undefined when calling uploadSnapshot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/cloudmigration/migration/{uid}/snapshot/{snapshotUid}/upload`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))).replace(`{${"snapshotUid"}}`, encodeURIComponent(String(requestParameters['snapshotUid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upload a snapshot to the Grafana Migration Service for processing.
     */
    async uploadSnapshot(requestParameters: MigrationsApiUploadSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uploadSnapshotRaw(requestParameters, initOverrides);
    }

}
