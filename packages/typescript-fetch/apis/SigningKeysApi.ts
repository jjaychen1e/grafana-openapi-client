/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponseBody,
  RetrieveJWKS200Response,
} from '../models/index';
import {
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    RetrieveJWKS200ResponseFromJSON,
    RetrieveJWKS200ResponseToJSON,
} from '../models/index';

/**
 * 
 */
export class SigningKeysApi extends runtime.BaseAPI {

    /**
     * Required permissions None
     * Get JSON Web Key Set (JWKS) with all the keys that can be used to verify tokens (public keys)
     */
    async retrieveJWKSRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RetrieveJWKS200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // api_key authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/signing-keys/keys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveJWKS200ResponseFromJSON(jsonValue));
    }

    /**
     * Required permissions None
     * Get JSON Web Key Set (JWKS) with all the keys that can be used to verify tokens (public keys)
     */
    async retrieveJWKS(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RetrieveJWKS200Response> {
        const response = await this.retrieveJWKSRaw(initOverrides);
        return await response.value();
    }

}
