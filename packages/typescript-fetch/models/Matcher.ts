/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * Matcher matcher
 * @export
 * @interface Matcher
 */
export interface Matcher {
    /**
     * is equal
     * @type {boolean}
     * @memberof Matcher
     */
    isEqual?: boolean;
    /**
     * is regex
     * @type {boolean}
     * @memberof Matcher
     */
    isRegex: boolean;
    /**
     * name
     * @type {string}
     * @memberof Matcher
     */
    name: string;
    /**
     * value
     * @type {string}
     * @memberof Matcher
     */
    value: string;
}

/**
 * Check if a given object implements the Matcher interface.
 */
export function instanceOfMatcher(value: object): value is Matcher {
    if (!('isRegex' in value) || value['isRegex'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    return true;
}

export function MatcherFromJSON(json: any): Matcher {
    return MatcherFromJSONTyped(json, false);
}

export function MatcherFromJSONTyped(json: any, ignoreDiscriminator: boolean): Matcher {
    if (json == null) {
        return json;
    }
    return {
        
        'isEqual': json['isEqual'] == null ? undefined : json['isEqual'],
        'isRegex': json['isRegex'],
        'name': json['name'],
        'value': json['value'],
    };
}

export function MatcherToJSON(json: any): Matcher {
    return MatcherToJSONTyped(json, false);
}

export function MatcherToJSONTyped(value?: Matcher | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'isEqual': value['isEqual'],
        'isRegex': value['isRegex'],
        'name': value['name'],
        'value': value['value'],
    };
}

