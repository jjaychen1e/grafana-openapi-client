/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MetricRequest
 */
export interface MetricRequest {
    /**
     * 
     * @type {boolean}
     * @memberof MetricRequest
     */
    debug?: boolean;
    /**
     * From Start time in epoch timestamps in milliseconds or relative using Grafana time units.
     * @type {string}
     * @memberof MetricRequest
     */
    from: string;
    /**
     * queries.refId – Specifies an identifier of the query. Is optional and default to “A”.
     * queries.datasourceId – Specifies the data source to be queried. Each query in the request must have an unique datasourceId.
     * queries.maxDataPoints - Species maximum amount of data points that dashboard panel can render. Is optional and default to 100.
     * queries.intervalMs - Specifies the time interval in milliseconds of time series. Is optional and defaults to 1000.
     * @type {Array<object>}
     * @memberof MetricRequest
     */
    queries: Array<object>;
    /**
     * To End time in epoch timestamps in milliseconds or relative using Grafana time units.
     * @type {string}
     * @memberof MetricRequest
     */
    to: string;
}

/**
 * Check if a given object implements the MetricRequest interface.
 */
export function instanceOfMetricRequest(value: object): value is MetricRequest {
    if (!('from' in value) || value['from'] === undefined) return false;
    if (!('queries' in value) || value['queries'] === undefined) return false;
    if (!('to' in value) || value['to'] === undefined) return false;
    return true;
}

export function MetricRequestFromJSON(json: any): MetricRequest {
    return MetricRequestFromJSONTyped(json, false);
}

export function MetricRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): MetricRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'debug': json['debug'] == null ? undefined : json['debug'],
        'from': json['from'],
        'queries': json['queries'],
        'to': json['to'],
    };
}

export function MetricRequestToJSON(json: any): MetricRequest {
    return MetricRequestToJSONTyped(json, false);
}

export function MetricRequestToJSONTyped(value?: MetricRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'debug': value['debug'],
        'from': value['from'],
        'queries': value['queries'],
        'to': value['to'],
    };
}

