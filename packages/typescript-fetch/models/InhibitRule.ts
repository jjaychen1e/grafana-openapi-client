/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Matcher } from './Matcher';
import {
    MatcherFromJSON,
    MatcherFromJSONTyped,
    MatcherToJSON,
    MatcherToJSONTyped,
} from './Matcher';

/**
 * InhibitRule defines an inhibition rule that mutes alerts that match the
 * target labels if an alert matching the source labels exists.
 * Both alerts have to have a set of labels being equal.
 * @export
 * @interface InhibitRule
 */
export interface InhibitRule {
    /**
     * 
     * @type {Array<string>}
     * @memberof InhibitRule
     */
    equal?: Array<string>;
    /**
     * SourceMatch defines a set of labels that have to equal the given
     * value for source alerts. Deprecated. Remove before v1.0 release.
     * @type {{ [key: string]: string; }}
     * @memberof InhibitRule
     */
    sourceMatch?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof InhibitRule
     */
    sourceMatchRe?: { [key: string]: string; };
    /**
     * Matchers is a slice of Matchers that is sortable, implements Stringer, and
     * provides a Matches method to match a LabelSet against all Matchers in the
     * slice. Note that some users of Matchers might require it to be sorted.
     * @type {Array<Matcher>}
     * @memberof InhibitRule
     */
    sourceMatchers?: Array<Matcher>;
    /**
     * TargetMatch defines a set of labels that have to equal the given
     * value for target alerts. Deprecated. Remove before v1.0 release.
     * @type {{ [key: string]: string; }}
     * @memberof InhibitRule
     */
    targetMatch?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof InhibitRule
     */
    targetMatchRe?: { [key: string]: string; };
    /**
     * Matchers is a slice of Matchers that is sortable, implements Stringer, and
     * provides a Matches method to match a LabelSet against all Matchers in the
     * slice. Note that some users of Matchers might require it to be sorted.
     * @type {Array<Matcher>}
     * @memberof InhibitRule
     */
    targetMatchers?: Array<Matcher>;
}

/**
 * Check if a given object implements the InhibitRule interface.
 */
export function instanceOfInhibitRule(value: object): value is InhibitRule {
    return true;
}

export function InhibitRuleFromJSON(json: any): InhibitRule {
    return InhibitRuleFromJSONTyped(json, false);
}

export function InhibitRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): InhibitRule {
    if (json == null) {
        return json;
    }
    return {
        
        'equal': json['equal'] == null ? undefined : json['equal'],
        'sourceMatch': json['source_match'] == null ? undefined : json['source_match'],
        'sourceMatchRe': json['source_match_re'] == null ? undefined : json['source_match_re'],
        'sourceMatchers': json['source_matchers'] == null ? undefined : ((json['source_matchers'] as Array<any>).map(MatcherFromJSON)),
        'targetMatch': json['target_match'] == null ? undefined : json['target_match'],
        'targetMatchRe': json['target_match_re'] == null ? undefined : json['target_match_re'],
        'targetMatchers': json['target_matchers'] == null ? undefined : ((json['target_matchers'] as Array<any>).map(MatcherFromJSON)),
    };
}

export function InhibitRuleToJSON(json: any): InhibitRule {
    return InhibitRuleToJSONTyped(json, false);
}

export function InhibitRuleToJSONTyped(value?: InhibitRule | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'equal': value['equal'],
        'source_match': value['sourceMatch'],
        'source_match_re': value['sourceMatchRe'],
        'source_matchers': value['sourceMatchers'] == null ? undefined : ((value['sourceMatchers'] as Array<any>).map(MatcherToJSON)),
        'target_match': value['targetMatch'],
        'target_match_re': value['targetMatchRe'],
        'target_matchers': value['targetMatchers'] == null ? undefined : ((value['targetMatchers'] as Array<any>).map(MatcherToJSON)),
    };
}

