/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PlaylistItem } from './PlaylistItem';
import {
    PlaylistItemFromJSON,
    PlaylistItemFromJSONTyped,
    PlaylistItemToJSON,
    PlaylistItemToJSONTyped,
} from './PlaylistItem';

/**
 * 
 * @export
 * @interface UpdatePlaylistCommand
 */
export interface UpdatePlaylistCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdatePlaylistCommand
     */
    interval?: string;
    /**
     * 
     * @type {Array<PlaylistItem>}
     * @memberof UpdatePlaylistCommand
     */
    items?: Array<PlaylistItem>;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlaylistCommand
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlaylistCommand
     */
    uid?: string;
}

/**
 * Check if a given object implements the UpdatePlaylistCommand interface.
 */
export function instanceOfUpdatePlaylistCommand(value: object): value is UpdatePlaylistCommand {
    return true;
}

export function UpdatePlaylistCommandFromJSON(json: any): UpdatePlaylistCommand {
    return UpdatePlaylistCommandFromJSONTyped(json, false);
}

export function UpdatePlaylistCommandFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdatePlaylistCommand {
    if (json == null) {
        return json;
    }
    return {
        
        'interval': json['interval'] == null ? undefined : json['interval'],
        'items': json['items'] == null ? undefined : ((json['items'] as Array<any>).map(PlaylistItemFromJSON)),
        'name': json['name'] == null ? undefined : json['name'],
        'uid': json['uid'] == null ? undefined : json['uid'],
    };
}

export function UpdatePlaylistCommandToJSON(json: any): UpdatePlaylistCommand {
    return UpdatePlaylistCommandToJSONTyped(json, false);
}

export function UpdatePlaylistCommandToJSONTyped(value?: UpdatePlaylistCommand | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'interval': value['interval'],
        'items': value['items'] == null ? undefined : ((value['items'] as Array<any>).map(PlaylistItemToJSON)),
        'name': value['name'],
        'uid': value['uid'],
    };
}

