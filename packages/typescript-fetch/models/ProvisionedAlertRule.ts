/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AlertQuery } from './AlertQuery';
import {
    AlertQueryFromJSON,
    AlertQueryFromJSONTyped,
    AlertQueryToJSON,
    AlertQueryToJSONTyped,
} from './AlertQuery';
import type { AlertRuleNotificationSettings } from './AlertRuleNotificationSettings';
import {
    AlertRuleNotificationSettingsFromJSON,
    AlertRuleNotificationSettingsFromJSONTyped,
    AlertRuleNotificationSettingsToJSON,
    AlertRuleNotificationSettingsToJSONTyped,
} from './AlertRuleNotificationSettings';
import type { Record } from './Record';
import {
    RecordFromJSON,
    RecordFromJSONTyped,
    RecordToJSON,
    RecordToJSONTyped,
} from './Record';

/**
 * 
 * @export
 * @interface ProvisionedAlertRule
 */
export interface ProvisionedAlertRule {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ProvisionedAlertRule
     */
    annotations?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof ProvisionedAlertRule
     */
    condition: string;
    /**
     * 
     * @type {Array<AlertQuery>}
     * @memberof ProvisionedAlertRule
     */
    data: Array<AlertQuery>;
    /**
     * 
     * @type {string}
     * @memberof ProvisionedAlertRule
     */
    execErrState: ProvisionedAlertRuleExecErrStateEnum;
    /**
     * 
     * @type {string}
     * @memberof ProvisionedAlertRule
     */
    folderUID: string;
    /**
     * 
     * @type {string}
     * @memberof ProvisionedAlertRule
     */
    _for: string;
    /**
     * 
     * @type {number}
     * @memberof ProvisionedAlertRule
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ProvisionedAlertRule
     */
    isPaused?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ProvisionedAlertRule
     */
    labels?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof ProvisionedAlertRule
     */
    noDataState: ProvisionedAlertRuleNoDataStateEnum;
    /**
     * 
     * @type {AlertRuleNotificationSettings}
     * @memberof ProvisionedAlertRule
     */
    notificationSettings?: AlertRuleNotificationSettings;
    /**
     * 
     * @type {number}
     * @memberof ProvisionedAlertRule
     */
    orgID: number;
    /**
     * 
     * @type {string}
     * @memberof ProvisionedAlertRule
     */
    provenance?: string;
    /**
     * 
     * @type {Record}
     * @memberof ProvisionedAlertRule
     */
    record?: Record;
    /**
     * 
     * @type {string}
     * @memberof ProvisionedAlertRule
     */
    ruleGroup: string;
    /**
     * 
     * @type {string}
     * @memberof ProvisionedAlertRule
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof ProvisionedAlertRule
     */
    uid?: string;
    /**
     * 
     * @type {Date}
     * @memberof ProvisionedAlertRule
     */
    readonly updated?: Date;
}


/**
 * @export
 */
export const ProvisionedAlertRuleExecErrStateEnum = {
    Ok: 'OK',
    Alerting: 'Alerting',
    Error: 'Error'
} as const;
export type ProvisionedAlertRuleExecErrStateEnum = typeof ProvisionedAlertRuleExecErrStateEnum[keyof typeof ProvisionedAlertRuleExecErrStateEnum];

/**
 * @export
 */
export const ProvisionedAlertRuleNoDataStateEnum = {
    Alerting: 'Alerting',
    NoData: 'NoData',
    Ok: 'OK'
} as const;
export type ProvisionedAlertRuleNoDataStateEnum = typeof ProvisionedAlertRuleNoDataStateEnum[keyof typeof ProvisionedAlertRuleNoDataStateEnum];


/**
 * Check if a given object implements the ProvisionedAlertRule interface.
 */
export function instanceOfProvisionedAlertRule(value: object): value is ProvisionedAlertRule {
    if (!('condition' in value) || value['condition'] === undefined) return false;
    if (!('data' in value) || value['data'] === undefined) return false;
    if (!('execErrState' in value) || value['execErrState'] === undefined) return false;
    if (!('folderUID' in value) || value['folderUID'] === undefined) return false;
    if (!('_for' in value) || value['_for'] === undefined) return false;
    if (!('noDataState' in value) || value['noDataState'] === undefined) return false;
    if (!('orgID' in value) || value['orgID'] === undefined) return false;
    if (!('ruleGroup' in value) || value['ruleGroup'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    return true;
}

export function ProvisionedAlertRuleFromJSON(json: any): ProvisionedAlertRule {
    return ProvisionedAlertRuleFromJSONTyped(json, false);
}

export function ProvisionedAlertRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProvisionedAlertRule {
    if (json == null) {
        return json;
    }
    return {
        
        'annotations': json['annotations'] == null ? undefined : json['annotations'],
        'condition': json['condition'],
        'data': ((json['data'] as Array<any>).map(AlertQueryFromJSON)),
        'execErrState': json['execErrState'],
        'folderUID': json['folderUID'],
        '_for': json['for'],
        'id': json['id'] == null ? undefined : json['id'],
        'isPaused': json['isPaused'] == null ? undefined : json['isPaused'],
        'labels': json['labels'] == null ? undefined : json['labels'],
        'noDataState': json['noDataState'],
        'notificationSettings': json['notification_settings'] == null ? undefined : AlertRuleNotificationSettingsFromJSON(json['notification_settings']),
        'orgID': json['orgID'],
        'provenance': json['provenance'] == null ? undefined : json['provenance'],
        'record': json['record'] == null ? undefined : RecordFromJSON(json['record']),
        'ruleGroup': json['ruleGroup'],
        'title': json['title'],
        'uid': json['uid'] == null ? undefined : json['uid'],
        'updated': json['updated'] == null ? undefined : (new Date(json['updated'])),
    };
}

export function ProvisionedAlertRuleToJSON(json: any): ProvisionedAlertRule {
    return ProvisionedAlertRuleToJSONTyped(json, false);
}

export function ProvisionedAlertRuleToJSONTyped(value?: Omit<ProvisionedAlertRule, 'updated'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'annotations': value['annotations'],
        'condition': value['condition'],
        'data': ((value['data'] as Array<any>).map(AlertQueryToJSON)),
        'execErrState': value['execErrState'],
        'folderUID': value['folderUID'],
        'for': value['_for'],
        'id': value['id'],
        'isPaused': value['isPaused'],
        'labels': value['labels'],
        'noDataState': value['noDataState'],
        'notification_settings': AlertRuleNotificationSettingsToJSON(value['notificationSettings']),
        'orgID': value['orgID'],
        'provenance': value['provenance'],
        'record': RecordToJSON(value['record']),
        'ruleGroup': value['ruleGroup'],
        'title': value['title'],
        'uid': value['uid'],
    };
}

