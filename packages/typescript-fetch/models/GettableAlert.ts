/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { AlertStatus } from './AlertStatus.js';
import {
    AlertStatusFromJSON,
    AlertStatusFromJSONTyped,
    AlertStatusToJSON,
    AlertStatusToJSONTyped,
} from './AlertStatus.js';
import type { Receiver } from './Receiver.js';
import {
    ReceiverFromJSON,
    ReceiverFromJSONTyped,
    ReceiverToJSON,
    ReceiverToJSONTyped,
} from './Receiver.js';

/**
 * GettableAlert gettable alert
 * @export
 * @interface GettableAlert
 */
export interface GettableAlert {
    /**
     * LabelSet label set
     * @type {{ [key: string]: string; }}
     * @memberof GettableAlert
     */
    annotations: { [key: string]: string; };
    /**
     * ends at
     * @type {Date}
     * @memberof GettableAlert
     */
    endsAt: Date;
    /**
     * fingerprint
     * @type {string}
     * @memberof GettableAlert
     */
    fingerprint: string;
    /**
     * generator URL
     * Format: uri
     * @type {string}
     * @memberof GettableAlert
     */
    generatorURL?: string;
    /**
     * LabelSet label set
     * @type {{ [key: string]: string; }}
     * @memberof GettableAlert
     */
    labels: { [key: string]: string; };
    /**
     * receivers
     * @type {Array<Receiver>}
     * @memberof GettableAlert
     */
    receivers: Array<Receiver>;
    /**
     * starts at
     * @type {Date}
     * @memberof GettableAlert
     */
    startsAt: Date;
    /**
     * 
     * @type {AlertStatus}
     * @memberof GettableAlert
     */
    status: AlertStatus;
    /**
     * updated at
     * @type {Date}
     * @memberof GettableAlert
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the GettableAlert interface.
 */
export function instanceOfGettableAlert(value: object): value is GettableAlert {
    if (!('annotations' in value) || value['annotations'] === undefined) return false;
    if (!('endsAt' in value) || value['endsAt'] === undefined) return false;
    if (!('fingerprint' in value) || value['fingerprint'] === undefined) return false;
    if (!('labels' in value) || value['labels'] === undefined) return false;
    if (!('receivers' in value) || value['receivers'] === undefined) return false;
    if (!('startsAt' in value) || value['startsAt'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function GettableAlertFromJSON(json: any): GettableAlert {
    return GettableAlertFromJSONTyped(json, false);
}

export function GettableAlertFromJSONTyped(json: any, ignoreDiscriminator: boolean): GettableAlert {
    if (json == null) {
        return json;
    }
    return {
        
        'annotations': json['annotations'],
        'endsAt': (new Date(json['endsAt'])),
        'fingerprint': json['fingerprint'],
        'generatorURL': json['generatorURL'] == null ? undefined : json['generatorURL'],
        'labels': json['labels'],
        'receivers': ((json['receivers'] as Array<any>).map(ReceiverFromJSON)),
        'startsAt': (new Date(json['startsAt'])),
        'status': AlertStatusFromJSON(json['status']),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function GettableAlertToJSON(json: any): GettableAlert {
    return GettableAlertToJSONTyped(json, false);
}

export function GettableAlertToJSONTyped(value?: GettableAlert | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'annotations': value['annotations'],
        'endsAt': ((value['endsAt']).toISOString()),
        'fingerprint': value['fingerprint'],
        'generatorURL': value['generatorURL'],
        'labels': value['labels'],
        'receivers': ((value['receivers'] as Array<any>).map(ReceiverToJSON)),
        'startsAt': ((value['startsAt']).toISOString()),
        'status': AlertStatusToJSON(value['status']),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

