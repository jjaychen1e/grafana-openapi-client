/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AnnotationQuery } from './AnnotationQuery';
import {
    AnnotationQueryFromJSON,
    AnnotationQueryFromJSONTyped,
    AnnotationQueryToJSON,
    AnnotationQueryToJSONTyped,
} from './AnnotationQuery';

/**
 * 
 * @export
 * @interface AnnotationEvent
 */
export interface AnnotationEvent {
    /**
     * 
     * @type {string}
     * @memberof AnnotationEvent
     */
    color?: string;
    /**
     * 
     * @type {number}
     * @memberof AnnotationEvent
     */
    dashboardId?: number;
    /**
     * 
     * @type {number}
     * @memberof AnnotationEvent
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof AnnotationEvent
     */
    isRegion?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AnnotationEvent
     */
    panelId?: number;
    /**
     * 
     * @type {AnnotationQuery}
     * @memberof AnnotationEvent
     */
    source?: AnnotationQuery;
    /**
     * 
     * @type {Array<string>}
     * @memberof AnnotationEvent
     */
    tags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AnnotationEvent
     */
    text?: string;
    /**
     * 
     * @type {number}
     * @memberof AnnotationEvent
     */
    time?: number;
    /**
     * 
     * @type {number}
     * @memberof AnnotationEvent
     */
    timeEnd?: number;
}

/**
 * Check if a given object implements the AnnotationEvent interface.
 */
export function instanceOfAnnotationEvent(value: object): value is AnnotationEvent {
    return true;
}

export function AnnotationEventFromJSON(json: any): AnnotationEvent {
    return AnnotationEventFromJSONTyped(json, false);
}

export function AnnotationEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnnotationEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'color': json['color'] == null ? undefined : json['color'],
        'dashboardId': json['dashboardId'] == null ? undefined : json['dashboardId'],
        'id': json['id'] == null ? undefined : json['id'],
        'isRegion': json['isRegion'] == null ? undefined : json['isRegion'],
        'panelId': json['panelId'] == null ? undefined : json['panelId'],
        'source': json['source'] == null ? undefined : AnnotationQueryFromJSON(json['source']),
        'tags': json['tags'] == null ? undefined : json['tags'],
        'text': json['text'] == null ? undefined : json['text'],
        'time': json['time'] == null ? undefined : json['time'],
        'timeEnd': json['timeEnd'] == null ? undefined : json['timeEnd'],
    };
}

export function AnnotationEventToJSON(json: any): AnnotationEvent {
    return AnnotationEventToJSONTyped(json, false);
}

export function AnnotationEventToJSONTyped(value?: AnnotationEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'color': value['color'],
        'dashboardId': value['dashboardId'],
        'id': value['id'],
        'isRegion': value['isRegion'],
        'panelId': value['panelId'],
        'source': AnnotationQueryToJSON(value['source']),
        'tags': value['tags'],
        'text': value['text'],
        'time': value['time'],
        'timeEnd': value['timeEnd'],
    };
}

