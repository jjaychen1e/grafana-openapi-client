/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReceiverExport } from './ReceiverExport';
import {
    ReceiverExportFromJSON,
    ReceiverExportFromJSONTyped,
    ReceiverExportToJSON,
    ReceiverExportToJSONTyped,
} from './ReceiverExport';

/**
 * 
 * @export
 * @interface ContactPointExport
 */
export interface ContactPointExport {
    /**
     * 
     * @type {string}
     * @memberof ContactPointExport
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof ContactPointExport
     */
    orgId?: number;
    /**
     * 
     * @type {Array<ReceiverExport>}
     * @memberof ContactPointExport
     */
    receivers?: Array<ReceiverExport>;
}

/**
 * Check if a given object implements the ContactPointExport interface.
 */
export function instanceOfContactPointExport(value: object): value is ContactPointExport {
    return true;
}

export function ContactPointExportFromJSON(json: any): ContactPointExport {
    return ContactPointExportFromJSONTyped(json, false);
}

export function ContactPointExportFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContactPointExport {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'orgId': json['orgId'] == null ? undefined : json['orgId'],
        'receivers': json['receivers'] == null ? undefined : ((json['receivers'] as Array<any>).map(ReceiverExportFromJSON)),
    };
}

export function ContactPointExportToJSON(json: any): ContactPointExport {
    return ContactPointExportToJSONTyped(json, false);
}

export function ContactPointExportToJSONTyped(value?: ContactPointExport | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'orgId': value['orgId'],
        'receivers': value['receivers'] == null ? undefined : ((value['receivers'] as Array<any>).map(ReceiverExportToJSON)),
    };
}

