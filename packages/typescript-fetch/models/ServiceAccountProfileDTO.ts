/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ServiceAccountProfileDTO
 */
export interface ServiceAccountProfileDTO {
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof ServiceAccountProfileDTO
     */
    accessControl?: { [key: string]: boolean; };
    /**
     * 
     * @type {string}
     * @memberof ServiceAccountProfileDTO
     */
    avatarUrl?: string;
    /**
     * 
     * @type {Date}
     * @memberof ServiceAccountProfileDTO
     */
    createdAt?: Date;
    /**
     * 
     * @type {number}
     * @memberof ServiceAccountProfileDTO
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceAccountProfileDTO
     */
    isDisabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceAccountProfileDTO
     */
    isExternal?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccountProfileDTO
     */
    login?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccountProfileDTO
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof ServiceAccountProfileDTO
     */
    orgId?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccountProfileDTO
     */
    requiredBy?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccountProfileDTO
     */
    role?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceAccountProfileDTO
     */
    teams?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ServiceAccountProfileDTO
     */
    tokens?: number;
    /**
     * 
     * @type {Date}
     * @memberof ServiceAccountProfileDTO
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the ServiceAccountProfileDTO interface.
 */
export function instanceOfServiceAccountProfileDTO(value: object): value is ServiceAccountProfileDTO {
    return true;
}

export function ServiceAccountProfileDTOFromJSON(json: any): ServiceAccountProfileDTO {
    return ServiceAccountProfileDTOFromJSONTyped(json, false);
}

export function ServiceAccountProfileDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServiceAccountProfileDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'accessControl': json['accessControl'] == null ? undefined : json['accessControl'],
        'avatarUrl': json['avatarUrl'] == null ? undefined : json['avatarUrl'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'id': json['id'] == null ? undefined : json['id'],
        'isDisabled': json['isDisabled'] == null ? undefined : json['isDisabled'],
        'isExternal': json['isExternal'] == null ? undefined : json['isExternal'],
        'login': json['login'] == null ? undefined : json['login'],
        'name': json['name'] == null ? undefined : json['name'],
        'orgId': json['orgId'] == null ? undefined : json['orgId'],
        'requiredBy': json['requiredBy'] == null ? undefined : json['requiredBy'],
        'role': json['role'] == null ? undefined : json['role'],
        'teams': json['teams'] == null ? undefined : json['teams'],
        'tokens': json['tokens'] == null ? undefined : json['tokens'],
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
    };
}

export function ServiceAccountProfileDTOToJSON(json: any): ServiceAccountProfileDTO {
    return ServiceAccountProfileDTOToJSONTyped(json, false);
}

export function ServiceAccountProfileDTOToJSONTyped(value?: ServiceAccountProfileDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'accessControl': value['accessControl'],
        'avatarUrl': value['avatarUrl'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'id': value['id'],
        'isDisabled': value['isDisabled'],
        'isExternal': value['isExternal'],
        'login': value['login'],
        'name': value['name'],
        'orgId': value['orgId'],
        'requiredBy': value['requiredBy'],
        'role': value['role'],
        'teams': value['teams'],
        'tokens': value['tokens'],
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

