/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { AlertingRule } from './AlertingRule.js';
import {
    AlertingRuleFromJSON,
    AlertingRuleFromJSONTyped,
    AlertingRuleToJSON,
    AlertingRuleToJSONTyped,
} from './AlertingRule.js';

/**
 * 
 * @export
 * @interface RuleGroup
 */
export interface RuleGroup {
    /**
     * 
     * @type {number}
     * @memberof RuleGroup
     */
    evaluationTime?: number;
    /**
     * 
     * @type {string}
     * @memberof RuleGroup
     */
    file: string;
    /**
     * 
     * @type {number}
     * @memberof RuleGroup
     */
    interval: number;
    /**
     * 
     * @type {Date}
     * @memberof RuleGroup
     */
    lastEvaluation?: Date;
    /**
     * 
     * @type {string}
     * @memberof RuleGroup
     */
    name: string;
    /**
     * In order to preserve rule ordering, while exposing type (alerting or recording)
     * specific properties, both alerting and recording rules are exposed in the
     * same array.
     * @type {Array<AlertingRule>}
     * @memberof RuleGroup
     */
    rules: Array<AlertingRule>;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof RuleGroup
     */
    totals?: { [key: string]: number; };
}

/**
 * Check if a given object implements the RuleGroup interface.
 */
export function instanceOfRuleGroup(value: object): value is RuleGroup {
    if (!('file' in value) || value['file'] === undefined) return false;
    if (!('interval' in value) || value['interval'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('rules' in value) || value['rules'] === undefined) return false;
    return true;
}

export function RuleGroupFromJSON(json: any): RuleGroup {
    return RuleGroupFromJSONTyped(json, false);
}

export function RuleGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): RuleGroup {
    if (json == null) {
        return json;
    }
    return {
        
        'evaluationTime': json['evaluationTime'] == null ? undefined : json['evaluationTime'],
        'file': json['file'],
        'interval': json['interval'],
        'lastEvaluation': json['lastEvaluation'] == null ? undefined : (new Date(json['lastEvaluation'])),
        'name': json['name'],
        'rules': ((json['rules'] as Array<any>).map(AlertingRuleFromJSON)),
        'totals': json['totals'] == null ? undefined : json['totals'],
    };
}

export function RuleGroupToJSON(json: any): RuleGroup {
    return RuleGroupToJSONTyped(json, false);
}

export function RuleGroupToJSONTyped(value?: RuleGroup | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'evaluationTime': value['evaluationTime'],
        'file': value['file'],
        'interval': value['interval'],
        'lastEvaluation': value['lastEvaluation'] == null ? undefined : ((value['lastEvaluation']).toISOString()),
        'name': value['name'],
        'rules': ((value['rules'] as Array<any>).map(AlertingRuleToJSON)),
        'totals': value['totals'],
    };
}

