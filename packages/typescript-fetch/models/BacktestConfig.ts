/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AlertQuery } from './AlertQuery';
import {
    AlertQueryFromJSON,
    AlertQueryFromJSONTyped,
    AlertQueryToJSON,
    AlertQueryToJSONTyped,
} from './AlertQuery';

/**
 * 
 * @export
 * @interface BacktestConfig
 */
export interface BacktestConfig {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof BacktestConfig
     */
    annotations?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof BacktestConfig
     */
    condition?: string;
    /**
     * 
     * @type {Array<AlertQuery>}
     * @memberof BacktestConfig
     */
    data?: Array<AlertQuery>;
    /**
     * A Duration represents the elapsed time between two instants
     * as an int64 nanosecond count. The representation limits the
     * largest representable duration to approximately 290 years.
     * @type {number}
     * @memberof BacktestConfig
     */
    _for?: number;
    /**
     * 
     * @type {Date}
     * @memberof BacktestConfig
     */
    from?: Date;
    /**
     * A Duration represents the elapsed time between two instants
     * as an int64 nanosecond count. The representation limits the
     * largest representable duration to approximately 290 years.
     * @type {number}
     * @memberof BacktestConfig
     */
    interval?: number;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof BacktestConfig
     */
    labels?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof BacktestConfig
     */
    noDataState?: BacktestConfigNoDataStateEnum;
    /**
     * 
     * @type {string}
     * @memberof BacktestConfig
     */
    title?: string;
    /**
     * 
     * @type {Date}
     * @memberof BacktestConfig
     */
    to?: Date;
}


/**
 * @export
 */
export const BacktestConfigNoDataStateEnum = {
    Alerting: 'Alerting',
    NoData: 'NoData',
    Ok: 'OK'
} as const;
export type BacktestConfigNoDataStateEnum = typeof BacktestConfigNoDataStateEnum[keyof typeof BacktestConfigNoDataStateEnum];


/**
 * Check if a given object implements the BacktestConfig interface.
 */
export function instanceOfBacktestConfig(value: object): value is BacktestConfig {
    return true;
}

export function BacktestConfigFromJSON(json: any): BacktestConfig {
    return BacktestConfigFromJSONTyped(json, false);
}

export function BacktestConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): BacktestConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'annotations': json['annotations'] == null ? undefined : json['annotations'],
        'condition': json['condition'] == null ? undefined : json['condition'],
        'data': json['data'] == null ? undefined : ((json['data'] as Array<any>).map(AlertQueryFromJSON)),
        '_for': json['for'] == null ? undefined : json['for'],
        'from': json['from'] == null ? undefined : (new Date(json['from'])),
        'interval': json['interval'] == null ? undefined : json['interval'],
        'labels': json['labels'] == null ? undefined : json['labels'],
        'noDataState': json['no_data_state'] == null ? undefined : json['no_data_state'],
        'title': json['title'] == null ? undefined : json['title'],
        'to': json['to'] == null ? undefined : (new Date(json['to'])),
    };
}

export function BacktestConfigToJSON(json: any): BacktestConfig {
    return BacktestConfigToJSONTyped(json, false);
}

export function BacktestConfigToJSONTyped(value?: BacktestConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'annotations': value['annotations'],
        'condition': value['condition'],
        'data': value['data'] == null ? undefined : ((value['data'] as Array<any>).map(AlertQueryToJSON)),
        'for': value['_for'],
        'from': value['from'] == null ? undefined : ((value['from']).toISOString()),
        'interval': value['interval'],
        'labels': value['labels'],
        'no_data_state': value['noDataState'],
        'title': value['title'],
        'to': value['to'] == null ? undefined : ((value['to']).toISOString()),
    };
}

