/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { VersionInfo } from './VersionInfo.js';
import {
    VersionInfoFromJSON,
    VersionInfoFromJSONTyped,
    VersionInfoToJSON,
    VersionInfoToJSONTyped,
} from './VersionInfo.js';
import type { PostableApiAlertingConfig } from './PostableApiAlertingConfig.js';
import {
    PostableApiAlertingConfigFromJSON,
    PostableApiAlertingConfigFromJSONTyped,
    PostableApiAlertingConfigToJSON,
    PostableApiAlertingConfigToJSONTyped,
} from './PostableApiAlertingConfig.js';
import type { ClusterStatus } from './ClusterStatus.js';
import {
    ClusterStatusFromJSON,
    ClusterStatusFromJSONTyped,
    ClusterStatusToJSON,
    ClusterStatusToJSONTyped,
} from './ClusterStatus.js';

/**
 * 
 * @export
 * @interface GettableStatus
 */
export interface GettableStatus {
    /**
     * 
     * @type {ClusterStatus}
     * @memberof GettableStatus
     */
    cluster: ClusterStatus;
    /**
     * 
     * @type {PostableApiAlertingConfig}
     * @memberof GettableStatus
     */
    config: PostableApiAlertingConfig;
    /**
     * uptime
     * @type {Date}
     * @memberof GettableStatus
     */
    uptime: Date;
    /**
     * 
     * @type {VersionInfo}
     * @memberof GettableStatus
     */
    versionInfo: VersionInfo;
}

/**
 * Check if a given object implements the GettableStatus interface.
 */
export function instanceOfGettableStatus(value: object): value is GettableStatus {
    if (!('cluster' in value) || value['cluster'] === undefined) return false;
    if (!('config' in value) || value['config'] === undefined) return false;
    if (!('uptime' in value) || value['uptime'] === undefined) return false;
    if (!('versionInfo' in value) || value['versionInfo'] === undefined) return false;
    return true;
}

export function GettableStatusFromJSON(json: any): GettableStatus {
    return GettableStatusFromJSONTyped(json, false);
}

export function GettableStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): GettableStatus {
    if (json == null) {
        return json;
    }
    return {
        
        'cluster': ClusterStatusFromJSON(json['cluster']),
        'config': PostableApiAlertingConfigFromJSON(json['config']),
        'uptime': (new Date(json['uptime'])),
        'versionInfo': VersionInfoFromJSON(json['versionInfo']),
    };
}

export function GettableStatusToJSON(json: any): GettableStatus {
    return GettableStatusToJSONTyped(json, false);
}

export function GettableStatusToJSONTyped(value?: GettableStatus | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'cluster': ClusterStatusToJSON(value['cluster']),
        'config': PostableApiAlertingConfigToJSON(value['config']),
        'uptime': ((value['uptime']).toISOString()),
        'versionInfo': VersionInfoToJSON(value['versionInfo']),
    };
}

