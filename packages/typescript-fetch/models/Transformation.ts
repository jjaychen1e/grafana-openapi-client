/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface Transformation
 */
export interface Transformation {
    /**
     * 
     * @type {string}
     * @memberof Transformation
     */
    expression?: string;
    /**
     * 
     * @type {string}
     * @memberof Transformation
     */
    field?: string;
    /**
     * 
     * @type {string}
     * @memberof Transformation
     */
    mapValue?: string;
    /**
     * 
     * @type {string}
     * @memberof Transformation
     */
    type?: TransformationTypeEnum;
}


/**
 * @export
 */
export const TransformationTypeEnum = {
    Regex: 'regex',
    Logfmt: 'logfmt'
} as const;
export type TransformationTypeEnum = typeof TransformationTypeEnum[keyof typeof TransformationTypeEnum];


/**
 * Check if a given object implements the Transformation interface.
 */
export function instanceOfTransformation(value: object): value is Transformation {
    return true;
}

export function TransformationFromJSON(json: any): Transformation {
    return TransformationFromJSONTyped(json, false);
}

export function TransformationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Transformation {
    if (json == null) {
        return json;
    }
    return {
        
        'expression': json['expression'] == null ? undefined : json['expression'],
        'field': json['field'] == null ? undefined : json['field'],
        'mapValue': json['mapValue'] == null ? undefined : json['mapValue'],
        'type': json['type'] == null ? undefined : json['type'],
    };
}

export function TransformationToJSON(json: any): Transformation {
    return TransformationToJSONTyped(json, false);
}

export function TransformationToJSONTyped(value?: Transformation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'expression': value['expression'],
        'field': value['field'],
        'mapValue': value['mapValue'],
        'type': value['type'],
    };
}

