/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * VersionInfo version info
 * @export
 * @interface VersionInfo
 */
export interface VersionInfo {
    /**
     * branch
     * @type {string}
     * @memberof VersionInfo
     */
    branch: string;
    /**
     * build date
     * @type {string}
     * @memberof VersionInfo
     */
    buildDate: string;
    /**
     * build user
     * @type {string}
     * @memberof VersionInfo
     */
    buildUser: string;
    /**
     * go version
     * @type {string}
     * @memberof VersionInfo
     */
    goVersion: string;
    /**
     * revision
     * @type {string}
     * @memberof VersionInfo
     */
    revision: string;
    /**
     * version
     * @type {string}
     * @memberof VersionInfo
     */
    version: string;
}

/**
 * Check if a given object implements the VersionInfo interface.
 */
export function instanceOfVersionInfo(value: object): value is VersionInfo {
    if (!('branch' in value) || value['branch'] === undefined) return false;
    if (!('buildDate' in value) || value['buildDate'] === undefined) return false;
    if (!('buildUser' in value) || value['buildUser'] === undefined) return false;
    if (!('goVersion' in value) || value['goVersion'] === undefined) return false;
    if (!('revision' in value) || value['revision'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    return true;
}

export function VersionInfoFromJSON(json: any): VersionInfo {
    return VersionInfoFromJSONTyped(json, false);
}

export function VersionInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): VersionInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'branch': json['branch'],
        'buildDate': json['buildDate'],
        'buildUser': json['buildUser'],
        'goVersion': json['goVersion'],
        'revision': json['revision'],
        'version': json['version'],
    };
}

export function VersionInfoToJSON(json: any): VersionInfo {
    return VersionInfoToJSONTyped(json, false);
}

export function VersionInfoToJSONTyped(value?: VersionInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'branch': value['branch'],
        'buildDate': value['buildDate'],
        'buildUser': value['buildUser'],
        'goVersion': value['goVersion'],
        'revision': value['revision'],
        'version': value['version'],
    };
}

