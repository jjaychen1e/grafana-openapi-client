/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Annotation
 */
export interface Annotation {
    /**
     * 
     * @type {number}
     * @memberof Annotation
     */
    alertId?: number;
    /**
     * 
     * @type {string}
     * @memberof Annotation
     */
    alertName?: string;
    /**
     * 
     * @type {string}
     * @memberof Annotation
     */
    avatarUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof Annotation
     */
    created?: number;
    /**
     * 
     * @type {number}
     * @memberof Annotation
     */
    dashboardId?: number;
    /**
     * 
     * @type {string}
     * @memberof Annotation
     */
    dashboardUID?: string;
    /**
     * 
     * @type {object}
     * @memberof Annotation
     */
    data?: object;
    /**
     * 
     * @type {string}
     * @memberof Annotation
     */
    email?: string;
    /**
     * 
     * @type {number}
     * @memberof Annotation
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Annotation
     */
    login?: string;
    /**
     * 
     * @type {string}
     * @memberof Annotation
     */
    newState?: string;
    /**
     * 
     * @type {number}
     * @memberof Annotation
     */
    panelId?: number;
    /**
     * 
     * @type {string}
     * @memberof Annotation
     */
    prevState?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Annotation
     */
    tags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Annotation
     */
    text?: string;
    /**
     * 
     * @type {number}
     * @memberof Annotation
     */
    time?: number;
    /**
     * 
     * @type {number}
     * @memberof Annotation
     */
    timeEnd?: number;
    /**
     * 
     * @type {number}
     * @memberof Annotation
     */
    updated?: number;
    /**
     * 
     * @type {number}
     * @memberof Annotation
     */
    userId?: number;
}

/**
 * Check if a given object implements the Annotation interface.
 */
export function instanceOfAnnotation(value: object): value is Annotation {
    return true;
}

export function AnnotationFromJSON(json: any): Annotation {
    return AnnotationFromJSONTyped(json, false);
}

export function AnnotationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Annotation {
    if (json == null) {
        return json;
    }
    return {
        
        'alertId': json['alertId'] == null ? undefined : json['alertId'],
        'alertName': json['alertName'] == null ? undefined : json['alertName'],
        'avatarUrl': json['avatarUrl'] == null ? undefined : json['avatarUrl'],
        'created': json['created'] == null ? undefined : json['created'],
        'dashboardId': json['dashboardId'] == null ? undefined : json['dashboardId'],
        'dashboardUID': json['dashboardUID'] == null ? undefined : json['dashboardUID'],
        'data': json['data'] == null ? undefined : json['data'],
        'email': json['email'] == null ? undefined : json['email'],
        'id': json['id'] == null ? undefined : json['id'],
        'login': json['login'] == null ? undefined : json['login'],
        'newState': json['newState'] == null ? undefined : json['newState'],
        'panelId': json['panelId'] == null ? undefined : json['panelId'],
        'prevState': json['prevState'] == null ? undefined : json['prevState'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'text': json['text'] == null ? undefined : json['text'],
        'time': json['time'] == null ? undefined : json['time'],
        'timeEnd': json['timeEnd'] == null ? undefined : json['timeEnd'],
        'updated': json['updated'] == null ? undefined : json['updated'],
        'userId': json['userId'] == null ? undefined : json['userId'],
    };
}

export function AnnotationToJSON(json: any): Annotation {
    return AnnotationToJSONTyped(json, false);
}

export function AnnotationToJSONTyped(value?: Annotation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'alertId': value['alertId'],
        'alertName': value['alertName'],
        'avatarUrl': value['avatarUrl'],
        'created': value['created'],
        'dashboardId': value['dashboardId'],
        'dashboardUID': value['dashboardUID'],
        'data': value['data'],
        'email': value['email'],
        'id': value['id'],
        'login': value['login'],
        'newState': value['newState'],
        'panelId': value['panelId'],
        'prevState': value['prevState'],
        'tags': value['tags'],
        'text': value['text'],
        'time': value['time'],
        'timeEnd': value['timeEnd'],
        'updated': value['updated'],
        'userId': value['userId'],
    };
}

