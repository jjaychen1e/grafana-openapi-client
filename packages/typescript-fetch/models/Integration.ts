/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Integration integration
 * @export
 * @interface Integration
 */
export interface Integration {
    /**
     * A timestamp indicating the last attempt to deliver a notification regardless of the outcome.
     * Format: date-time
     * @type {Date}
     * @memberof Integration
     */
    lastNotifyAttempt?: Date;
    /**
     * Duration of the last attempt to deliver a notification in humanized format (`1s` or `15ms`, etc).
     * @type {string}
     * @memberof Integration
     */
    lastNotifyAttemptDuration?: string;
    /**
     * Error string for the last attempt to deliver a notification. Empty if the last attempt was successful.
     * @type {string}
     * @memberof Integration
     */
    lastNotifyAttemptError?: string;
    /**
     * name
     * @type {string}
     * @memberof Integration
     */
    name: string;
    /**
     * send resolved
     * @type {boolean}
     * @memberof Integration
     */
    sendResolved: boolean;
}

/**
 * Check if a given object implements the Integration interface.
 */
export function instanceOfIntegration(value: object): value is Integration {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('sendResolved' in value) || value['sendResolved'] === undefined) return false;
    return true;
}

export function IntegrationFromJSON(json: any): Integration {
    return IntegrationFromJSONTyped(json, false);
}

export function IntegrationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Integration {
    if (json == null) {
        return json;
    }
    return {
        
        'lastNotifyAttempt': json['lastNotifyAttempt'] == null ? undefined : (new Date(json['lastNotifyAttempt'])),
        'lastNotifyAttemptDuration': json['lastNotifyAttemptDuration'] == null ? undefined : json['lastNotifyAttemptDuration'],
        'lastNotifyAttemptError': json['lastNotifyAttemptError'] == null ? undefined : json['lastNotifyAttemptError'],
        'name': json['name'],
        'sendResolved': json['sendResolved'],
    };
}

export function IntegrationToJSON(json: any): Integration {
    return IntegrationToJSONTyped(json, false);
}

export function IntegrationToJSONTyped(value?: Integration | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'lastNotifyAttempt': value['lastNotifyAttempt'] == null ? undefined : ((value['lastNotifyAttempt']).toISOString()),
        'lastNotifyAttemptDuration': value['lastNotifyAttemptDuration'],
        'lastNotifyAttemptError': value['lastNotifyAttemptError'],
        'name': value['name'],
        'sendResolved': value['sendResolved'],
    };
}

