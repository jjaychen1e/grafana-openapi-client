/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Matcher } from './Matcher';
import {
    MatcherFromJSON,
    MatcherFromJSONTyped,
    MatcherToJSON,
    MatcherToJSONTyped,
} from './Matcher';
import type { RouteExport } from './RouteExport';
import {
    RouteExportFromJSON,
    RouteExportFromJSONTyped,
    RouteExportToJSON,
    RouteExportToJSONTyped,
} from './RouteExport';

/**
 * 
 * @export
 * @interface NotificationPolicyExport
 */
export interface NotificationPolicyExport {
    /**
     * 
     * @type {boolean}
     * @memberof NotificationPolicyExport
     */
    _continue?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof NotificationPolicyExport
     */
    groupBy?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof NotificationPolicyExport
     */
    groupInterval?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationPolicyExport
     */
    groupWait?: string;
    /**
     * Deprecated. Remove before v1.0 release.
     * @type {{ [key: string]: string; }}
     * @memberof NotificationPolicyExport
     */
    match?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof NotificationPolicyExport
     */
    matchRe?: { [key: string]: string; };
    /**
     * Matchers is a slice of Matchers that is sortable, implements Stringer, and
     * provides a Matches method to match a LabelSet against all Matchers in the
     * slice. Note that some users of Matchers might require it to be sorted.
     * @type {Array<Matcher>}
     * @memberof NotificationPolicyExport
     */
    matchers?: Array<Matcher>;
    /**
     * 
     * @type {Array<string>}
     * @memberof NotificationPolicyExport
     */
    muteTimeIntervals?: Array<string>;
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof NotificationPolicyExport
     */
    objectMatchers?: Array<Array<string>>;
    /**
     * 
     * @type {number}
     * @memberof NotificationPolicyExport
     */
    orgId?: number;
    /**
     * 
     * @type {string}
     * @memberof NotificationPolicyExport
     */
    receiver?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationPolicyExport
     */
    repeatInterval?: string;
    /**
     * 
     * @type {Array<RouteExport>}
     * @memberof NotificationPolicyExport
     */
    routes?: Array<RouteExport>;
}

/**
 * Check if a given object implements the NotificationPolicyExport interface.
 */
export function instanceOfNotificationPolicyExport(value: object): value is NotificationPolicyExport {
    return true;
}

export function NotificationPolicyExportFromJSON(json: any): NotificationPolicyExport {
    return NotificationPolicyExportFromJSONTyped(json, false);
}

export function NotificationPolicyExportFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotificationPolicyExport {
    if (json == null) {
        return json;
    }
    return {
        
        '_continue': json['continue'] == null ? undefined : json['continue'],
        'groupBy': json['group_by'] == null ? undefined : json['group_by'],
        'groupInterval': json['group_interval'] == null ? undefined : json['group_interval'],
        'groupWait': json['group_wait'] == null ? undefined : json['group_wait'],
        'match': json['match'] == null ? undefined : json['match'],
        'matchRe': json['match_re'] == null ? undefined : json['match_re'],
        'matchers': json['matchers'] == null ? undefined : ((json['matchers'] as Array<any>).map(MatcherFromJSON)),
        'muteTimeIntervals': json['mute_time_intervals'] == null ? undefined : json['mute_time_intervals'],
        'objectMatchers': json['object_matchers'] == null ? undefined : json['object_matchers'],
        'orgId': json['orgId'] == null ? undefined : json['orgId'],
        'receiver': json['receiver'] == null ? undefined : json['receiver'],
        'repeatInterval': json['repeat_interval'] == null ? undefined : json['repeat_interval'],
        'routes': json['routes'] == null ? undefined : ((json['routes'] as Array<any>).map(RouteExportFromJSON)),
    };
}

export function NotificationPolicyExportToJSON(json: any): NotificationPolicyExport {
    return NotificationPolicyExportToJSONTyped(json, false);
}

export function NotificationPolicyExportToJSONTyped(value?: NotificationPolicyExport | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'continue': value['_continue'],
        'group_by': value['groupBy'],
        'group_interval': value['groupInterval'],
        'group_wait': value['groupWait'],
        'match': value['match'],
        'match_re': value['matchRe'],
        'matchers': value['matchers'] == null ? undefined : ((value['matchers'] as Array<any>).map(MatcherToJSON)),
        'mute_time_intervals': value['muteTimeIntervals'],
        'object_matchers': value['objectMatchers'],
        'orgId': value['orgId'],
        'receiver': value['receiver'],
        'repeat_interval': value['repeatInterval'],
        'routes': value['routes'] == null ? undefined : ((value['routes'] as Array<any>).map(RouteExportToJSON)),
    };
}

