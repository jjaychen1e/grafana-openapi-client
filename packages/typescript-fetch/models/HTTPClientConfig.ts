/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Authorization } from './Authorization';
import {
    AuthorizationFromJSON,
    AuthorizationFromJSONTyped,
    AuthorizationToJSON,
    AuthorizationToJSONTyped,
} from './Authorization';
import type { OAuth2 } from './OAuth2';
import {
    OAuth2FromJSON,
    OAuth2FromJSONTyped,
    OAuth2ToJSON,
    OAuth2ToJSONTyped,
} from './OAuth2';
import type { BasicAuth } from './BasicAuth';
import {
    BasicAuthFromJSON,
    BasicAuthFromJSONTyped,
    BasicAuthToJSON,
    BasicAuthToJSONTyped,
} from './BasicAuth';
import type { TLSConfig } from './TLSConfig';
import {
    TLSConfigFromJSON,
    TLSConfigFromJSONTyped,
    TLSConfigToJSON,
    TLSConfigToJSONTyped,
} from './TLSConfig';
import type { URL } from './URL';
import {
    URLFromJSON,
    URLFromJSONTyped,
    URLToJSON,
    URLToJSONTyped,
} from './URL';

/**
 * 
 * @export
 * @interface HTTPClientConfig
 */
export interface HTTPClientConfig {
    /**
     * 
     * @type {Authorization}
     * @memberof HTTPClientConfig
     */
    authorization?: Authorization;
    /**
     * 
     * @type {BasicAuth}
     * @memberof HTTPClientConfig
     */
    basicAuth?: BasicAuth;
    /**
     * 
     * @type {string}
     * @memberof HTTPClientConfig
     */
    bearerToken?: string;
    /**
     * The bearer token file for the targets. Deprecated in favour of
     * Authorization.CredentialsFile.
     * @type {string}
     * @memberof HTTPClientConfig
     */
    bearerTokenFile?: string;
    /**
     * EnableHTTP2 specifies whether the client should configure HTTP2.
     * The omitempty flag is not set, because it would be hidden from the
     * marshalled configuration when set to false.
     * @type {boolean}
     * @memberof HTTPClientConfig
     */
    enableHttp2?: boolean;
    /**
     * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
     * The omitempty flag is not set, because it would be hidden from the
     * marshalled configuration when set to false.
     * @type {boolean}
     * @memberof HTTPClientConfig
     */
    followRedirects?: boolean;
    /**
     * NoProxy contains addresses that should not use a proxy.
     * @type {string}
     * @memberof HTTPClientConfig
     */
    noProxy?: string;
    /**
     * 
     * @type {OAuth2}
     * @memberof HTTPClientConfig
     */
    oauth2?: OAuth2;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof HTTPClientConfig
     */
    proxyConnectHeader?: { [key: string]: Array<string>; };
    /**
     * ProxyFromEnvironment makes use of net/http ProxyFromEnvironment function
     * to determine proxies.
     * @type {boolean}
     * @memberof HTTPClientConfig
     */
    proxyFromEnvironment?: boolean;
    /**
     * 
     * @type {URL}
     * @memberof HTTPClientConfig
     */
    proxyUrl?: URL;
    /**
     * 
     * @type {TLSConfig}
     * @memberof HTTPClientConfig
     */
    tlsConfig?: TLSConfig;
}

/**
 * Check if a given object implements the HTTPClientConfig interface.
 */
export function instanceOfHTTPClientConfig(value: object): value is HTTPClientConfig {
    return true;
}

export function HTTPClientConfigFromJSON(json: any): HTTPClientConfig {
    return HTTPClientConfigFromJSONTyped(json, false);
}

export function HTTPClientConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): HTTPClientConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'authorization': json['authorization'] == null ? undefined : AuthorizationFromJSON(json['authorization']),
        'basicAuth': json['basic_auth'] == null ? undefined : BasicAuthFromJSON(json['basic_auth']),
        'bearerToken': json['bearer_token'] == null ? undefined : json['bearer_token'],
        'bearerTokenFile': json['bearer_token_file'] == null ? undefined : json['bearer_token_file'],
        'enableHttp2': json['enable_http2'] == null ? undefined : json['enable_http2'],
        'followRedirects': json['follow_redirects'] == null ? undefined : json['follow_redirects'],
        'noProxy': json['no_proxy'] == null ? undefined : json['no_proxy'],
        'oauth2': json['oauth2'] == null ? undefined : OAuth2FromJSON(json['oauth2']),
        'proxyConnectHeader': json['proxy_connect_header'] == null ? undefined : json['proxy_connect_header'],
        'proxyFromEnvironment': json['proxy_from_environment'] == null ? undefined : json['proxy_from_environment'],
        'proxyUrl': json['proxy_url'] == null ? undefined : URLFromJSON(json['proxy_url']),
        'tlsConfig': json['tls_config'] == null ? undefined : TLSConfigFromJSON(json['tls_config']),
    };
}

export function HTTPClientConfigToJSON(json: any): HTTPClientConfig {
    return HTTPClientConfigToJSONTyped(json, false);
}

export function HTTPClientConfigToJSONTyped(value?: HTTPClientConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'authorization': AuthorizationToJSON(value['authorization']),
        'basic_auth': BasicAuthToJSON(value['basicAuth']),
        'bearer_token': value['bearerToken'],
        'bearer_token_file': value['bearerTokenFile'],
        'enable_http2': value['enableHttp2'],
        'follow_redirects': value['followRedirects'],
        'no_proxy': value['noProxy'],
        'oauth2': OAuth2ToJSON(value['oauth2']),
        'proxy_connect_header': value['proxyConnectHeader'],
        'proxy_from_environment': value['proxyFromEnvironment'],
        'proxy_url': URLToJSON(value['proxyUrl']),
        'tls_config': TLSConfigToJSON(value['tlsConfig']),
    };
}

