/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * CreateQueryInQueryHistoryCommand is the command for adding query history
 * @export
 * @interface CreateQueryInQueryHistoryCommand
 */
export interface CreateQueryInQueryHistoryCommand {
    /**
     * UID of the data source for which are queries stored.
     * @type {string}
     * @memberof CreateQueryInQueryHistoryCommand
     */
    datasourceUid?: string;
    /**
     * 
     * @type {object}
     * @memberof CreateQueryInQueryHistoryCommand
     */
    queries: object;
}

/**
 * Check if a given object implements the CreateQueryInQueryHistoryCommand interface.
 */
export function instanceOfCreateQueryInQueryHistoryCommand(value: object): value is CreateQueryInQueryHistoryCommand {
    if (!('queries' in value) || value['queries'] === undefined) return false;
    return true;
}

export function CreateQueryInQueryHistoryCommandFromJSON(json: any): CreateQueryInQueryHistoryCommand {
    return CreateQueryInQueryHistoryCommandFromJSONTyped(json, false);
}

export function CreateQueryInQueryHistoryCommandFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateQueryInQueryHistoryCommand {
    if (json == null) {
        return json;
    }
    return {
        
        'datasourceUid': json['datasourceUid'] == null ? undefined : json['datasourceUid'],
        'queries': json['queries'],
    };
}

export function CreateQueryInQueryHistoryCommandToJSON(json: any): CreateQueryInQueryHistoryCommand {
    return CreateQueryInQueryHistoryCommandToJSONTyped(json, false);
}

export function CreateQueryInQueryHistoryCommandToJSONTyped(value?: CreateQueryInQueryHistoryCommand | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'datasourceUid': value['datasourceUid'],
        'queries': value['queries'],
    };
}

