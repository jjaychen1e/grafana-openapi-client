/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DataResponse } from './DataResponse';
import {
    DataResponseFromJSON,
    DataResponseFromJSONTyped,
    DataResponseToJSON,
    DataResponseToJSONTyped,
} from './DataResponse';

/**
 * It is the return type of a QueryData call.
 * @export
 * @interface QueryDataResponse
 */
export interface QueryDataResponse {
    /**
     * The QueryData method the QueryDataHandler method will set the RefId
     * property on the DataResponses' frames based on these RefIDs.
     * @type {{ [key: string]: DataResponse; }}
     * @memberof QueryDataResponse
     */
    results?: { [key: string]: DataResponse; };
}

/**
 * Check if a given object implements the QueryDataResponse interface.
 */
export function instanceOfQueryDataResponse(value: object): value is QueryDataResponse {
    return true;
}

export function QueryDataResponseFromJSON(json: any): QueryDataResponse {
    return QueryDataResponseFromJSONTyped(json, false);
}

export function QueryDataResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryDataResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'results': json['results'] == null ? undefined : (mapValues(json['results'], DataResponseFromJSON)),
    };
}

export function QueryDataResponseToJSON(json: any): QueryDataResponse {
    return QueryDataResponseToJSONTyped(json, false);
}

export function QueryDataResponseToJSONTyped(value?: QueryDataResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'results': value['results'] == null ? undefined : (mapValues(value['results'], DataResponseToJSON)),
    };
}

