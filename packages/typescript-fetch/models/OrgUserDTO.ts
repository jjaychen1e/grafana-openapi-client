/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OrgUserDTO
 */
export interface OrgUserDTO {
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof OrgUserDTO
     */
    accessControl?: { [key: string]: boolean; };
    /**
     * 
     * @type {Array<string>}
     * @memberof OrgUserDTO
     */
    authLabels?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OrgUserDTO
     */
    avatarUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgUserDTO
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OrgUserDTO
     */
    isDisabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrgUserDTO
     */
    isExternallySynced?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof OrgUserDTO
     */
    lastSeenAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof OrgUserDTO
     */
    lastSeenAtAge?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgUserDTO
     */
    login?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgUserDTO
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgUserDTO
     */
    orgId?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgUserDTO
     */
    role?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgUserDTO
     */
    userId?: number;
}

/**
 * Check if a given object implements the OrgUserDTO interface.
 */
export function instanceOfOrgUserDTO(value: object): value is OrgUserDTO {
    return true;
}

export function OrgUserDTOFromJSON(json: any): OrgUserDTO {
    return OrgUserDTOFromJSONTyped(json, false);
}

export function OrgUserDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrgUserDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'accessControl': json['accessControl'] == null ? undefined : json['accessControl'],
        'authLabels': json['authLabels'] == null ? undefined : json['authLabels'],
        'avatarUrl': json['avatarUrl'] == null ? undefined : json['avatarUrl'],
        'email': json['email'] == null ? undefined : json['email'],
        'isDisabled': json['isDisabled'] == null ? undefined : json['isDisabled'],
        'isExternallySynced': json['isExternallySynced'] == null ? undefined : json['isExternallySynced'],
        'lastSeenAt': json['lastSeenAt'] == null ? undefined : (new Date(json['lastSeenAt'])),
        'lastSeenAtAge': json['lastSeenAtAge'] == null ? undefined : json['lastSeenAtAge'],
        'login': json['login'] == null ? undefined : json['login'],
        'name': json['name'] == null ? undefined : json['name'],
        'orgId': json['orgId'] == null ? undefined : json['orgId'],
        'role': json['role'] == null ? undefined : json['role'],
        'userId': json['userId'] == null ? undefined : json['userId'],
    };
}

export function OrgUserDTOToJSON(json: any): OrgUserDTO {
    return OrgUserDTOToJSONTyped(json, false);
}

export function OrgUserDTOToJSONTyped(value?: OrgUserDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'accessControl': value['accessControl'],
        'authLabels': value['authLabels'],
        'avatarUrl': value['avatarUrl'],
        'email': value['email'],
        'isDisabled': value['isDisabled'],
        'isExternallySynced': value['isExternallySynced'],
        'lastSeenAt': value['lastSeenAt'] == null ? undefined : ((value['lastSeenAt']).toISOString()),
        'lastSeenAtAge': value['lastSeenAtAge'],
        'login': value['login'],
        'name': value['name'],
        'orgId': value['orgId'],
        'role': value['role'],
        'userId': value['userId'],
    };
}

