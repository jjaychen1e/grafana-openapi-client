/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { SigV4Config } from './SigV4Config.js';
import {
    SigV4ConfigFromJSON,
    SigV4ConfigFromJSONTyped,
    SigV4ConfigToJSON,
    SigV4ConfigToJSONTyped,
} from './SigV4Config.js';
import type { HTTPClientConfig } from './HTTPClientConfig.js';
import {
    HTTPClientConfigFromJSON,
    HTTPClientConfigFromJSONTyped,
    HTTPClientConfigToJSON,
    HTTPClientConfigToJSONTyped,
} from './HTTPClientConfig.js';

/**
 * 
 * @export
 * @interface SNSConfig
 */
export interface SNSConfig {
    /**
     * 
     * @type {string}
     * @memberof SNSConfig
     */
    apiUrl?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof SNSConfig
     */
    attributes?: { [key: string]: string; };
    /**
     * 
     * @type {HTTPClientConfig}
     * @memberof SNSConfig
     */
    httpConfig?: HTTPClientConfig;
    /**
     * 
     * @type {string}
     * @memberof SNSConfig
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof SNSConfig
     */
    phoneNumber?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SNSConfig
     */
    sendResolved?: boolean;
    /**
     * 
     * @type {SigV4Config}
     * @memberof SNSConfig
     */
    sigv4?: SigV4Config;
    /**
     * 
     * @type {string}
     * @memberof SNSConfig
     */
    subject?: string;
    /**
     * 
     * @type {string}
     * @memberof SNSConfig
     */
    targetArn?: string;
    /**
     * 
     * @type {string}
     * @memberof SNSConfig
     */
    topicArn?: string;
}

/**
 * Check if a given object implements the SNSConfig interface.
 */
export function instanceOfSNSConfig(value: object): value is SNSConfig {
    return true;
}

export function SNSConfigFromJSON(json: any): SNSConfig {
    return SNSConfigFromJSONTyped(json, false);
}

export function SNSConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): SNSConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'apiUrl': json['api_url'] == null ? undefined : json['api_url'],
        'attributes': json['attributes'] == null ? undefined : json['attributes'],
        'httpConfig': json['http_config'] == null ? undefined : HTTPClientConfigFromJSON(json['http_config']),
        'message': json['message'] == null ? undefined : json['message'],
        'phoneNumber': json['phone_number'] == null ? undefined : json['phone_number'],
        'sendResolved': json['send_resolved'] == null ? undefined : json['send_resolved'],
        'sigv4': json['sigv4'] == null ? undefined : SigV4ConfigFromJSON(json['sigv4']),
        'subject': json['subject'] == null ? undefined : json['subject'],
        'targetArn': json['target_arn'] == null ? undefined : json['target_arn'],
        'topicArn': json['topic_arn'] == null ? undefined : json['topic_arn'],
    };
}

export function SNSConfigToJSON(json: any): SNSConfig {
    return SNSConfigToJSONTyped(json, false);
}

export function SNSConfigToJSONTyped(value?: SNSConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'api_url': value['apiUrl'],
        'attributes': value['attributes'],
        'http_config': HTTPClientConfigToJSON(value['httpConfig']),
        'message': value['message'],
        'phone_number': value['phoneNumber'],
        'send_resolved': value['sendResolved'],
        'sigv4': SigV4ConfigToJSON(value['sigv4']),
        'subject': value['subject'],
        'target_arn': value['targetArn'],
        'topic_arn': value['topicArn'],
    };
}

