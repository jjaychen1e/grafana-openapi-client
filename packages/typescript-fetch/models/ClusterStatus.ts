/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { PeerStatus } from './PeerStatus.js';
import {
    PeerStatusFromJSON,
    PeerStatusFromJSONTyped,
    PeerStatusToJSON,
    PeerStatusToJSONTyped,
} from './PeerStatus.js';

/**
 * ClusterStatus cluster status
 * @export
 * @interface ClusterStatus
 */
export interface ClusterStatus {
    /**
     * name
     * @type {string}
     * @memberof ClusterStatus
     */
    name?: string;
    /**
     * peers
     * @type {Array<PeerStatus>}
     * @memberof ClusterStatus
     */
    peers?: Array<PeerStatus>;
    /**
     * status
     * @type {string}
     * @memberof ClusterStatus
     */
    status: ClusterStatusStatusEnum;
}


/**
 * @export
 */
export const ClusterStatusStatusEnum = {
    ReadySettlingDisabled: '[ready settling disabled]'
} as const;
export type ClusterStatusStatusEnum = typeof ClusterStatusStatusEnum[keyof typeof ClusterStatusStatusEnum];


/**
 * Check if a given object implements the ClusterStatus interface.
 */
export function instanceOfClusterStatus(value: object): value is ClusterStatus {
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function ClusterStatusFromJSON(json: any): ClusterStatus {
    return ClusterStatusFromJSONTyped(json, false);
}

export function ClusterStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClusterStatus {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'peers': json['peers'] == null ? undefined : ((json['peers'] as Array<any>).map(PeerStatusFromJSON)),
        'status': json['status'],
    };
}

export function ClusterStatusToJSON(json: any): ClusterStatus {
    return ClusterStatusToJSONTyped(json, false);
}

export function ClusterStatusToJSONTyped(value?: ClusterStatus | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'peers': value['peers'] == null ? undefined : ((value['peers'] as Array<any>).map(PeerStatusToJSON)),
        'status': value['status'],
    };
}

