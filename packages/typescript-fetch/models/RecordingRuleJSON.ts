/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * RecordingRuleJSON is the external representation of a recording rule
 * @export
 * @interface RecordingRuleJSON
 */
export interface RecordingRuleJSON {
    /**
     * 
     * @type {boolean}
     * @memberof RecordingRuleJSON
     */
    active?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RecordingRuleJSON
     */
    count?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RecordingRuleJSON
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof RecordingRuleJSON
     */
    destDataSourceUid?: string;
    /**
     * 
     * @type {string}
     * @memberof RecordingRuleJSON
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof RecordingRuleJSON
     */
    interval?: number;
    /**
     * 
     * @type {string}
     * @memberof RecordingRuleJSON
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof RecordingRuleJSON
     */
    promName?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof RecordingRuleJSON
     */
    queries?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof RecordingRuleJSON
     */
    range?: number;
    /**
     * 
     * @type {string}
     * @memberof RecordingRuleJSON
     */
    targetRefId?: string;
}

/**
 * Check if a given object implements the RecordingRuleJSON interface.
 */
export function instanceOfRecordingRuleJSON(value: object): value is RecordingRuleJSON {
    return true;
}

export function RecordingRuleJSONFromJSON(json: any): RecordingRuleJSON {
    return RecordingRuleJSONFromJSONTyped(json, false);
}

export function RecordingRuleJSONFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecordingRuleJSON {
    if (json == null) {
        return json;
    }
    return {
        
        'active': json['active'] == null ? undefined : json['active'],
        'count': json['count'] == null ? undefined : json['count'],
        'description': json['description'] == null ? undefined : json['description'],
        'destDataSourceUid': json['dest_data_source_uid'] == null ? undefined : json['dest_data_source_uid'],
        'id': json['id'] == null ? undefined : json['id'],
        'interval': json['interval'] == null ? undefined : json['interval'],
        'name': json['name'] == null ? undefined : json['name'],
        'promName': json['prom_name'] == null ? undefined : json['prom_name'],
        'queries': json['queries'] == null ? undefined : json['queries'],
        'range': json['range'] == null ? undefined : json['range'],
        'targetRefId': json['target_ref_id'] == null ? undefined : json['target_ref_id'],
    };
}

export function RecordingRuleJSONToJSON(json: any): RecordingRuleJSON {
    return RecordingRuleJSONToJSONTyped(json, false);
}

export function RecordingRuleJSONToJSONTyped(value?: RecordingRuleJSON | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'active': value['active'],
        'count': value['count'],
        'description': value['description'],
        'dest_data_source_uid': value['destDataSourceUid'],
        'id': value['id'],
        'interval': value['interval'],
        'name': value['name'],
        'prom_name': value['promName'],
        'queries': value['queries'],
        'range': value['range'],
        'target_ref_id': value['targetRefId'],
    };
}

