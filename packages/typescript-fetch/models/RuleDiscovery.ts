/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { RuleGroup } from './RuleGroup.js';
import {
    RuleGroupFromJSON,
    RuleGroupFromJSONTyped,
    RuleGroupToJSON,
    RuleGroupToJSONTyped,
} from './RuleGroup.js';

/**
 * 
 * @export
 * @interface RuleDiscovery
 */
export interface RuleDiscovery {
    /**
     * 
     * @type {Array<RuleGroup>}
     * @memberof RuleDiscovery
     */
    groups: Array<RuleGroup>;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof RuleDiscovery
     */
    totals?: { [key: string]: number; };
}

/**
 * Check if a given object implements the RuleDiscovery interface.
 */
export function instanceOfRuleDiscovery(value: object): value is RuleDiscovery {
    if (!('groups' in value) || value['groups'] === undefined) return false;
    return true;
}

export function RuleDiscoveryFromJSON(json: any): RuleDiscovery {
    return RuleDiscoveryFromJSONTyped(json, false);
}

export function RuleDiscoveryFromJSONTyped(json: any, ignoreDiscriminator: boolean): RuleDiscovery {
    if (json == null) {
        return json;
    }
    return {
        
        'groups': ((json['groups'] as Array<any>).map(RuleGroupFromJSON)),
        'totals': json['totals'] == null ? undefined : json['totals'],
    };
}

export function RuleDiscoveryToJSON(json: any): RuleDiscovery {
    return RuleDiscoveryToJSONTyped(json, false);
}

export function RuleDiscoveryToJSONTyped(value?: RuleDiscovery | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'groups': ((value['groups'] as Array<any>).map(RuleGroupToJSON)),
        'totals': value['totals'],
    };
}

