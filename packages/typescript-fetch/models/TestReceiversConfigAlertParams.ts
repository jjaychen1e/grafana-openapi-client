/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TestReceiversConfigAlertParams
 */
export interface TestReceiversConfigAlertParams {
    /**
     * A LabelSet is a collection of LabelName and LabelValue pairs.  The LabelSet
     * may be fully-qualified down to the point where it may resolve to a single
     * Metric in the data store or not.  All operations that occur within the realm
     * of a LabelSet can emit a vector of Metric entities to which the LabelSet may
     * match.
     * @type {{ [key: string]: string; }}
     * @memberof TestReceiversConfigAlertParams
     */
    annotations?: { [key: string]: string; };
    /**
     * A LabelSet is a collection of LabelName and LabelValue pairs.  The LabelSet
     * may be fully-qualified down to the point where it may resolve to a single
     * Metric in the data store or not.  All operations that occur within the realm
     * of a LabelSet can emit a vector of Metric entities to which the LabelSet may
     * match.
     * @type {{ [key: string]: string; }}
     * @memberof TestReceiversConfigAlertParams
     */
    labels?: { [key: string]: string; };
}

/**
 * Check if a given object implements the TestReceiversConfigAlertParams interface.
 */
export function instanceOfTestReceiversConfigAlertParams(value: object): value is TestReceiversConfigAlertParams {
    return true;
}

export function TestReceiversConfigAlertParamsFromJSON(json: any): TestReceiversConfigAlertParams {
    return TestReceiversConfigAlertParamsFromJSONTyped(json, false);
}

export function TestReceiversConfigAlertParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TestReceiversConfigAlertParams {
    if (json == null) {
        return json;
    }
    return {
        
        'annotations': json['annotations'] == null ? undefined : json['annotations'],
        'labels': json['labels'] == null ? undefined : json['labels'],
    };
}

export function TestReceiversConfigAlertParamsToJSON(json: any): TestReceiversConfigAlertParams {
    return TestReceiversConfigAlertParamsToJSONTyped(json, false);
}

export function TestReceiversConfigAlertParamsToJSONTyped(value?: TestReceiversConfigAlertParams | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'annotations': value['annotations'],
        'labels': value['labels'],
    };
}

