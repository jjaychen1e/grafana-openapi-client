/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface ReportEmail
 */
export interface ReportEmail {
    /**
     * Comma-separated list of emails to which to send the report to.
     * @type {string}
     * @memberof ReportEmail
     */
    emails?: string;
    /**
     * Send the report to the emails specified in the report. Required if emails is not present.
     * @type {string}
     * @memberof ReportEmail
     */
    id?: string;
    /**
     * Send the report to the emails specified in the report. Required if emails is not present.
     * @type {boolean}
     * @memberof ReportEmail
     */
    useEmailsFromReport?: boolean;
}

/**
 * Check if a given object implements the ReportEmail interface.
 */
export function instanceOfReportEmail(value: object): value is ReportEmail {
    return true;
}

export function ReportEmailFromJSON(json: any): ReportEmail {
    return ReportEmailFromJSONTyped(json, false);
}

export function ReportEmailFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportEmail {
    if (json == null) {
        return json;
    }
    return {
        
        'emails': json['emails'] == null ? undefined : json['emails'],
        'id': json['id'] == null ? undefined : json['id'],
        'useEmailsFromReport': json['useEmailsFromReport'] == null ? undefined : json['useEmailsFromReport'],
    };
}

export function ReportEmailToJSON(json: any): ReportEmail {
    return ReportEmailToJSONTyped(json, false);
}

export function ReportEmailToJSONTyped(value?: ReportEmail | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'emails': value['emails'],
        'id': value['id'],
        'useEmailsFromReport': value['useEmailsFromReport'],
    };
}

