/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QueryStat } from './QueryStat';
import {
    QueryStatFromJSON,
    QueryStatFromJSONTyped,
    QueryStatToJSON,
    QueryStatToJSONTyped,
} from './QueryStat';
import type { Notice } from './Notice';
import {
    NoticeFromJSON,
    NoticeFromJSONTyped,
    NoticeToJSON,
    NoticeToJSONTyped,
} from './Notice';

/**
 * https://github.com/grafana/grafana/blob/master/packages/grafana-data/src/types/data.ts#L11
 * NOTE -- in javascript this can accept any `[key: string]: any;` however
 * this interface only exposes the values we want to be exposed
 * @export
 * @interface FrameMeta
 */
export interface FrameMeta {
    /**
     * Channel is the path to a stream in grafana live that has real-time updates for this data.
     * @type {string}
     * @memberof FrameMeta
     */
    channel?: string;
    /**
     * Custom datasource specific values.
     * @type {object}
     * @memberof FrameMeta
     */
    custom?: object;
    /**
     * nolint:revive
     * @type {string}
     * @memberof FrameMeta
     */
    dataTopic?: string;
    /**
     * ExecutedQueryString is the raw query sent to the underlying system. All macros and templating
     * have been applied.  When metadata contains this value, it will be shown in the query inspector.
     * @type {string}
     * @memberof FrameMeta
     */
    executedQueryString?: string;
    /**
     * Notices provide additional information about the data in the Frame that
     * Grafana can display to the user in the user interface.
     * @type {Array<Notice>}
     * @memberof FrameMeta
     */
    notices?: Array<Notice>;
    /**
     * Path is a browsable path on the datasource.
     * @type {string}
     * @memberof FrameMeta
     */
    path?: string;
    /**
     * PathSeparator defines the separator pattern to decode a hierarchy. The default separator is '/'.
     * @type {string}
     * @memberof FrameMeta
     */
    pathSeparator?: string;
    /**
     * PreferredVisualizationPluginId sets the panel plugin id to use to render the data when using Explore. If
     * the plugin cannot be found will fall back to PreferredVisualization.
     * @type {string}
     * @memberof FrameMeta
     */
    preferredVisualisationPluginId?: string;
    /**
     * 
     * @type {string}
     * @memberof FrameMeta
     */
    preferredVisualisationType?: string;
    /**
     * Stats is an array of query result statistics.
     * @type {Array<QueryStat>}
     * @memberof FrameMeta
     */
    stats?: Array<QueryStat>;
    /**
     * A FrameType string, when present in a frame's metadata, asserts that the
     * frame's structure conforms to the FrameType's specification.
     * This property is currently optional, so FrameType may be FrameTypeUnknown even if the properties of
     * the Frame correspond to a defined FrameType.
     * +enum
     * @type {string}
     * @memberof FrameMeta
     */
    type?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof FrameMeta
     */
    typeVersion?: Array<number>;
    /**
     * Array of field indices which values create a unique id for each row. Ideally this should be globally unique ID
     * but that isn't guarantied. Should help with keeping track and deduplicating rows in visualizations, especially
     * with streaming data with frequent updates.
     * @type {Array<number>}
     * @memberof FrameMeta
     */
    uniqueRowIdFields?: Array<number>;
}

/**
 * Check if a given object implements the FrameMeta interface.
 */
export function instanceOfFrameMeta(value: object): value is FrameMeta {
    return true;
}

export function FrameMetaFromJSON(json: any): FrameMeta {
    return FrameMetaFromJSONTyped(json, false);
}

export function FrameMetaFromJSONTyped(json: any, ignoreDiscriminator: boolean): FrameMeta {
    if (json == null) {
        return json;
    }
    return {
        
        'channel': json['channel'] == null ? undefined : json['channel'],
        'custom': json['custom'] == null ? undefined : json['custom'],
        'dataTopic': json['dataTopic'] == null ? undefined : json['dataTopic'],
        'executedQueryString': json['executedQueryString'] == null ? undefined : json['executedQueryString'],
        'notices': json['notices'] == null ? undefined : ((json['notices'] as Array<any>).map(NoticeFromJSON)),
        'path': json['path'] == null ? undefined : json['path'],
        'pathSeparator': json['pathSeparator'] == null ? undefined : json['pathSeparator'],
        'preferredVisualisationPluginId': json['preferredVisualisationPluginId'] == null ? undefined : json['preferredVisualisationPluginId'],
        'preferredVisualisationType': json['preferredVisualisationType'] == null ? undefined : json['preferredVisualisationType'],
        'stats': json['stats'] == null ? undefined : ((json['stats'] as Array<any>).map(QueryStatFromJSON)),
        'type': json['type'] == null ? undefined : json['type'],
        'typeVersion': json['typeVersion'] == null ? undefined : json['typeVersion'],
        'uniqueRowIdFields': json['uniqueRowIdFields'] == null ? undefined : json['uniqueRowIdFields'],
    };
}

export function FrameMetaToJSON(json: any): FrameMeta {
    return FrameMetaToJSONTyped(json, false);
}

export function FrameMetaToJSONTyped(value?: FrameMeta | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'channel': value['channel'],
        'custom': value['custom'],
        'dataTopic': value['dataTopic'],
        'executedQueryString': value['executedQueryString'],
        'notices': value['notices'] == null ? undefined : ((value['notices'] as Array<any>).map(NoticeToJSON)),
        'path': value['path'],
        'pathSeparator': value['pathSeparator'],
        'preferredVisualisationPluginId': value['preferredVisualisationPluginId'],
        'preferredVisualisationType': value['preferredVisualisationType'],
        'stats': value['stats'] == null ? undefined : ((value['stats'] as Array<any>).map(QueryStatToJSON)),
        'type': value['type'],
        'typeVersion': value['typeVersion'],
        'uniqueRowIdFields': value['uniqueRowIdFields'],
    };
}

