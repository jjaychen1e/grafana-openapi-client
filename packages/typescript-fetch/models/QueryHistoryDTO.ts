/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface QueryHistoryDTO
 */
export interface QueryHistoryDTO {
    /**
     * 
     * @type {string}
     * @memberof QueryHistoryDTO
     */
    comment?: string;
    /**
     * 
     * @type {number}
     * @memberof QueryHistoryDTO
     */
    createdAt?: number;
    /**
     * 
     * @type {number}
     * @memberof QueryHistoryDTO
     */
    createdBy?: number;
    /**
     * 
     * @type {string}
     * @memberof QueryHistoryDTO
     */
    datasourceUid?: string;
    /**
     * 
     * @type {object}
     * @memberof QueryHistoryDTO
     */
    queries?: object;
    /**
     * 
     * @type {boolean}
     * @memberof QueryHistoryDTO
     */
    starred?: boolean;
    /**
     * 
     * @type {string}
     * @memberof QueryHistoryDTO
     */
    uid?: string;
}

/**
 * Check if a given object implements the QueryHistoryDTO interface.
 */
export function instanceOfQueryHistoryDTO(value: object): value is QueryHistoryDTO {
    return true;
}

export function QueryHistoryDTOFromJSON(json: any): QueryHistoryDTO {
    return QueryHistoryDTOFromJSONTyped(json, false);
}

export function QueryHistoryDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryHistoryDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'comment': json['comment'] == null ? undefined : json['comment'],
        'createdAt': json['createdAt'] == null ? undefined : json['createdAt'],
        'createdBy': json['createdBy'] == null ? undefined : json['createdBy'],
        'datasourceUid': json['datasourceUid'] == null ? undefined : json['datasourceUid'],
        'queries': json['queries'] == null ? undefined : json['queries'],
        'starred': json['starred'] == null ? undefined : json['starred'],
        'uid': json['uid'] == null ? undefined : json['uid'],
    };
}

export function QueryHistoryDTOToJSON(json: any): QueryHistoryDTO {
    return QueryHistoryDTOToJSONTyped(json, false);
}

export function QueryHistoryDTOToJSONTyped(value?: QueryHistoryDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'comment': value['comment'],
        'createdAt': value['createdAt'],
        'createdBy': value['createdBy'],
        'datasourceUid': value['datasourceUid'],
        'queries': value['queries'],
        'starred': value['starred'],
        'uid': value['uid'],
    };
}

