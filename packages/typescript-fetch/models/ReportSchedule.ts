/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ReportSchedule
 */
export interface ReportSchedule {
    /**
     * 
     * @type {string}
     * @memberof ReportSchedule
     */
    dayOfMonth?: string;
    /**
     * 
     * @type {Date}
     * @memberof ReportSchedule
     */
    endDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof ReportSchedule
     */
    frequency?: string;
    /**
     * 
     * @type {number}
     * @memberof ReportSchedule
     */
    intervalAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof ReportSchedule
     */
    intervalFrequency?: string;
    /**
     * 
     * @type {Date}
     * @memberof ReportSchedule
     */
    startDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof ReportSchedule
     */
    timeZone?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReportSchedule
     */
    workdaysOnly?: boolean;
}

/**
 * Check if a given object implements the ReportSchedule interface.
 */
export function instanceOfReportSchedule(value: object): value is ReportSchedule {
    return true;
}

export function ReportScheduleFromJSON(json: any): ReportSchedule {
    return ReportScheduleFromJSONTyped(json, false);
}

export function ReportScheduleFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportSchedule {
    if (json == null) {
        return json;
    }
    return {
        
        'dayOfMonth': json['dayOfMonth'] == null ? undefined : json['dayOfMonth'],
        'endDate': json['endDate'] == null ? undefined : (new Date(json['endDate'])),
        'frequency': json['frequency'] == null ? undefined : json['frequency'],
        'intervalAmount': json['intervalAmount'] == null ? undefined : json['intervalAmount'],
        'intervalFrequency': json['intervalFrequency'] == null ? undefined : json['intervalFrequency'],
        'startDate': json['startDate'] == null ? undefined : (new Date(json['startDate'])),
        'timeZone': json['timeZone'] == null ? undefined : json['timeZone'],
        'workdaysOnly': json['workdaysOnly'] == null ? undefined : json['workdaysOnly'],
    };
}

export function ReportScheduleToJSON(json: any): ReportSchedule {
    return ReportScheduleToJSONTyped(json, false);
}

export function ReportScheduleToJSONTyped(value?: ReportSchedule | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'dayOfMonth': value['dayOfMonth'],
        'endDate': value['endDate'] == null ? undefined : ((value['endDate']).toISOString()),
        'frequency': value['frequency'],
        'intervalAmount': value['intervalAmount'],
        'intervalFrequency': value['intervalFrequency'],
        'startDate': value['startDate'] == null ? undefined : ((value['startDate']).toISOString()),
        'timeZone': value['timeZone'],
        'workdaysOnly': value['workdaysOnly'],
    };
}

