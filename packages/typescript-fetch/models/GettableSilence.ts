/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SilenceStatus } from './SilenceStatus';
import {
    SilenceStatusFromJSON,
    SilenceStatusFromJSONTyped,
    SilenceStatusToJSON,
    SilenceStatusToJSONTyped,
} from './SilenceStatus';
import type { Matcher } from './Matcher';
import {
    MatcherFromJSON,
    MatcherFromJSONTyped,
    MatcherToJSON,
    MatcherToJSONTyped,
} from './Matcher';

/**
 * 
 * @export
 * @interface GettableSilence
 */
export interface GettableSilence {
    /**
     * comment
     * @type {string}
     * @memberof GettableSilence
     */
    comment: string;
    /**
     * created by
     * @type {string}
     * @memberof GettableSilence
     */
    createdBy: string;
    /**
     * ends at
     * @type {Date}
     * @memberof GettableSilence
     */
    endsAt: Date;
    /**
     * id
     * @type {string}
     * @memberof GettableSilence
     */
    id: string;
    /**
     * Matchers matchers
     * @type {Array<Matcher>}
     * @memberof GettableSilence
     */
    matchers: Array<Matcher>;
    /**
     * starts at
     * @type {Date}
     * @memberof GettableSilence
     */
    startsAt: Date;
    /**
     * 
     * @type {SilenceStatus}
     * @memberof GettableSilence
     */
    status: SilenceStatus;
    /**
     * updated at
     * @type {Date}
     * @memberof GettableSilence
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the GettableSilence interface.
 */
export function instanceOfGettableSilence(value: object): value is GettableSilence {
    if (!('comment' in value) || value['comment'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('endsAt' in value) || value['endsAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('matchers' in value) || value['matchers'] === undefined) return false;
    if (!('startsAt' in value) || value['startsAt'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function GettableSilenceFromJSON(json: any): GettableSilence {
    return GettableSilenceFromJSONTyped(json, false);
}

export function GettableSilenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): GettableSilence {
    if (json == null) {
        return json;
    }
    return {
        
        'comment': json['comment'],
        'createdBy': json['createdBy'],
        'endsAt': (new Date(json['endsAt'])),
        'id': json['id'],
        'matchers': ((json['matchers'] as Array<any>).map(MatcherFromJSON)),
        'startsAt': (new Date(json['startsAt'])),
        'status': SilenceStatusFromJSON(json['status']),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function GettableSilenceToJSON(json: any): GettableSilence {
    return GettableSilenceToJSONTyped(json, false);
}

export function GettableSilenceToJSONTyped(value?: GettableSilence | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'comment': value['comment'],
        'createdBy': value['createdBy'],
        'endsAt': ((value['endsAt']).toISOString()),
        'id': value['id'],
        'matchers': ((value['matchers'] as Array<any>).map(MatcherToJSON)),
        'startsAt': ((value['startsAt']).toISOString()),
        'status': SilenceStatusToJSON(value['status']),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

