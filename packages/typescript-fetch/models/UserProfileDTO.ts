/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface UserProfileDTO
 */
export interface UserProfileDTO {
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof UserProfileDTO
     */
    accessControl?: { [key: string]: boolean; };
    /**
     * 
     * @type {Array<string>}
     * @memberof UserProfileDTO
     */
    authLabels?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UserProfileDTO
     */
    avatarUrl?: string;
    /**
     * 
     * @type {Date}
     * @memberof UserProfileDTO
     */
    createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof UserProfileDTO
     */
    email?: string;
    /**
     * 
     * @type {number}
     * @memberof UserProfileDTO
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UserProfileDTO
     */
    isDisabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserProfileDTO
     */
    isExternal?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserProfileDTO
     */
    isExternallySynced?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserProfileDTO
     */
    isGrafanaAdmin?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserProfileDTO
     */
    isGrafanaAdminExternallySynced?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserProfileDTO
     */
    login?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileDTO
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof UserProfileDTO
     */
    orgId?: number;
    /**
     * 
     * @type {string}
     * @memberof UserProfileDTO
     */
    theme?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileDTO
     */
    uid?: string;
    /**
     * 
     * @type {Date}
     * @memberof UserProfileDTO
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the UserProfileDTO interface.
 */
export function instanceOfUserProfileDTO(value: object): value is UserProfileDTO {
    return true;
}

export function UserProfileDTOFromJSON(json: any): UserProfileDTO {
    return UserProfileDTOFromJSONTyped(json, false);
}

export function UserProfileDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserProfileDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'accessControl': json['accessControl'] == null ? undefined : json['accessControl'],
        'authLabels': json['authLabels'] == null ? undefined : json['authLabels'],
        'avatarUrl': json['avatarUrl'] == null ? undefined : json['avatarUrl'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'email': json['email'] == null ? undefined : json['email'],
        'id': json['id'] == null ? undefined : json['id'],
        'isDisabled': json['isDisabled'] == null ? undefined : json['isDisabled'],
        'isExternal': json['isExternal'] == null ? undefined : json['isExternal'],
        'isExternallySynced': json['isExternallySynced'] == null ? undefined : json['isExternallySynced'],
        'isGrafanaAdmin': json['isGrafanaAdmin'] == null ? undefined : json['isGrafanaAdmin'],
        'isGrafanaAdminExternallySynced': json['isGrafanaAdminExternallySynced'] == null ? undefined : json['isGrafanaAdminExternallySynced'],
        'login': json['login'] == null ? undefined : json['login'],
        'name': json['name'] == null ? undefined : json['name'],
        'orgId': json['orgId'] == null ? undefined : json['orgId'],
        'theme': json['theme'] == null ? undefined : json['theme'],
        'uid': json['uid'] == null ? undefined : json['uid'],
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
    };
}

export function UserProfileDTOToJSON(json: any): UserProfileDTO {
    return UserProfileDTOToJSONTyped(json, false);
}

export function UserProfileDTOToJSONTyped(value?: UserProfileDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'accessControl': value['accessControl'],
        'authLabels': value['authLabels'],
        'avatarUrl': value['avatarUrl'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'email': value['email'],
        'id': value['id'],
        'isDisabled': value['isDisabled'],
        'isExternal': value['isExternal'],
        'isExternallySynced': value['isExternallySynced'],
        'isGrafanaAdmin': value['isGrafanaAdmin'],
        'isGrafanaAdminExternallySynced': value['isGrafanaAdminExternallySynced'],
        'login': value['login'],
        'name': value['name'],
        'orgId': value['orgId'],
        'theme': value['theme'],
        'uid': value['uid'],
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

