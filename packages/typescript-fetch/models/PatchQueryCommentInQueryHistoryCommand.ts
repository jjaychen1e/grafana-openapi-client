/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * PatchQueryCommentInQueryHistoryCommand is the command for updating comment for query in query history
 * @export
 * @interface PatchQueryCommentInQueryHistoryCommand
 */
export interface PatchQueryCommentInQueryHistoryCommand {
    /**
     * Updated comment
     * @type {string}
     * @memberof PatchQueryCommentInQueryHistoryCommand
     */
    comment?: string;
}

/**
 * Check if a given object implements the PatchQueryCommentInQueryHistoryCommand interface.
 */
export function instanceOfPatchQueryCommentInQueryHistoryCommand(value: object): value is PatchQueryCommentInQueryHistoryCommand {
    return true;
}

export function PatchQueryCommentInQueryHistoryCommandFromJSON(json: any): PatchQueryCommentInQueryHistoryCommand {
    return PatchQueryCommentInQueryHistoryCommandFromJSONTyped(json, false);
}

export function PatchQueryCommentInQueryHistoryCommandFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchQueryCommentInQueryHistoryCommand {
    if (json == null) {
        return json;
    }
    return {
        
        'comment': json['comment'] == null ? undefined : json['comment'],
    };
}

export function PatchQueryCommentInQueryHistoryCommandToJSON(json: any): PatchQueryCommentInQueryHistoryCommand {
    return PatchQueryCommentInQueryHistoryCommandToJSONTyped(json, false);
}

export function PatchQueryCommentInQueryHistoryCommandToJSONTyped(value?: PatchQueryCommentInQueryHistoryCommand | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'comment': value['comment'],
    };
}

