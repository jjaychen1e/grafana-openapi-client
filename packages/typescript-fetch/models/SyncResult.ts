/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { FailedUser } from './FailedUser.js';
import {
    FailedUserFromJSON,
    FailedUserFromJSONTyped,
    FailedUserToJSON,
    FailedUserToJSONTyped,
} from './FailedUser.js';

/**
 * 
 * @export
 * @interface SyncResult
 */
export interface SyncResult {
    /**
     * A Duration represents the elapsed time between two instants
     * as an int64 nanosecond count. The representation limits the
     * largest representable duration to approximately 290 years.
     * @type {number}
     * @memberof SyncResult
     */
    elapsed?: number;
    /**
     * 
     * @type {Array<FailedUser>}
     * @memberof SyncResult
     */
    failedUsers?: Array<FailedUser>;
    /**
     * 
     * @type {Array<number>}
     * @memberof SyncResult
     */
    missingUserIds?: Array<number>;
    /**
     * 
     * @type {Date}
     * @memberof SyncResult
     */
    started?: Date;
    /**
     * 
     * @type {Array<number>}
     * @memberof SyncResult
     */
    updatedUserIds?: Array<number>;
}

/**
 * Check if a given object implements the SyncResult interface.
 */
export function instanceOfSyncResult(value: object): value is SyncResult {
    return true;
}

export function SyncResultFromJSON(json: any): SyncResult {
    return SyncResultFromJSONTyped(json, false);
}

export function SyncResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): SyncResult {
    if (json == null) {
        return json;
    }
    return {
        
        'elapsed': json['Elapsed'] == null ? undefined : json['Elapsed'],
        'failedUsers': json['FailedUsers'] == null ? undefined : ((json['FailedUsers'] as Array<any>).map(FailedUserFromJSON)),
        'missingUserIds': json['MissingUserIds'] == null ? undefined : json['MissingUserIds'],
        'started': json['Started'] == null ? undefined : (new Date(json['Started'])),
        'updatedUserIds': json['UpdatedUserIds'] == null ? undefined : json['UpdatedUserIds'],
    };
}

export function SyncResultToJSON(json: any): SyncResult {
    return SyncResultToJSONTyped(json, false);
}

export function SyncResultToJSONTyped(value?: SyncResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Elapsed': value['elapsed'],
        'FailedUsers': value['failedUsers'] == null ? undefined : ((value['failedUsers'] as Array<any>).map(FailedUserToJSON)),
        'MissingUserIds': value['missingUserIds'],
        'Started': value['started'] == null ? undefined : ((value['started']).toISOString()),
        'UpdatedUserIds': value['updatedUserIds'],
    };
}

