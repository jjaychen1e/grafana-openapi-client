/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CorrelationConfig } from './CorrelationConfig';
import {
    CorrelationConfigFromJSON,
    CorrelationConfigFromJSONTyped,
    CorrelationConfigToJSON,
    CorrelationConfigToJSONTyped,
} from './CorrelationConfig';

/**
 * Correlation is the model for correlations definitions
 * @export
 * @interface Correlation
 */
export interface Correlation {
    /**
     * 
     * @type {CorrelationConfig}
     * @memberof Correlation
     */
    config?: CorrelationConfig;
    /**
     * Description of the correlation
     * @type {string}
     * @memberof Correlation
     */
    description?: string;
    /**
     * Label identifying the correlation
     * @type {string}
     * @memberof Correlation
     */
    label?: string;
    /**
     * OrgID of the data source the correlation originates from
     * @type {number}
     * @memberof Correlation
     */
    orgId?: number;
    /**
     * Provisioned True if the correlation was created during provisioning
     * @type {boolean}
     * @memberof Correlation
     */
    provisioned?: boolean;
    /**
     * UID of the data source the correlation originates from
     * @type {string}
     * @memberof Correlation
     */
    sourceUID?: string;
    /**
     * UID of the data source the correlation points to
     * @type {string}
     * @memberof Correlation
     */
    targetUID?: string;
    /**
     * the type of correlation, either query for containing query information, or external for containing an external URL
     * +enum
     * @type {string}
     * @memberof Correlation
     */
    type?: string;
    /**
     * Unique identifier of the correlation
     * @type {string}
     * @memberof Correlation
     */
    uid?: string;
}

/**
 * Check if a given object implements the Correlation interface.
 */
export function instanceOfCorrelation(value: object): value is Correlation {
    return true;
}

export function CorrelationFromJSON(json: any): Correlation {
    return CorrelationFromJSONTyped(json, false);
}

export function CorrelationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Correlation {
    if (json == null) {
        return json;
    }
    return {
        
        'config': json['config'] == null ? undefined : CorrelationConfigFromJSON(json['config']),
        'description': json['description'] == null ? undefined : json['description'],
        'label': json['label'] == null ? undefined : json['label'],
        'orgId': json['orgId'] == null ? undefined : json['orgId'],
        'provisioned': json['provisioned'] == null ? undefined : json['provisioned'],
        'sourceUID': json['sourceUID'] == null ? undefined : json['sourceUID'],
        'targetUID': json['targetUID'] == null ? undefined : json['targetUID'],
        'type': json['type'] == null ? undefined : json['type'],
        'uid': json['uid'] == null ? undefined : json['uid'],
    };
}

export function CorrelationToJSON(json: any): Correlation {
    return CorrelationToJSONTyped(json, false);
}

export function CorrelationToJSONTyped(value?: Correlation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'config': CorrelationConfigToJSON(value['config']),
        'description': value['description'],
        'label': value['label'],
        'orgId': value['orgId'],
        'provisioned': value['provisioned'],
        'sourceUID': value['sourceUID'],
        'targetUID': value['targetUID'],
        'type': value['type'],
        'uid': value['uid'],
    };
}

