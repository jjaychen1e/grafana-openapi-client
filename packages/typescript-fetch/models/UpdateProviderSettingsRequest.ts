/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface UpdateProviderSettingsRequest
 */
export interface UpdateProviderSettingsRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateProviderSettingsRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProviderSettingsRequest
     */
    provider?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof UpdateProviderSettingsRequest
     */
    settings?: { [key: string]: object; };
}

/**
 * Check if a given object implements the UpdateProviderSettingsRequest interface.
 */
export function instanceOfUpdateProviderSettingsRequest(value: object): value is UpdateProviderSettingsRequest {
    return true;
}

export function UpdateProviderSettingsRequestFromJSON(json: any): UpdateProviderSettingsRequest {
    return UpdateProviderSettingsRequestFromJSONTyped(json, false);
}

export function UpdateProviderSettingsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateProviderSettingsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'provider': json['provider'] == null ? undefined : json['provider'],
        'settings': json['settings'] == null ? undefined : json['settings'],
    };
}

export function UpdateProviderSettingsRequestToJSON(json: any): UpdateProviderSettingsRequest {
    return UpdateProviderSettingsRequestToJSONTyped(json, false);
}

export function UpdateProviderSettingsRequestToJSONTyped(value?: UpdateProviderSettingsRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'provider': value['provider'],
        'settings': value['settings'],
    };
}

