/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReportBrandingOptions } from './ReportBrandingOptions';
import {
    ReportBrandingOptionsFromJSON,
    ReportBrandingOptionsFromJSONTyped,
    ReportBrandingOptionsToJSON,
    ReportBrandingOptionsToJSONTyped,
} from './ReportBrandingOptions';

/**
 * 
 * @export
 * @interface ReportSettings
 */
export interface ReportSettings {
    /**
     * 
     * @type {ReportBrandingOptions}
     * @memberof ReportSettings
     */
    branding?: ReportBrandingOptions;
    /**
     * 
     * @type {number}
     * @memberof ReportSettings
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportSettings
     */
    orgId?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportSettings
     */
    userId?: number;
}

/**
 * Check if a given object implements the ReportSettings interface.
 */
export function instanceOfReportSettings(value: object): value is ReportSettings {
    return true;
}

export function ReportSettingsFromJSON(json: any): ReportSettings {
    return ReportSettingsFromJSONTyped(json, false);
}

export function ReportSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportSettings {
    if (json == null) {
        return json;
    }
    return {
        
        'branding': json['branding'] == null ? undefined : ReportBrandingOptionsFromJSON(json['branding']),
        'id': json['id'] == null ? undefined : json['id'],
        'orgId': json['orgId'] == null ? undefined : json['orgId'],
        'userId': json['userId'] == null ? undefined : json['userId'],
    };
}

export function ReportSettingsToJSON(json: any): ReportSettings {
    return ReportSettingsToJSONTyped(json, false);
}

export function ReportSettingsToJSONTyped(value?: ReportSettings | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'branding': ReportBrandingOptionsToJSON(value['branding']),
        'id': value['id'],
        'orgId': value['orgId'],
        'userId': value['userId'],
    };
}

