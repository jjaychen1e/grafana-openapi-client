/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PostableGrafanaReceiver } from './PostableGrafanaReceiver';
import {
    PostableGrafanaReceiverFromJSON,
    PostableGrafanaReceiverFromJSONTyped,
    PostableGrafanaReceiverToJSON,
    PostableGrafanaReceiverToJSONTyped,
} from './PostableGrafanaReceiver';
import type { WebexConfig } from './WebexConfig';
import {
    WebexConfigFromJSON,
    WebexConfigFromJSONTyped,
    WebexConfigToJSON,
    WebexConfigToJSONTyped,
} from './WebexConfig';
import type { TelegramConfig } from './TelegramConfig';
import {
    TelegramConfigFromJSON,
    TelegramConfigFromJSONTyped,
    TelegramConfigToJSON,
    TelegramConfigToJSONTyped,
} from './TelegramConfig';
import type { VictorOpsConfig } from './VictorOpsConfig';
import {
    VictorOpsConfigFromJSON,
    VictorOpsConfigFromJSONTyped,
    VictorOpsConfigToJSON,
    VictorOpsConfigToJSONTyped,
} from './VictorOpsConfig';
import type { EmailConfig } from './EmailConfig';
import {
    EmailConfigFromJSON,
    EmailConfigFromJSONTyped,
    EmailConfigToJSON,
    EmailConfigToJSONTyped,
} from './EmailConfig';
import type { OpsGenieConfig } from './OpsGenieConfig';
import {
    OpsGenieConfigFromJSON,
    OpsGenieConfigFromJSONTyped,
    OpsGenieConfigToJSON,
    OpsGenieConfigToJSONTyped,
} from './OpsGenieConfig';
import type { PagerdutyConfig } from './PagerdutyConfig';
import {
    PagerdutyConfigFromJSON,
    PagerdutyConfigFromJSONTyped,
    PagerdutyConfigToJSON,
    PagerdutyConfigToJSONTyped,
} from './PagerdutyConfig';
import type { SNSConfig } from './SNSConfig';
import {
    SNSConfigFromJSON,
    SNSConfigFromJSONTyped,
    SNSConfigToJSON,
    SNSConfigToJSONTyped,
} from './SNSConfig';
import type { SlackConfig } from './SlackConfig';
import {
    SlackConfigFromJSON,
    SlackConfigFromJSONTyped,
    SlackConfigToJSON,
    SlackConfigToJSONTyped,
} from './SlackConfig';
import type { WebhookConfig } from './WebhookConfig';
import {
    WebhookConfigFromJSON,
    WebhookConfigFromJSONTyped,
    WebhookConfigToJSON,
    WebhookConfigToJSONTyped,
} from './WebhookConfig';
import type { MSTeamsConfig } from './MSTeamsConfig';
import {
    MSTeamsConfigFromJSON,
    MSTeamsConfigFromJSONTyped,
    MSTeamsConfigToJSON,
    MSTeamsConfigToJSONTyped,
} from './MSTeamsConfig';
import type { PushoverConfig } from './PushoverConfig';
import {
    PushoverConfigFromJSON,
    PushoverConfigFromJSONTyped,
    PushoverConfigToJSON,
    PushoverConfigToJSONTyped,
} from './PushoverConfig';
import type { DiscordConfig } from './DiscordConfig';
import {
    DiscordConfigFromJSON,
    DiscordConfigFromJSONTyped,
    DiscordConfigToJSON,
    DiscordConfigToJSONTyped,
} from './DiscordConfig';
import type { WechatConfig } from './WechatConfig';
import {
    WechatConfigFromJSON,
    WechatConfigFromJSONTyped,
    WechatConfigToJSON,
    WechatConfigToJSONTyped,
} from './WechatConfig';

/**
 * nolint:revive
 * @export
 * @interface PostableApiReceiver
 */
export interface PostableApiReceiver {
    /**
     * 
     * @type {Array<DiscordConfig>}
     * @memberof PostableApiReceiver
     */
    discordConfigs?: Array<DiscordConfig>;
    /**
     * 
     * @type {Array<EmailConfig>}
     * @memberof PostableApiReceiver
     */
    emailConfigs?: Array<EmailConfig>;
    /**
     * 
     * @type {Array<PostableGrafanaReceiver>}
     * @memberof PostableApiReceiver
     */
    grafanaManagedReceiverConfigs?: Array<PostableGrafanaReceiver>;
    /**
     * 
     * @type {Array<MSTeamsConfig>}
     * @memberof PostableApiReceiver
     */
    msteamsConfigs?: Array<MSTeamsConfig>;
    /**
     * A unique identifier for this receiver.
     * @type {string}
     * @memberof PostableApiReceiver
     */
    name?: string;
    /**
     * 
     * @type {Array<OpsGenieConfig>}
     * @memberof PostableApiReceiver
     */
    opsgenieConfigs?: Array<OpsGenieConfig>;
    /**
     * 
     * @type {Array<PagerdutyConfig>}
     * @memberof PostableApiReceiver
     */
    pagerdutyConfigs?: Array<PagerdutyConfig>;
    /**
     * 
     * @type {Array<PushoverConfig>}
     * @memberof PostableApiReceiver
     */
    pushoverConfigs?: Array<PushoverConfig>;
    /**
     * 
     * @type {Array<SlackConfig>}
     * @memberof PostableApiReceiver
     */
    slackConfigs?: Array<SlackConfig>;
    /**
     * 
     * @type {Array<SNSConfig>}
     * @memberof PostableApiReceiver
     */
    snsConfigs?: Array<SNSConfig>;
    /**
     * 
     * @type {Array<TelegramConfig>}
     * @memberof PostableApiReceiver
     */
    telegramConfigs?: Array<TelegramConfig>;
    /**
     * 
     * @type {Array<VictorOpsConfig>}
     * @memberof PostableApiReceiver
     */
    victoropsConfigs?: Array<VictorOpsConfig>;
    /**
     * 
     * @type {Array<WebexConfig>}
     * @memberof PostableApiReceiver
     */
    webexConfigs?: Array<WebexConfig>;
    /**
     * 
     * @type {Array<WebhookConfig>}
     * @memberof PostableApiReceiver
     */
    webhookConfigs?: Array<WebhookConfig>;
    /**
     * 
     * @type {Array<WechatConfig>}
     * @memberof PostableApiReceiver
     */
    wechatConfigs?: Array<WechatConfig>;
}

/**
 * Check if a given object implements the PostableApiReceiver interface.
 */
export function instanceOfPostableApiReceiver(value: object): value is PostableApiReceiver {
    return true;
}

export function PostableApiReceiverFromJSON(json: any): PostableApiReceiver {
    return PostableApiReceiverFromJSONTyped(json, false);
}

export function PostableApiReceiverFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostableApiReceiver {
    if (json == null) {
        return json;
    }
    return {
        
        'discordConfigs': json['discord_configs'] == null ? undefined : ((json['discord_configs'] as Array<any>).map(DiscordConfigFromJSON)),
        'emailConfigs': json['email_configs'] == null ? undefined : ((json['email_configs'] as Array<any>).map(EmailConfigFromJSON)),
        'grafanaManagedReceiverConfigs': json['grafana_managed_receiver_configs'] == null ? undefined : ((json['grafana_managed_receiver_configs'] as Array<any>).map(PostableGrafanaReceiverFromJSON)),
        'msteamsConfigs': json['msteams_configs'] == null ? undefined : ((json['msteams_configs'] as Array<any>).map(MSTeamsConfigFromJSON)),
        'name': json['name'] == null ? undefined : json['name'],
        'opsgenieConfigs': json['opsgenie_configs'] == null ? undefined : ((json['opsgenie_configs'] as Array<any>).map(OpsGenieConfigFromJSON)),
        'pagerdutyConfigs': json['pagerduty_configs'] == null ? undefined : ((json['pagerduty_configs'] as Array<any>).map(PagerdutyConfigFromJSON)),
        'pushoverConfigs': json['pushover_configs'] == null ? undefined : ((json['pushover_configs'] as Array<any>).map(PushoverConfigFromJSON)),
        'slackConfigs': json['slack_configs'] == null ? undefined : ((json['slack_configs'] as Array<any>).map(SlackConfigFromJSON)),
        'snsConfigs': json['sns_configs'] == null ? undefined : ((json['sns_configs'] as Array<any>).map(SNSConfigFromJSON)),
        'telegramConfigs': json['telegram_configs'] == null ? undefined : ((json['telegram_configs'] as Array<any>).map(TelegramConfigFromJSON)),
        'victoropsConfigs': json['victorops_configs'] == null ? undefined : ((json['victorops_configs'] as Array<any>).map(VictorOpsConfigFromJSON)),
        'webexConfigs': json['webex_configs'] == null ? undefined : ((json['webex_configs'] as Array<any>).map(WebexConfigFromJSON)),
        'webhookConfigs': json['webhook_configs'] == null ? undefined : ((json['webhook_configs'] as Array<any>).map(WebhookConfigFromJSON)),
        'wechatConfigs': json['wechat_configs'] == null ? undefined : ((json['wechat_configs'] as Array<any>).map(WechatConfigFromJSON)),
    };
}

export function PostableApiReceiverToJSON(json: any): PostableApiReceiver {
    return PostableApiReceiverToJSONTyped(json, false);
}

export function PostableApiReceiverToJSONTyped(value?: PostableApiReceiver | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'discord_configs': value['discordConfigs'] == null ? undefined : ((value['discordConfigs'] as Array<any>).map(DiscordConfigToJSON)),
        'email_configs': value['emailConfigs'] == null ? undefined : ((value['emailConfigs'] as Array<any>).map(EmailConfigToJSON)),
        'grafana_managed_receiver_configs': value['grafanaManagedReceiverConfigs'] == null ? undefined : ((value['grafanaManagedReceiverConfigs'] as Array<any>).map(PostableGrafanaReceiverToJSON)),
        'msteams_configs': value['msteamsConfigs'] == null ? undefined : ((value['msteamsConfigs'] as Array<any>).map(MSTeamsConfigToJSON)),
        'name': value['name'],
        'opsgenie_configs': value['opsgenieConfigs'] == null ? undefined : ((value['opsgenieConfigs'] as Array<any>).map(OpsGenieConfigToJSON)),
        'pagerduty_configs': value['pagerdutyConfigs'] == null ? undefined : ((value['pagerdutyConfigs'] as Array<any>).map(PagerdutyConfigToJSON)),
        'pushover_configs': value['pushoverConfigs'] == null ? undefined : ((value['pushoverConfigs'] as Array<any>).map(PushoverConfigToJSON)),
        'slack_configs': value['slackConfigs'] == null ? undefined : ((value['slackConfigs'] as Array<any>).map(SlackConfigToJSON)),
        'sns_configs': value['snsConfigs'] == null ? undefined : ((value['snsConfigs'] as Array<any>).map(SNSConfigToJSON)),
        'telegram_configs': value['telegramConfigs'] == null ? undefined : ((value['telegramConfigs'] as Array<any>).map(TelegramConfigToJSON)),
        'victorops_configs': value['victoropsConfigs'] == null ? undefined : ((value['victoropsConfigs'] as Array<any>).map(VictorOpsConfigToJSON)),
        'webex_configs': value['webexConfigs'] == null ? undefined : ((value['webexConfigs'] as Array<any>).map(WebexConfigToJSON)),
        'webhook_configs': value['webhookConfigs'] == null ? undefined : ((value['webhookConfigs'] as Array<any>).map(WebhookConfigToJSON)),
        'wechat_configs': value['wechatConfigs'] == null ? undefined : ((value['wechatConfigs'] as Array<any>).map(WechatConfigToJSON)),
    };
}

