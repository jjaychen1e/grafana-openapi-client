/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * TODO: this should be a regular DataQuery that depends on the selected dashboard
 * these match the properties of the "grafana" datasouce that is default in most dashboards
 * @export
 * @interface AnnotationTarget
 */
export interface AnnotationTarget {
    /**
     * Only required/valid for the grafana datasource...
     * but code+tests is already depending on it so hard to change
     * @type {number}
     * @memberof AnnotationTarget
     */
    limit?: number;
    /**
     * Only required/valid for the grafana datasource...
     * but code+tests is already depending on it so hard to change
     * @type {boolean}
     * @memberof AnnotationTarget
     */
    matchAny?: boolean;
    /**
     * Only required/valid for the grafana datasource...
     * but code+tests is already depending on it so hard to change
     * @type {Array<string>}
     * @memberof AnnotationTarget
     */
    tags?: Array<string>;
    /**
     * Only required/valid for the grafana datasource...
     * but code+tests is already depending on it so hard to change
     * @type {string}
     * @memberof AnnotationTarget
     */
    type?: string;
}

/**
 * Check if a given object implements the AnnotationTarget interface.
 */
export function instanceOfAnnotationTarget(value: object): value is AnnotationTarget {
    return true;
}

export function AnnotationTargetFromJSON(json: any): AnnotationTarget {
    return AnnotationTargetFromJSONTyped(json, false);
}

export function AnnotationTargetFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnnotationTarget {
    if (json == null) {
        return json;
    }
    return {
        
        'limit': json['limit'] == null ? undefined : json['limit'],
        'matchAny': json['matchAny'] == null ? undefined : json['matchAny'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'type': json['type'] == null ? undefined : json['type'],
    };
}

export function AnnotationTargetToJSON(json: any): AnnotationTarget {
    return AnnotationTargetToJSONTyped(json, false);
}

export function AnnotationTargetToJSONTyped(value?: AnnotationTarget | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'limit': value['limit'],
        'matchAny': value['matchAny'],
        'tags': value['tags'],
        'type': value['type'],
    };
}

