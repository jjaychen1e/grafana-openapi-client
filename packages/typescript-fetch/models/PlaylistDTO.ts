/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { PlaylistItemDTO } from './PlaylistItemDTO.js';
import {
    PlaylistItemDTOFromJSON,
    PlaylistItemDTOFromJSONTyped,
    PlaylistItemDTOToJSON,
    PlaylistItemDTOToJSONTyped,
} from './PlaylistItemDTO.js';

/**
 * 
 * @export
 * @interface PlaylistDTO
 */
export interface PlaylistDTO {
    /**
     * Interval sets the time between switching views in a playlist.
     * @type {string}
     * @memberof PlaylistDTO
     */
    interval?: string;
    /**
     * The ordered list of items that the playlist will iterate over.
     * @type {Array<PlaylistItemDTO>}
     * @memberof PlaylistDTO
     */
    items?: Array<PlaylistItemDTO>;
    /**
     * Name of the playlist.
     * @type {string}
     * @memberof PlaylistDTO
     */
    name?: string;
    /**
     * Unique playlist identifier. Generated on creation, either by the
     * creator of the playlist of by the application.
     * @type {string}
     * @memberof PlaylistDTO
     */
    uid?: string;
}

/**
 * Check if a given object implements the PlaylistDTO interface.
 */
export function instanceOfPlaylistDTO(value: object): value is PlaylistDTO {
    return true;
}

export function PlaylistDTOFromJSON(json: any): PlaylistDTO {
    return PlaylistDTOFromJSONTyped(json, false);
}

export function PlaylistDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlaylistDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'interval': json['interval'] == null ? undefined : json['interval'],
        'items': json['items'] == null ? undefined : ((json['items'] as Array<any>).map(PlaylistItemDTOFromJSON)),
        'name': json['name'] == null ? undefined : json['name'],
        'uid': json['uid'] == null ? undefined : json['uid'],
    };
}

export function PlaylistDTOToJSON(json: any): PlaylistDTO {
    return PlaylistDTOToJSONTyped(json, false);
}

export function PlaylistDTOToJSONTyped(value?: PlaylistDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'interval': value['interval'],
        'items': value['items'] == null ? undefined : ((value['items'] as Array<any>).map(PlaylistItemDTOToJSON)),
        'name': value['name'],
        'uid': value['uid'],
    };
}

