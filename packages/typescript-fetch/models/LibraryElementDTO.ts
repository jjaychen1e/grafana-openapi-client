/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { LibraryElementDTOMeta } from './LibraryElementDTOMeta.js';
import {
    LibraryElementDTOMetaFromJSON,
    LibraryElementDTOMetaFromJSONTyped,
    LibraryElementDTOMetaToJSON,
    LibraryElementDTOMetaToJSONTyped,
} from './LibraryElementDTOMeta.js';

/**
 * 
 * @export
 * @interface LibraryElementDTO
 */
export interface LibraryElementDTO {
    /**
     * 
     * @type {string}
     * @memberof LibraryElementDTO
     */
    description?: string;
    /**
     * Deprecated: use FolderUID instead
     * @type {number}
     * @memberof LibraryElementDTO
     */
    folderId?: number;
    /**
     * 
     * @type {string}
     * @memberof LibraryElementDTO
     */
    folderUid?: string;
    /**
     * 
     * @type {number}
     * @memberof LibraryElementDTO
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof LibraryElementDTO
     */
    kind?: number;
    /**
     * 
     * @type {LibraryElementDTOMeta}
     * @memberof LibraryElementDTO
     */
    meta?: LibraryElementDTOMeta;
    /**
     * 
     * @type {object}
     * @memberof LibraryElementDTO
     */
    model?: object;
    /**
     * 
     * @type {string}
     * @memberof LibraryElementDTO
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof LibraryElementDTO
     */
    orgId?: number;
    /**
     * 
     * @type {number}
     * @memberof LibraryElementDTO
     */
    schemaVersion?: number;
    /**
     * 
     * @type {string}
     * @memberof LibraryElementDTO
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof LibraryElementDTO
     */
    uid?: string;
    /**
     * 
     * @type {number}
     * @memberof LibraryElementDTO
     */
    version?: number;
}

/**
 * Check if a given object implements the LibraryElementDTO interface.
 */
export function instanceOfLibraryElementDTO(value: object): value is LibraryElementDTO {
    return true;
}

export function LibraryElementDTOFromJSON(json: any): LibraryElementDTO {
    return LibraryElementDTOFromJSONTyped(json, false);
}

export function LibraryElementDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): LibraryElementDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'description': json['description'] == null ? undefined : json['description'],
        'folderId': json['folderId'] == null ? undefined : json['folderId'],
        'folderUid': json['folderUid'] == null ? undefined : json['folderUid'],
        'id': json['id'] == null ? undefined : json['id'],
        'kind': json['kind'] == null ? undefined : json['kind'],
        'meta': json['meta'] == null ? undefined : LibraryElementDTOMetaFromJSON(json['meta']),
        'model': json['model'] == null ? undefined : json['model'],
        'name': json['name'] == null ? undefined : json['name'],
        'orgId': json['orgId'] == null ? undefined : json['orgId'],
        'schemaVersion': json['schemaVersion'] == null ? undefined : json['schemaVersion'],
        'type': json['type'] == null ? undefined : json['type'],
        'uid': json['uid'] == null ? undefined : json['uid'],
        'version': json['version'] == null ? undefined : json['version'],
    };
}

export function LibraryElementDTOToJSON(json: any): LibraryElementDTO {
    return LibraryElementDTOToJSONTyped(json, false);
}

export function LibraryElementDTOToJSONTyped(value?: LibraryElementDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'description': value['description'],
        'folderId': value['folderId'],
        'folderUid': value['folderUid'],
        'id': value['id'],
        'kind': value['kind'],
        'meta': LibraryElementDTOMetaToJSON(value['meta']),
        'model': value['model'],
        'name': value['name'],
        'orgId': value['orgId'],
        'schemaVersion': value['schemaVersion'],
        'type': value['type'],
        'uid': value['uid'],
        'version': value['version'],
    };
}

