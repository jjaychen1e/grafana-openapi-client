/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface AdminStats
 */
export interface AdminStats {
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    activeAdmins?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    activeDevices?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    activeEditors?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    activeSessions?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    activeUsers?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    activeViewers?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    admins?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    alerts?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    dailyActiveAdmins?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    dailyActiveEditors?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    dailyActiveSessions?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    dailyActiveUsers?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    dailyActiveViewers?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    dashboards?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    datasources?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    editors?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    monthlyActiveUsers?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    orgs?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    playlists?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    snapshots?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    stars?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    tags?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    users?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminStats
     */
    viewers?: number;
}

/**
 * Check if a given object implements the AdminStats interface.
 */
export function instanceOfAdminStats(value: object): value is AdminStats {
    return true;
}

export function AdminStatsFromJSON(json: any): AdminStats {
    return AdminStatsFromJSONTyped(json, false);
}

export function AdminStatsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdminStats {
    if (json == null) {
        return json;
    }
    return {
        
        'activeAdmins': json['activeAdmins'] == null ? undefined : json['activeAdmins'],
        'activeDevices': json['activeDevices'] == null ? undefined : json['activeDevices'],
        'activeEditors': json['activeEditors'] == null ? undefined : json['activeEditors'],
        'activeSessions': json['activeSessions'] == null ? undefined : json['activeSessions'],
        'activeUsers': json['activeUsers'] == null ? undefined : json['activeUsers'],
        'activeViewers': json['activeViewers'] == null ? undefined : json['activeViewers'],
        'admins': json['admins'] == null ? undefined : json['admins'],
        'alerts': json['alerts'] == null ? undefined : json['alerts'],
        'dailyActiveAdmins': json['dailyActiveAdmins'] == null ? undefined : json['dailyActiveAdmins'],
        'dailyActiveEditors': json['dailyActiveEditors'] == null ? undefined : json['dailyActiveEditors'],
        'dailyActiveSessions': json['dailyActiveSessions'] == null ? undefined : json['dailyActiveSessions'],
        'dailyActiveUsers': json['dailyActiveUsers'] == null ? undefined : json['dailyActiveUsers'],
        'dailyActiveViewers': json['dailyActiveViewers'] == null ? undefined : json['dailyActiveViewers'],
        'dashboards': json['dashboards'] == null ? undefined : json['dashboards'],
        'datasources': json['datasources'] == null ? undefined : json['datasources'],
        'editors': json['editors'] == null ? undefined : json['editors'],
        'monthlyActiveUsers': json['monthlyActiveUsers'] == null ? undefined : json['monthlyActiveUsers'],
        'orgs': json['orgs'] == null ? undefined : json['orgs'],
        'playlists': json['playlists'] == null ? undefined : json['playlists'],
        'snapshots': json['snapshots'] == null ? undefined : json['snapshots'],
        'stars': json['stars'] == null ? undefined : json['stars'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'users': json['users'] == null ? undefined : json['users'],
        'viewers': json['viewers'] == null ? undefined : json['viewers'],
    };
}

export function AdminStatsToJSON(json: any): AdminStats {
    return AdminStatsToJSONTyped(json, false);
}

export function AdminStatsToJSONTyped(value?: AdminStats | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'activeAdmins': value['activeAdmins'],
        'activeDevices': value['activeDevices'],
        'activeEditors': value['activeEditors'],
        'activeSessions': value['activeSessions'],
        'activeUsers': value['activeUsers'],
        'activeViewers': value['activeViewers'],
        'admins': value['admins'],
        'alerts': value['alerts'],
        'dailyActiveAdmins': value['dailyActiveAdmins'],
        'dailyActiveEditors': value['dailyActiveEditors'],
        'dailyActiveSessions': value['dailyActiveSessions'],
        'dailyActiveUsers': value['dailyActiveUsers'],
        'dailyActiveViewers': value['dailyActiveViewers'],
        'dashboards': value['dashboards'],
        'datasources': value['datasources'],
        'editors': value['editors'],
        'monthlyActiveUsers': value['monthlyActiveUsers'],
        'orgs': value['orgs'],
        'playlists': value['playlists'],
        'snapshots': value['snapshots'],
        'stars': value['stars'],
        'tags': value['tags'],
        'users': value['users'],
        'viewers': value['viewers'],
    };
}

