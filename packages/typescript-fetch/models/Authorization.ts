/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Authorization
 */
export interface Authorization {
    /**
     * 
     * @type {string}
     * @memberof Authorization
     */
    credentials?: string;
    /**
     * 
     * @type {string}
     * @memberof Authorization
     */
    credentialsFile?: string;
    /**
     * CredentialsRef is the name of the secret within the secret manager to use as credentials.
     * @type {string}
     * @memberof Authorization
     */
    credentialsRef?: string;
    /**
     * 
     * @type {string}
     * @memberof Authorization
     */
    type?: string;
}

/**
 * Check if a given object implements the Authorization interface.
 */
export function instanceOfAuthorization(value: object): value is Authorization {
    return true;
}

export function AuthorizationFromJSON(json: any): Authorization {
    return AuthorizationFromJSONTyped(json, false);
}

export function AuthorizationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Authorization {
    if (json == null) {
        return json;
    }
    return {
        
        'credentials': json['credentials'] == null ? undefined : json['credentials'],
        'credentialsFile': json['credentials_file'] == null ? undefined : json['credentials_file'],
        'credentialsRef': json['credentials_ref'] == null ? undefined : json['credentials_ref'],
        'type': json['type'] == null ? undefined : json['type'],
    };
}

export function AuthorizationToJSON(json: any): Authorization {
    return AuthorizationToJSONTyped(json, false);
}

export function AuthorizationToJSONTyped(value?: Authorization | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'credentials': value['credentials'],
        'credentials_file': value['credentialsFile'],
        'credentials_ref': value['credentialsRef'],
        'type': value['type'],
    };
}

