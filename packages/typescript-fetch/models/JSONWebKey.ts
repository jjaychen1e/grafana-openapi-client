/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { URL } from './URL.js';
import {
    URLFromJSON,
    URLFromJSONTyped,
    URLToJSON,
    URLToJSONTyped,
} from './URL.js';
import type { Certificate } from './Certificate.js';
import {
    CertificateFromJSON,
    CertificateFromJSONTyped,
    CertificateToJSON,
    CertificateToJSONTyped,
} from './Certificate.js';

/**
 * JSONWebKey represents a public or private key in JWK format. It can be
 * marshaled into JSON and unmarshaled from JSON.
 * @export
 * @interface JSONWebKey
 */
export interface JSONWebKey {
    /**
     * Key algorithm, parsed from `alg` header.
     * @type {string}
     * @memberof JSONWebKey
     */
    algorithm?: string;
    /**
     * X.509 certificate thumbprint (SHA-1), parsed from `x5t` header.
     * @type {Array<number>}
     * @memberof JSONWebKey
     */
    certificateThumbprintSHA1?: Array<number>;
    /**
     * X.509 certificate thumbprint (SHA-256), parsed from `x5t#S256` header.
     * @type {Array<number>}
     * @memberof JSONWebKey
     */
    certificateThumbprintSHA256?: Array<number>;
    /**
     * X.509 certificate chain, parsed from `x5c` header.
     * @type {Array<Certificate>}
     * @memberof JSONWebKey
     */
    certificates?: Array<Certificate>;
    /**
     * 
     * @type {URL}
     * @memberof JSONWebKey
     */
    certificatesURL?: URL;
    /**
     * Key is the Go in-memory representation of this key. It must have one
     * of these types:
     * ed25519.PublicKey
     * ed25519.PrivateKey
     * ecdsa.PublicKey
     * ecdsa.PrivateKey
     * rsa.PublicKey
     * rsa.PrivateKey
     * []byte (a symmetric key)
     * 
     * When marshaling this JSONWebKey into JSON, the "kty" header parameter
     * will be automatically set based on the type of this field.
     * @type {object}
     * @memberof JSONWebKey
     */
    key?: object;
    /**
     * Key identifier, parsed from `kid` header.
     * @type {string}
     * @memberof JSONWebKey
     */
    keyID?: string;
    /**
     * Key use, parsed from `use` header.
     * @type {string}
     * @memberof JSONWebKey
     */
    use?: string;
}

/**
 * Check if a given object implements the JSONWebKey interface.
 */
export function instanceOfJSONWebKey(value: object): value is JSONWebKey {
    return true;
}

export function JSONWebKeyFromJSON(json: any): JSONWebKey {
    return JSONWebKeyFromJSONTyped(json, false);
}

export function JSONWebKeyFromJSONTyped(json: any, ignoreDiscriminator: boolean): JSONWebKey {
    if (json == null) {
        return json;
    }
    return {
        
        'algorithm': json['Algorithm'] == null ? undefined : json['Algorithm'],
        'certificateThumbprintSHA1': json['CertificateThumbprintSHA1'] == null ? undefined : json['CertificateThumbprintSHA1'],
        'certificateThumbprintSHA256': json['CertificateThumbprintSHA256'] == null ? undefined : json['CertificateThumbprintSHA256'],
        'certificates': json['Certificates'] == null ? undefined : ((json['Certificates'] as Array<any>).map(CertificateFromJSON)),
        'certificatesURL': json['CertificatesURL'] == null ? undefined : URLFromJSON(json['CertificatesURL']),
        'key': json['Key'] == null ? undefined : json['Key'],
        'keyID': json['KeyID'] == null ? undefined : json['KeyID'],
        'use': json['Use'] == null ? undefined : json['Use'],
    };
}

export function JSONWebKeyToJSON(json: any): JSONWebKey {
    return JSONWebKeyToJSONTyped(json, false);
}

export function JSONWebKeyToJSONTyped(value?: JSONWebKey | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Algorithm': value['algorithm'],
        'CertificateThumbprintSHA1': value['certificateThumbprintSHA1'],
        'CertificateThumbprintSHA256': value['certificateThumbprintSHA256'],
        'Certificates': value['certificates'] == null ? undefined : ((value['certificates'] as Array<any>).map(CertificateToJSON)),
        'CertificatesURL': URLToJSON(value['certificatesURL']),
        'Key': value['key'],
        'KeyID': value['keyID'],
        'Use': value['use'],
    };
}

