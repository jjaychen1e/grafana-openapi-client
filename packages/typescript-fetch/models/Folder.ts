/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface Folder
 */
export interface Folder {
    /**
     * Metadata contains user accesses for a given resource
     * Ex: map[string]bool{"create":true, "delete": true}
     * @type {{ [key: string]: boolean; }}
     * @memberof Folder
     */
    accessControl?: { [key: string]: boolean; };
    /**
     * 
     * @type {boolean}
     * @memberof Folder
     */
    canAdmin?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Folder
     */
    canDelete?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Folder
     */
    canEdit?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Folder
     */
    canSave?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Folder
     */
    created?: Date;
    /**
     * 
     * @type {string}
     * @memberof Folder
     */
    createdBy?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Folder
     */
    hasAcl?: boolean;
    /**
     * Deprecated: use UID instead
     * @type {number}
     * @memberof Folder
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Folder
     */
    orgId?: number;
    /**
     * only used if nested folders are enabled
     * @type {string}
     * @memberof Folder
     */
    parentUid?: string;
    /**
     * the parent folders starting from the root going down
     * @type {Array<Folder>}
     * @memberof Folder
     */
    parents?: Array<Folder>;
    /**
     * 
     * @type {string}
     * @memberof Folder
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Folder
     */
    uid?: string;
    /**
     * 
     * @type {Date}
     * @memberof Folder
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof Folder
     */
    updatedBy?: string;
    /**
     * 
     * @type {string}
     * @memberof Folder
     */
    url?: string;
    /**
     * 
     * @type {number}
     * @memberof Folder
     */
    version?: number;
}

/**
 * Check if a given object implements the Folder interface.
 */
export function instanceOfFolder(value: object): value is Folder {
    return true;
}

export function FolderFromJSON(json: any): Folder {
    return FolderFromJSONTyped(json, false);
}

export function FolderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Folder {
    if (json == null) {
        return json;
    }
    return {
        
        'accessControl': json['accessControl'] == null ? undefined : json['accessControl'],
        'canAdmin': json['canAdmin'] == null ? undefined : json['canAdmin'],
        'canDelete': json['canDelete'] == null ? undefined : json['canDelete'],
        'canEdit': json['canEdit'] == null ? undefined : json['canEdit'],
        'canSave': json['canSave'] == null ? undefined : json['canSave'],
        'created': json['created'] == null ? undefined : (new Date(json['created'])),
        'createdBy': json['createdBy'] == null ? undefined : json['createdBy'],
        'hasAcl': json['hasAcl'] == null ? undefined : json['hasAcl'],
        'id': json['id'] == null ? undefined : json['id'],
        'orgId': json['orgId'] == null ? undefined : json['orgId'],
        'parentUid': json['parentUid'] == null ? undefined : json['parentUid'],
        'parents': json['parents'] == null ? undefined : ((json['parents'] as Array<any>).map(FolderFromJSON)),
        'title': json['title'] == null ? undefined : json['title'],
        'uid': json['uid'] == null ? undefined : json['uid'],
        'updated': json['updated'] == null ? undefined : (new Date(json['updated'])),
        'updatedBy': json['updatedBy'] == null ? undefined : json['updatedBy'],
        'url': json['url'] == null ? undefined : json['url'],
        'version': json['version'] == null ? undefined : json['version'],
    };
}

export function FolderToJSON(json: any): Folder {
    return FolderToJSONTyped(json, false);
}

export function FolderToJSONTyped(value?: Folder | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'accessControl': value['accessControl'],
        'canAdmin': value['canAdmin'],
        'canDelete': value['canDelete'],
        'canEdit': value['canEdit'],
        'canSave': value['canSave'],
        'created': value['created'] == null ? undefined : ((value['created']).toISOString()),
        'createdBy': value['createdBy'],
        'hasAcl': value['hasAcl'],
        'id': value['id'],
        'orgId': value['orgId'],
        'parentUid': value['parentUid'],
        'parents': value['parents'] == null ? undefined : ((value['parents'] as Array<any>).map(FolderToJSON)),
        'title': value['title'],
        'uid': value['uid'],
        'updated': value['updated'] == null ? undefined : ((value['updated']).toISOString()),
        'updatedBy': value['updatedBy'],
        'url': value['url'],
        'version': value['version'],
    };
}

