/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { ThresholdsConfig } from './ThresholdsConfig.js';
import {
    ThresholdsConfigFromJSON,
    ThresholdsConfigFromJSONTyped,
    ThresholdsConfigToJSON,
    ThresholdsConfigToJSONTyped,
} from './ThresholdsConfig.js';
import type { FieldTypeConfig } from './FieldTypeConfig.js';
import {
    FieldTypeConfigFromJSON,
    FieldTypeConfigFromJSONTyped,
    FieldTypeConfigToJSON,
    FieldTypeConfigToJSONTyped,
} from './FieldTypeConfig.js';
import type { DataLink } from './DataLink.js';
import {
    DataLinkFromJSON,
    DataLinkFromJSONTyped,
    DataLinkToJSON,
    DataLinkToJSONTyped,
} from './DataLink.js';

/**
 * 
 * @export
 * @interface FieldConfig
 */
export interface FieldConfig {
    /**
     * Map values to a display color
     * NOTE: this interface is under development in the frontend... so simple map for now
     * @type {{ [key: string]: object; }}
     * @memberof FieldConfig
     */
    color?: { [key: string]: object; };
    /**
     * Panel Specific Values
     * @type {{ [key: string]: object; }}
     * @memberof FieldConfig
     */
    custom?: { [key: string]: object; };
    /**
     * 
     * @type {number}
     * @memberof FieldConfig
     */
    decimals?: number;
    /**
     * Description is human readable field metadata
     * @type {string}
     * @memberof FieldConfig
     */
    description?: string;
    /**
     * DisplayName overrides Grafana default naming, should not be used from a data source
     * @type {string}
     * @memberof FieldConfig
     */
    displayName?: string;
    /**
     * DisplayNameFromDS overrides Grafana default naming strategy.
     * @type {string}
     * @memberof FieldConfig
     */
    displayNameFromDS?: string;
    /**
     * Filterable indicates if the Field's data can be filtered by additional calls.
     * @type {boolean}
     * @memberof FieldConfig
     */
    filterable?: boolean;
    /**
     * Interval indicates the expected regular step between values in the series.
     * When an interval exists, consumers can identify "missing" values when the expected value is not present.
     * The grafana timeseries visualization will render disconnected values when missing values are found it the time field.
     * The interval uses the same units as the values.  For time.Time, this is defined in milliseconds.
     * @type {number}
     * @memberof FieldConfig
     */
    interval?: number;
    /**
     * The behavior when clicking on a result
     * @type {Array<DataLink>}
     * @memberof FieldConfig
     */
    links?: Array<DataLink>;
    /**
     * 
     * @type {Array<object>}
     * @memberof FieldConfig
     */
    mappings?: Array<object>;
    /**
     * ConfFloat64 is a float64. It Marshals float64 values of NaN of Inf
     * to null.
     * @type {number}
     * @memberof FieldConfig
     */
    max?: number;
    /**
     * ConfFloat64 is a float64. It Marshals float64 values of NaN of Inf
     * to null.
     * @type {number}
     * @memberof FieldConfig
     */
    min?: number;
    /**
     * Alternative to empty string
     * @type {string}
     * @memberof FieldConfig
     */
    noValue?: string;
    /**
     * Path is an explicit path to the field in the datasource. When the frame meta includes a path,
     * this will default to `${frame.meta.path}/${field.name}
     * 
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used as an identifier to update values in a subsequent request
     * @type {string}
     * @memberof FieldConfig
     */
    path?: string;
    /**
     * 
     * @type {ThresholdsConfig}
     * @memberof FieldConfig
     */
    thresholds?: ThresholdsConfig;
    /**
     * 
     * @type {FieldTypeConfig}
     * @memberof FieldConfig
     */
    type?: FieldTypeConfig;
    /**
     * Numeric Options
     * @type {string}
     * @memberof FieldConfig
     */
    unit?: string;
    /**
     * Writeable indicates that the datasource knows how to update this value
     * @type {boolean}
     * @memberof FieldConfig
     */
    writeable?: boolean;
}

/**
 * Check if a given object implements the FieldConfig interface.
 */
export function instanceOfFieldConfig(value: object): value is FieldConfig {
    return true;
}

export function FieldConfigFromJSON(json: any): FieldConfig {
    return FieldConfigFromJSONTyped(json, false);
}

export function FieldConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): FieldConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'color': json['color'] == null ? undefined : json['color'],
        'custom': json['custom'] == null ? undefined : json['custom'],
        'decimals': json['decimals'] == null ? undefined : json['decimals'],
        'description': json['description'] == null ? undefined : json['description'],
        'displayName': json['displayName'] == null ? undefined : json['displayName'],
        'displayNameFromDS': json['displayNameFromDS'] == null ? undefined : json['displayNameFromDS'],
        'filterable': json['filterable'] == null ? undefined : json['filterable'],
        'interval': json['interval'] == null ? undefined : json['interval'],
        'links': json['links'] == null ? undefined : ((json['links'] as Array<any>).map(DataLinkFromJSON)),
        'mappings': json['mappings'] == null ? undefined : json['mappings'],
        'max': json['max'] == null ? undefined : json['max'],
        'min': json['min'] == null ? undefined : json['min'],
        'noValue': json['noValue'] == null ? undefined : json['noValue'],
        'path': json['path'] == null ? undefined : json['path'],
        'thresholds': json['thresholds'] == null ? undefined : ThresholdsConfigFromJSON(json['thresholds']),
        'type': json['type'] == null ? undefined : FieldTypeConfigFromJSON(json['type']),
        'unit': json['unit'] == null ? undefined : json['unit'],
        'writeable': json['writeable'] == null ? undefined : json['writeable'],
    };
}

export function FieldConfigToJSON(json: any): FieldConfig {
    return FieldConfigToJSONTyped(json, false);
}

export function FieldConfigToJSONTyped(value?: FieldConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'color': value['color'],
        'custom': value['custom'],
        'decimals': value['decimals'],
        'description': value['description'],
        'displayName': value['displayName'],
        'displayNameFromDS': value['displayNameFromDS'],
        'filterable': value['filterable'],
        'interval': value['interval'],
        'links': value['links'] == null ? undefined : ((value['links'] as Array<any>).map(DataLinkToJSON)),
        'mappings': value['mappings'],
        'max': value['max'],
        'min': value['min'],
        'noValue': value['noValue'],
        'path': value['path'],
        'thresholds': ThresholdsConfigToJSON(value['thresholds']),
        'type': FieldTypeConfigToJSON(value['type']),
        'unit': value['unit'],
        'writeable': value['writeable'],
    };
}

