/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface ErrorResponseBody
 */
export interface ErrorResponseBody {
    /**
     * Error An optional detailed description of the actual error. Only included if running in developer mode.
     * @type {string}
     * @memberof ErrorResponseBody
     */
    error?: string;
    /**
     * a human readable version of the error
     * @type {string}
     * @memberof ErrorResponseBody
     */
    message: string;
    /**
     * Status An optional status to denote the cause of the error.
     * 
     * For example, a 412 Precondition Failed error may include additional information of why that error happened.
     * @type {string}
     * @memberof ErrorResponseBody
     */
    status?: string;
}

/**
 * Check if a given object implements the ErrorResponseBody interface.
 */
export function instanceOfErrorResponseBody(value: object): value is ErrorResponseBody {
    if (!('message' in value) || value['message'] === undefined) return false;
    return true;
}

export function ErrorResponseBodyFromJSON(json: any): ErrorResponseBody {
    return ErrorResponseBodyFromJSONTyped(json, false);
}

export function ErrorResponseBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorResponseBody {
    if (json == null) {
        return json;
    }
    return {
        
        'error': json['error'] == null ? undefined : json['error'],
        'message': json['message'],
        'status': json['status'] == null ? undefined : json['status'],
    };
}

export function ErrorResponseBodyToJSON(json: any): ErrorResponseBody {
    return ErrorResponseBodyToJSONTyped(json, false);
}

export function ErrorResponseBodyToJSONTyped(value?: ErrorResponseBody | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'error': value['error'],
        'message': value['message'],
        'status': value['status'],
    };
}

