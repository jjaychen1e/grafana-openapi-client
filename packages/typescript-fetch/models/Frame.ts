/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Field } from './Field';
import {
    FieldFromJSON,
    FieldFromJSONTyped,
    FieldToJSON,
    FieldToJSONTyped,
} from './Field';
import type { FrameMeta } from './FrameMeta';
import {
    FrameMetaFromJSON,
    FrameMetaFromJSONTyped,
    FrameMetaToJSON,
    FrameMetaToJSONTyped,
} from './FrameMeta';

/**
 * Each Field is well typed by its FieldType and supports optional Labels.
 * 
 * A Frame is a general data container for Grafana. A Frame can be table data
 * or time series data depending on its content and field types.
 * @export
 * @interface Frame
 */
export interface Frame {
    /**
     * Fields are the columns of a frame.
     * All Fields must be of the same the length when marshalling the Frame for transmission.
     * There should be no `nil` entries in the Fields slice (making them pointers was a mistake).
     * @type {Array<Field>}
     * @memberof Frame
     */
    fields?: Array<Field>;
    /**
     * 
     * @type {FrameMeta}
     * @memberof Frame
     */
    meta?: FrameMeta;
    /**
     * Name is used in some Grafana visualizations.
     * @type {string}
     * @memberof Frame
     */
    name?: string;
    /**
     * RefID is a property that can be set to match a Frame to its originating query.
     * @type {string}
     * @memberof Frame
     */
    refID?: string;
}

/**
 * Check if a given object implements the Frame interface.
 */
export function instanceOfFrame(value: object): value is Frame {
    return true;
}

export function FrameFromJSON(json: any): Frame {
    return FrameFromJSONTyped(json, false);
}

export function FrameFromJSONTyped(json: any, ignoreDiscriminator: boolean): Frame {
    if (json == null) {
        return json;
    }
    return {
        
        'fields': json['Fields'] == null ? undefined : ((json['Fields'] as Array<any>).map(FieldFromJSON)),
        'meta': json['Meta'] == null ? undefined : FrameMetaFromJSON(json['Meta']),
        'name': json['Name'] == null ? undefined : json['Name'],
        'refID': json['RefID'] == null ? undefined : json['RefID'],
    };
}

export function FrameToJSON(json: any): Frame {
    return FrameToJSONTyped(json, false);
}

export function FrameToJSONTyped(value?: Frame | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Fields': value['fields'] == null ? undefined : ((value['fields'] as Array<any>).map(FieldToJSON)),
        'Meta': FrameMetaToJSON(value['meta']),
        'Name': value['name'],
        'RefID': value['refID'],
    };
}

