/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { Span } from './Span.js';
import {
    SpanFromJSON,
    SpanFromJSONTyped,
    SpanToJSON,
    SpanToJSONTyped,
} from './Span.js';

/**
 * A FloatHistogram is needed by PromQL to handle operations that might result
 * in fractional counts. Since the counts in a histogram are unlikely to be too
 * large to be represented precisely by a float64, a FloatHistogram can also be
 * used to represent a histogram with integer counts and thus serves as a more
 * generalized representation.
 * @export
 * @interface FloatHistogram
 */
export interface FloatHistogram {
    /**
     * Total number of observations. Must be zero or positive.
     * @type {number}
     * @memberof FloatHistogram
     */
    count?: number;
    /**
     * or alternatively that we are dealing with a gauge histogram, where counter resets do not apply.
     * @type {number}
     * @memberof FloatHistogram
     */
    counterResetHint?: number;
    /**
     * Observation counts in buckets. Each represents an absolute count and
     * must be zero or positive.
     * @type {Array<number>}
     * @memberof FloatHistogram
     */
    positiveBuckets?: Array<number>;
    /**
     * Spans for positive and negative buckets (see Span below).
     * @type {Array<Span>}
     * @memberof FloatHistogram
     */
    positiveSpans?: Array<Span>;
    /**
     * Currently valid schema numbers are -4 <= n <= 8.  They are all for
     * base-2 bucket schemas, where 1 is a bucket boundary in each case, and
     * then each power of two is divided into 2^n logarithmic buckets.  Or
     * in other words, each bucket boundary is the previous boundary times
     * 2^(2^-n).
     * @type {number}
     * @memberof FloatHistogram
     */
    schema?: number;
    /**
     * Sum of observations. This is also used as the stale marker.
     * @type {number}
     * @memberof FloatHistogram
     */
    sum?: number;
    /**
     * Observations falling into the zero bucket. Must be zero or positive.
     * @type {number}
     * @memberof FloatHistogram
     */
    zeroCount?: number;
    /**
     * Width of the zero bucket.
     * @type {number}
     * @memberof FloatHistogram
     */
    zeroThreshold?: number;
}

/**
 * Check if a given object implements the FloatHistogram interface.
 */
export function instanceOfFloatHistogram(value: object): value is FloatHistogram {
    return true;
}

export function FloatHistogramFromJSON(json: any): FloatHistogram {
    return FloatHistogramFromJSONTyped(json, false);
}

export function FloatHistogramFromJSONTyped(json: any, ignoreDiscriminator: boolean): FloatHistogram {
    if (json == null) {
        return json;
    }
    return {
        
        'count': json['Count'] == null ? undefined : json['Count'],
        'counterResetHint': json['CounterResetHint'] == null ? undefined : json['CounterResetHint'],
        'positiveBuckets': json['PositiveBuckets'] == null ? undefined : json['PositiveBuckets'],
        'positiveSpans': json['PositiveSpans'] == null ? undefined : ((json['PositiveSpans'] as Array<any>).map(SpanFromJSON)),
        'schema': json['Schema'] == null ? undefined : json['Schema'],
        'sum': json['Sum'] == null ? undefined : json['Sum'],
        'zeroCount': json['ZeroCount'] == null ? undefined : json['ZeroCount'],
        'zeroThreshold': json['ZeroThreshold'] == null ? undefined : json['ZeroThreshold'],
    };
}

export function FloatHistogramToJSON(json: any): FloatHistogram {
    return FloatHistogramToJSONTyped(json, false);
}

export function FloatHistogramToJSONTyped(value?: FloatHistogram | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Count': value['count'],
        'CounterResetHint': value['counterResetHint'],
        'PositiveBuckets': value['positiveBuckets'],
        'PositiveSpans': value['positiveSpans'] == null ? undefined : ((value['positiveSpans'] as Array<any>).map(SpanToJSON)),
        'Schema': value['schema'],
        'Sum': value['sum'],
        'ZeroCount': value['zeroCount'],
        'ZeroThreshold': value['zeroThreshold'],
    };
}

