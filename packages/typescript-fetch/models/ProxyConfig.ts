/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { URL } from './URL.js';
import {
    URLFromJSON,
    URLFromJSONTyped,
    URLToJSON,
    URLToJSONTyped,
} from './URL.js';

/**
 * 
 * @export
 * @interface ProxyConfig
 */
export interface ProxyConfig {
    /**
     * NoProxy contains addresses that should not use a proxy.
     * @type {string}
     * @memberof ProxyConfig
     */
    noProxy?: string;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ProxyConfig
     */
    proxyConnectHeader?: { [key: string]: Array<string>; };
    /**
     * ProxyFromEnvironment makes use of net/http ProxyFromEnvironment function
     * to determine proxies.
     * @type {boolean}
     * @memberof ProxyConfig
     */
    proxyFromEnvironment?: boolean;
    /**
     * 
     * @type {URL}
     * @memberof ProxyConfig
     */
    proxyUrl?: URL;
}

/**
 * Check if a given object implements the ProxyConfig interface.
 */
export function instanceOfProxyConfig(value: object): value is ProxyConfig {
    return true;
}

export function ProxyConfigFromJSON(json: any): ProxyConfig {
    return ProxyConfigFromJSONTyped(json, false);
}

export function ProxyConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProxyConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'noProxy': json['no_proxy'] == null ? undefined : json['no_proxy'],
        'proxyConnectHeader': json['proxy_connect_header'] == null ? undefined : json['proxy_connect_header'],
        'proxyFromEnvironment': json['proxy_from_environment'] == null ? undefined : json['proxy_from_environment'],
        'proxyUrl': json['proxy_url'] == null ? undefined : URLFromJSON(json['proxy_url']),
    };
}

export function ProxyConfigToJSON(json: any): ProxyConfig {
    return ProxyConfigToJSONTyped(json, false);
}

export function ProxyConfigToJSONTyped(value?: ProxyConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'no_proxy': value['noProxy'],
        'proxy_connect_header': value['proxyConnectHeader'],
        'proxy_from_environment': value['proxyFromEnvironment'],
        'proxy_url': URLToJSON(value['proxyUrl']),
    };
}

