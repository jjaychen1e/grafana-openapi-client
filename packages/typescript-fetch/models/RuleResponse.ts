/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { RuleDiscovery } from './RuleDiscovery.js';
import {
    RuleDiscoveryFromJSON,
    RuleDiscoveryFromJSONTyped,
    RuleDiscoveryToJSON,
    RuleDiscoveryToJSONTyped,
} from './RuleDiscovery.js';

/**
 * 
 * @export
 * @interface RuleResponse
 */
export interface RuleResponse {
    /**
     * 
     * @type {RuleDiscovery}
     * @memberof RuleResponse
     */
    data?: RuleDiscovery;
    /**
     * 
     * @type {string}
     * @memberof RuleResponse
     */
    error?: string;
    /**
     * 
     * @type {string}
     * @memberof RuleResponse
     */
    errorType?: string;
    /**
     * 
     * @type {string}
     * @memberof RuleResponse
     */
    status: string;
}

/**
 * Check if a given object implements the RuleResponse interface.
 */
export function instanceOfRuleResponse(value: object): value is RuleResponse {
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function RuleResponseFromJSON(json: any): RuleResponse {
    return RuleResponseFromJSONTyped(json, false);
}

export function RuleResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): RuleResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'data': json['data'] == null ? undefined : RuleDiscoveryFromJSON(json['data']),
        'error': json['error'] == null ? undefined : json['error'],
        'errorType': json['errorType'] == null ? undefined : json['errorType'],
        'status': json['status'],
    };
}

export function RuleResponseToJSON(json: any): RuleResponse {
    return RuleResponseToJSONTyped(json, false);
}

export function RuleResponseToJSONTyped(value?: RuleResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'data': RuleDiscoveryToJSON(value['data']),
        'error': value['error'],
        'errorType': value['errorType'],
        'status': value['status'],
    };
}

