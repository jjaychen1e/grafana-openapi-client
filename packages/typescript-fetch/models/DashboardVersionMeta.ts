/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * DashboardVersionMeta extends the DashboardVersionDTO with the names
 * associated with the UserIds, overriding the field with the same name from
 * the DashboardVersionDTO model.
 * @export
 * @interface DashboardVersionMeta
 */
export interface DashboardVersionMeta {
    /**
     * 
     * @type {Date}
     * @memberof DashboardVersionMeta
     */
    created?: Date;
    /**
     * 
     * @type {string}
     * @memberof DashboardVersionMeta
     */
    createdBy?: string;
    /**
     * 
     * @type {number}
     * @memberof DashboardVersionMeta
     */
    dashboardId?: number;
    /**
     * 
     * @type {object}
     * @memberof DashboardVersionMeta
     */
    data?: object;
    /**
     * 
     * @type {number}
     * @memberof DashboardVersionMeta
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof DashboardVersionMeta
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof DashboardVersionMeta
     */
    parentVersion?: number;
    /**
     * 
     * @type {number}
     * @memberof DashboardVersionMeta
     */
    restoredFrom?: number;
    /**
     * 
     * @type {string}
     * @memberof DashboardVersionMeta
     */
    uid?: string;
    /**
     * 
     * @type {number}
     * @memberof DashboardVersionMeta
     */
    version?: number;
}

/**
 * Check if a given object implements the DashboardVersionMeta interface.
 */
export function instanceOfDashboardVersionMeta(value: object): value is DashboardVersionMeta {
    return true;
}

export function DashboardVersionMetaFromJSON(json: any): DashboardVersionMeta {
    return DashboardVersionMetaFromJSONTyped(json, false);
}

export function DashboardVersionMetaFromJSONTyped(json: any, ignoreDiscriminator: boolean): DashboardVersionMeta {
    if (json == null) {
        return json;
    }
    return {
        
        'created': json['created'] == null ? undefined : (new Date(json['created'])),
        'createdBy': json['createdBy'] == null ? undefined : json['createdBy'],
        'dashboardId': json['dashboardId'] == null ? undefined : json['dashboardId'],
        'data': json['data'] == null ? undefined : json['data'],
        'id': json['id'] == null ? undefined : json['id'],
        'message': json['message'] == null ? undefined : json['message'],
        'parentVersion': json['parentVersion'] == null ? undefined : json['parentVersion'],
        'restoredFrom': json['restoredFrom'] == null ? undefined : json['restoredFrom'],
        'uid': json['uid'] == null ? undefined : json['uid'],
        'version': json['version'] == null ? undefined : json['version'],
    };
}

export function DashboardVersionMetaToJSON(json: any): DashboardVersionMeta {
    return DashboardVersionMetaToJSONTyped(json, false);
}

export function DashboardVersionMetaToJSONTyped(value?: DashboardVersionMeta | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'created': value['created'] == null ? undefined : ((value['created']).toISOString()),
        'createdBy': value['createdBy'],
        'dashboardId': value['dashboardId'],
        'data': value['data'],
        'id': value['id'],
        'message': value['message'],
        'parentVersion': value['parentVersion'],
        'restoredFrom': value['restoredFrom'],
        'uid': value['uid'],
        'version': value['version'],
    };
}

