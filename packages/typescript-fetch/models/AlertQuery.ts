/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RelativeTimeRange } from './RelativeTimeRange';
import {
    RelativeTimeRangeFromJSON,
    RelativeTimeRangeFromJSONTyped,
    RelativeTimeRangeToJSON,
    RelativeTimeRangeToJSONTyped,
} from './RelativeTimeRange';

/**
 * 
 * @export
 * @interface AlertQuery
 */
export interface AlertQuery {
    /**
     * Grafana data source unique identifier; it should be '__expr__' for a Server Side Expression operation.
     * @type {string}
     * @memberof AlertQuery
     */
    datasourceUid?: string;
    /**
     * JSON is the raw JSON query and includes the above properties as well as custom properties.
     * @type {object}
     * @memberof AlertQuery
     */
    model?: object;
    /**
     * QueryType is an optional identifier for the type of query.
     * It can be used to distinguish different types of queries.
     * @type {string}
     * @memberof AlertQuery
     */
    queryType?: string;
    /**
     * RefID is the unique identifier of the query, set by the frontend call.
     * @type {string}
     * @memberof AlertQuery
     */
    refId?: string;
    /**
     * 
     * @type {RelativeTimeRange}
     * @memberof AlertQuery
     */
    relativeTimeRange?: RelativeTimeRange;
}

/**
 * Check if a given object implements the AlertQuery interface.
 */
export function instanceOfAlertQuery(value: object): value is AlertQuery {
    return true;
}

export function AlertQueryFromJSON(json: any): AlertQuery {
    return AlertQueryFromJSONTyped(json, false);
}

export function AlertQueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): AlertQuery {
    if (json == null) {
        return json;
    }
    return {
        
        'datasourceUid': json['datasourceUid'] == null ? undefined : json['datasourceUid'],
        'model': json['model'] == null ? undefined : json['model'],
        'queryType': json['queryType'] == null ? undefined : json['queryType'],
        'refId': json['refId'] == null ? undefined : json['refId'],
        'relativeTimeRange': json['relativeTimeRange'] == null ? undefined : RelativeTimeRangeFromJSON(json['relativeTimeRange']),
    };
}

export function AlertQueryToJSON(json: any): AlertQuery {
    return AlertQueryToJSONTyped(json, false);
}

export function AlertQueryToJSONTyped(value?: AlertQuery | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'datasourceUid': value['datasourceUid'],
        'model': value['model'],
        'queryType': value['queryType'],
        'refId': value['refId'],
        'relativeTimeRange': RelativeTimeRangeToJSON(value['relativeTimeRange']),
    };
}

