/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface ReportBrandingOptions
 */
export interface ReportBrandingOptions {
    /**
     * 
     * @type {string}
     * @memberof ReportBrandingOptions
     */
    emailFooterLink?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportBrandingOptions
     */
    emailFooterMode?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportBrandingOptions
     */
    emailFooterText?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportBrandingOptions
     */
    emailLogoUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportBrandingOptions
     */
    reportLogoUrl?: string;
}

/**
 * Check if a given object implements the ReportBrandingOptions interface.
 */
export function instanceOfReportBrandingOptions(value: object): value is ReportBrandingOptions {
    return true;
}

export function ReportBrandingOptionsFromJSON(json: any): ReportBrandingOptions {
    return ReportBrandingOptionsFromJSONTyped(json, false);
}

export function ReportBrandingOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportBrandingOptions {
    if (json == null) {
        return json;
    }
    return {
        
        'emailFooterLink': json['emailFooterLink'] == null ? undefined : json['emailFooterLink'],
        'emailFooterMode': json['emailFooterMode'] == null ? undefined : json['emailFooterMode'],
        'emailFooterText': json['emailFooterText'] == null ? undefined : json['emailFooterText'],
        'emailLogoUrl': json['emailLogoUrl'] == null ? undefined : json['emailLogoUrl'],
        'reportLogoUrl': json['reportLogoUrl'] == null ? undefined : json['reportLogoUrl'],
    };
}

export function ReportBrandingOptionsToJSON(json: any): ReportBrandingOptions {
    return ReportBrandingOptionsToJSONTyped(json, false);
}

export function ReportBrandingOptionsToJSONTyped(value?: ReportBrandingOptions | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'emailFooterLink': value['emailFooterLink'],
        'emailFooterMode': value['emailFooterMode'],
        'emailFooterText': value['emailFooterText'],
        'emailLogoUrl': value['emailLogoUrl'],
        'reportLogoUrl': value['reportLogoUrl'],
    };
}

