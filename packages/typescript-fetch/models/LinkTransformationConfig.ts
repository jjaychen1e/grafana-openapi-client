/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface LinkTransformationConfig
 */
export interface LinkTransformationConfig {
    /**
     * 
     * @type {string}
     * @memberof LinkTransformationConfig
     */
    expression?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkTransformationConfig
     */
    field?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkTransformationConfig
     */
    mapValue?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkTransformationConfig
     */
    type?: string;
}

/**
 * Check if a given object implements the LinkTransformationConfig interface.
 */
export function instanceOfLinkTransformationConfig(value: object): value is LinkTransformationConfig {
    return true;
}

export function LinkTransformationConfigFromJSON(json: any): LinkTransformationConfig {
    return LinkTransformationConfigFromJSONTyped(json, false);
}

export function LinkTransformationConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): LinkTransformationConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'expression': json['expression'] == null ? undefined : json['expression'],
        'field': json['field'] == null ? undefined : json['field'],
        'mapValue': json['mapValue'] == null ? undefined : json['mapValue'],
        'type': json['type'] == null ? undefined : json['type'],
    };
}

export function LinkTransformationConfigToJSON(json: any): LinkTransformationConfig {
    return LinkTransformationConfigToJSONTyped(json, false);
}

export function LinkTransformationConfigToJSONTyped(value?: LinkTransformationConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'expression': value['expression'],
        'field': value['field'],
        'mapValue': value['mapValue'],
        'type': value['type'],
    };
}

