/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PostableAlert } from './PostableAlert';
import {
    PostableAlertFromJSON,
    PostableAlertFromJSONTyped,
    PostableAlertToJSON,
    PostableAlertToJSONTyped,
} from './PostableAlert';

/**
 * 
 * @export
 * @interface TestTemplatesConfigBodyParams
 */
export interface TestTemplatesConfigBodyParams {
    /**
     * Alerts to use as data when testing the template.
     * @type {Array<PostableAlert>}
     * @memberof TestTemplatesConfigBodyParams
     */
    alerts?: Array<PostableAlert>;
    /**
     * Name of the template file.
     * @type {string}
     * @memberof TestTemplatesConfigBodyParams
     */
    name?: string;
    /**
     * Template string to test.
     * @type {string}
     * @memberof TestTemplatesConfigBodyParams
     */
    template?: string;
}

/**
 * Check if a given object implements the TestTemplatesConfigBodyParams interface.
 */
export function instanceOfTestTemplatesConfigBodyParams(value: object): value is TestTemplatesConfigBodyParams {
    return true;
}

export function TestTemplatesConfigBodyParamsFromJSON(json: any): TestTemplatesConfigBodyParams {
    return TestTemplatesConfigBodyParamsFromJSONTyped(json, false);
}

export function TestTemplatesConfigBodyParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TestTemplatesConfigBodyParams {
    if (json == null) {
        return json;
    }
    return {
        
        'alerts': json['alerts'] == null ? undefined : ((json['alerts'] as Array<any>).map(PostableAlertFromJSON)),
        'name': json['name'] == null ? undefined : json['name'],
        'template': json['template'] == null ? undefined : json['template'],
    };
}

export function TestTemplatesConfigBodyParamsToJSON(json: any): TestTemplatesConfigBodyParams {
    return TestTemplatesConfigBodyParamsToJSONTyped(json, false);
}

export function TestTemplatesConfigBodyParamsToJSONTyped(value?: TestTemplatesConfigBodyParams | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'alerts': value['alerts'] == null ? undefined : ((value['alerts'] as Array<any>).map(PostableAlertToJSON)),
        'name': value['name'],
        'template': value['template'],
    };
}

