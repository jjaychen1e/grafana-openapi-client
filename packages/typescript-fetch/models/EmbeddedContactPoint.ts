/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * EmbeddedContactPoint is the contact point type that is used
 * by grafanas embedded alertmanager implementation.
 * @export
 * @interface EmbeddedContactPoint
 */
export interface EmbeddedContactPoint {
    /**
     * 
     * @type {boolean}
     * @memberof EmbeddedContactPoint
     */
    disableResolveMessage?: boolean;
    /**
     * Name is used as grouping key in the UI. Contact points with the
     * same name will be grouped in the UI.
     * @type {string}
     * @memberof EmbeddedContactPoint
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedContactPoint
     */
    readonly provenance?: string;
    /**
     * 
     * @type {object}
     * @memberof EmbeddedContactPoint
     */
    settings: object;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedContactPoint
     */
    type: EmbeddedContactPointTypeEnum;
    /**
     * UID is the unique identifier of the contact point. The UID can be
     * set by the user.
     * @type {string}
     * @memberof EmbeddedContactPoint
     */
    uid?: string;
}


/**
 * @export
 */
export const EmbeddedContactPointTypeEnum = {
    Alertmanager: 'alertmanager',
    Dingding: ' dingding',
    Discord: ' discord',
    Email: ' email',
    Googlechat: ' googlechat',
    Kafka: ' kafka',
    Line: ' line',
    Opsgenie: ' opsgenie',
    Pagerduty: ' pagerduty',
    Pushover: ' pushover',
    Sensugo: ' sensugo',
    Slack: ' slack',
    Teams: ' teams',
    Telegram: ' telegram',
    Threema: ' threema',
    Victorops: ' victorops',
    Webhook: ' webhook',
    Wecom: ' wecom'
} as const;
export type EmbeddedContactPointTypeEnum = typeof EmbeddedContactPointTypeEnum[keyof typeof EmbeddedContactPointTypeEnum];


/**
 * Check if a given object implements the EmbeddedContactPoint interface.
 */
export function instanceOfEmbeddedContactPoint(value: object): value is EmbeddedContactPoint {
    if (!('settings' in value) || value['settings'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function EmbeddedContactPointFromJSON(json: any): EmbeddedContactPoint {
    return EmbeddedContactPointFromJSONTyped(json, false);
}

export function EmbeddedContactPointFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmbeddedContactPoint {
    if (json == null) {
        return json;
    }
    return {
        
        'disableResolveMessage': json['disableResolveMessage'] == null ? undefined : json['disableResolveMessage'],
        'name': json['name'] == null ? undefined : json['name'],
        'provenance': json['provenance'] == null ? undefined : json['provenance'],
        'settings': json['settings'],
        'type': json['type'],
        'uid': json['uid'] == null ? undefined : json['uid'],
    };
}

export function EmbeddedContactPointToJSON(json: any): EmbeddedContactPoint {
    return EmbeddedContactPointToJSONTyped(json, false);
}

export function EmbeddedContactPointToJSONTyped(value?: Omit<EmbeddedContactPoint, 'provenance'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'disableResolveMessage': value['disableResolveMessage'],
        'name': value['name'],
        'settings': value['settings'],
        'type': value['type'],
        'uid': value['uid'],
    };
}

