/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface TokenDTO
 */
export interface TokenDTO {
    /**
     * 
     * @type {Date}
     * @memberof TokenDTO
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TokenDTO
     */
    expiration?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof TokenDTO
     */
    hasExpired?: boolean;
    /**
     * 
     * @type {number}
     * @memberof TokenDTO
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TokenDTO
     */
    isRevoked?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof TokenDTO
     */
    lastUsedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof TokenDTO
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof TokenDTO
     */
    secondsUntilExpiration?: number;
}

/**
 * Check if a given object implements the TokenDTO interface.
 */
export function instanceOfTokenDTO(value: object): value is TokenDTO {
    return true;
}

export function TokenDTOFromJSON(json: any): TokenDTO {
    return TokenDTOFromJSONTyped(json, false);
}

export function TokenDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokenDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'created': json['created'] == null ? undefined : (new Date(json['created'])),
        'expiration': json['expiration'] == null ? undefined : (new Date(json['expiration'])),
        'hasExpired': json['hasExpired'] == null ? undefined : json['hasExpired'],
        'id': json['id'] == null ? undefined : json['id'],
        'isRevoked': json['isRevoked'] == null ? undefined : json['isRevoked'],
        'lastUsedAt': json['lastUsedAt'] == null ? undefined : (new Date(json['lastUsedAt'])),
        'name': json['name'] == null ? undefined : json['name'],
        'secondsUntilExpiration': json['secondsUntilExpiration'] == null ? undefined : json['secondsUntilExpiration'],
    };
}

export function TokenDTOToJSON(json: any): TokenDTO {
    return TokenDTOToJSONTyped(json, false);
}

export function TokenDTOToJSONTyped(value?: TokenDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'created': value['created'] == null ? undefined : ((value['created']).toISOString()),
        'expiration': value['expiration'] == null ? undefined : ((value['expiration']).toISOString()),
        'hasExpired': value['hasExpired'],
        'id': value['id'],
        'isRevoked': value['isRevoked'],
        'lastUsedAt': value['lastUsedAt'] == null ? undefined : ((value['lastUsedAt']).toISOString()),
        'name': value['name'],
        'secondsUntilExpiration': value['secondsUntilExpiration'],
    };
}

