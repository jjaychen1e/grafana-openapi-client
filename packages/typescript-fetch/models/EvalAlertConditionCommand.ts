/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AlertQuery } from './AlertQuery';
import {
    AlertQueryFromJSON,
    AlertQueryFromJSONTyped,
    AlertQueryToJSON,
    AlertQueryToJSONTyped,
} from './AlertQuery';

/**
 * EvalAlertConditionCommand is the command for evaluating a condition
 * @export
 * @interface EvalAlertConditionCommand
 */
export interface EvalAlertConditionCommand {
    /**
     * 
     * @type {string}
     * @memberof EvalAlertConditionCommand
     */
    condition?: string;
    /**
     * 
     * @type {Array<AlertQuery>}
     * @memberof EvalAlertConditionCommand
     */
    data?: Array<AlertQuery>;
    /**
     * 
     * @type {Date}
     * @memberof EvalAlertConditionCommand
     */
    now?: Date;
}

/**
 * Check if a given object implements the EvalAlertConditionCommand interface.
 */
export function instanceOfEvalAlertConditionCommand(value: object): value is EvalAlertConditionCommand {
    return true;
}

export function EvalAlertConditionCommandFromJSON(json: any): EvalAlertConditionCommand {
    return EvalAlertConditionCommandFromJSONTyped(json, false);
}

export function EvalAlertConditionCommandFromJSONTyped(json: any, ignoreDiscriminator: boolean): EvalAlertConditionCommand {
    if (json == null) {
        return json;
    }
    return {
        
        'condition': json['condition'] == null ? undefined : json['condition'],
        'data': json['data'] == null ? undefined : ((json['data'] as Array<any>).map(AlertQueryFromJSON)),
        'now': json['now'] == null ? undefined : (new Date(json['now'])),
    };
}

export function EvalAlertConditionCommandToJSON(json: any): EvalAlertConditionCommand {
    return EvalAlertConditionCommandToJSONTyped(json, false);
}

export function EvalAlertConditionCommandToJSONTyped(value?: EvalAlertConditionCommand | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'condition': value['condition'],
        'data': value['data'] == null ? undefined : ((value['data'] as Array<any>).map(AlertQueryToJSON)),
        'now': value['now'] == null ? undefined : ((value['now']).toISOString()),
    };
}

