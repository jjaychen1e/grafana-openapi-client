/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Config defines the internal representation of a cache configuration, including fields not set by the API caller
 * @export
 * @interface CacheConfig
 */
export interface CacheConfig {
    /**
     * 
     * @type {Date}
     * @memberof CacheConfig
     */
    created?: Date;
    /**
     * Fields that can be set by the API caller - read/write
     * @type {number}
     * @memberof CacheConfig
     */
    dataSourceID?: number;
    /**
     * 
     * @type {string}
     * @memberof CacheConfig
     */
    dataSourceUID?: string;
    /**
     * These are returned by the HTTP API, but are managed internally - read-only
     * Note: 'created' and 'updated' are special properties managed automatically by xorm, but we are setting them manually
     * @type {number}
     * @memberof CacheConfig
     */
    defaultTTLMs?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CacheConfig
     */
    enabled?: boolean;
    /**
     * TTL MS, or "time to live", is how long a cached item will stay in the cache before it is removed (in milliseconds)
     * @type {number}
     * @memberof CacheConfig
     */
    ttlQueriesMs?: number;
    /**
     * 
     * @type {number}
     * @memberof CacheConfig
     */
    ttlResourcesMs?: number;
    /**
     * 
     * @type {Date}
     * @memberof CacheConfig
     */
    updated?: Date;
    /**
     * If UseDefaultTTL is enabled, then the TTLQueriesMS and TTLResourcesMS in this object is always sent as the default TTL located in grafana.ini
     * @type {boolean}
     * @memberof CacheConfig
     */
    useDefaultTTL?: boolean;
}

/**
 * Check if a given object implements the CacheConfig interface.
 */
export function instanceOfCacheConfig(value: object): value is CacheConfig {
    return true;
}

export function CacheConfigFromJSON(json: any): CacheConfig {
    return CacheConfigFromJSONTyped(json, false);
}

export function CacheConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): CacheConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'created': json['created'] == null ? undefined : (new Date(json['created'])),
        'dataSourceID': json['dataSourceID'] == null ? undefined : json['dataSourceID'],
        'dataSourceUID': json['dataSourceUID'] == null ? undefined : json['dataSourceUID'],
        'defaultTTLMs': json['defaultTTLMs'] == null ? undefined : json['defaultTTLMs'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'ttlQueriesMs': json['ttlQueriesMs'] == null ? undefined : json['ttlQueriesMs'],
        'ttlResourcesMs': json['ttlResourcesMs'] == null ? undefined : json['ttlResourcesMs'],
        'updated': json['updated'] == null ? undefined : (new Date(json['updated'])),
        'useDefaultTTL': json['useDefaultTTL'] == null ? undefined : json['useDefaultTTL'],
    };
}

export function CacheConfigToJSON(json: any): CacheConfig {
    return CacheConfigToJSONTyped(json, false);
}

export function CacheConfigToJSONTyped(value?: CacheConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'created': value['created'] == null ? undefined : ((value['created']).toISOString()),
        'dataSourceID': value['dataSourceID'],
        'dataSourceUID': value['dataSourceUID'],
        'defaultTTLMs': value['defaultTTLMs'],
        'enabled': value['enabled'],
        'ttlQueriesMs': value['ttlQueriesMs'],
        'ttlResourcesMs': value['ttlResourcesMs'],
        'updated': value['updated'] == null ? undefined : ((value['updated']).toISOString()),
        'useDefaultTTL': value['useDefaultTTL'],
    };
}

