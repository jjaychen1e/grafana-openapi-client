/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * +k8s:deepcopy-gen=false
 * @export
 * @interface TypeMeta
 */
export interface TypeMeta {
    /**
     * APIVersion defines the versioned schema of this representation of an object.
     * Servers should convert recognized schemas to the latest internal value, and
     * may reject unrecognized values.
     * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * +optional
     * @type {string}
     * @memberof TypeMeta
     */
    apiVersion?: string;
    /**
     * Kind is a string value representing the REST resource this object represents.
     * Servers may infer this from the endpoint the client submits requests to.
     * Cannot be updated.
     * In CamelCase.
     * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * +optional
     * @type {string}
     * @memberof TypeMeta
     */
    kind?: string;
}

/**
 * Check if a given object implements the TypeMeta interface.
 */
export function instanceOfTypeMeta(value: object): value is TypeMeta {
    return true;
}

export function TypeMetaFromJSON(json: any): TypeMeta {
    return TypeMetaFromJSONTyped(json, false);
}

export function TypeMetaFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypeMeta {
    if (json == null) {
        return json;
    }
    return {
        
        'apiVersion': json['apiVersion'] == null ? undefined : json['apiVersion'],
        'kind': json['kind'] == null ? undefined : json['kind'],
    };
}

export function TypeMetaToJSON(json: any): TypeMeta {
    return TypeMetaToJSONTyped(json, false);
}

export function TypeMetaToJSONTyped(value?: TypeMeta | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'apiVersion': value['apiVersion'],
        'kind': value['kind'],
    };
}

