/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReportDashboard } from './ReportDashboard';
import {
    ReportDashboardFromJSON,
    ReportDashboardFromJSONTyped,
    ReportDashboardToJSON,
    ReportDashboardToJSONTyped,
} from './ReportDashboard';
import type { ReportSchedule } from './ReportSchedule';
import {
    ReportScheduleFromJSON,
    ReportScheduleFromJSONTyped,
    ReportScheduleToJSON,
    ReportScheduleToJSONTyped,
} from './ReportSchedule';
import type { ReportOptions } from './ReportOptions';
import {
    ReportOptionsFromJSON,
    ReportOptionsFromJSONTyped,
    ReportOptionsToJSON,
    ReportOptionsToJSONTyped,
} from './ReportOptions';

/**
 * 
 * @export
 * @interface CreateOrUpdateReportConfig
 */
export interface CreateOrUpdateReportConfig {
    /**
     * 
     * @type {Array<ReportDashboard>}
     * @memberof CreateOrUpdateReportConfig
     */
    dashboards?: Array<ReportDashboard>;
    /**
     * 
     * @type {boolean}
     * @memberof CreateOrUpdateReportConfig
     */
    enableCsv?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateOrUpdateReportConfig
     */
    enableDashboardUrl?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateOrUpdateReportConfig
     */
    formats?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateReportConfig
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateReportConfig
     */
    name?: string;
    /**
     * 
     * @type {ReportOptions}
     * @memberof CreateOrUpdateReportConfig
     */
    options?: ReportOptions;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateReportConfig
     */
    recipients?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateReportConfig
     */
    replyTo?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdateReportConfig
     */
    scaleFactor?: number;
    /**
     * 
     * @type {ReportSchedule}
     * @memberof CreateOrUpdateReportConfig
     */
    schedule?: ReportSchedule;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateReportConfig
     */
    state?: string;
}

/**
 * Check if a given object implements the CreateOrUpdateReportConfig interface.
 */
export function instanceOfCreateOrUpdateReportConfig(value: object): value is CreateOrUpdateReportConfig {
    return true;
}

export function CreateOrUpdateReportConfigFromJSON(json: any): CreateOrUpdateReportConfig {
    return CreateOrUpdateReportConfigFromJSONTyped(json, false);
}

export function CreateOrUpdateReportConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateOrUpdateReportConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'dashboards': json['dashboards'] == null ? undefined : ((json['dashboards'] as Array<any>).map(ReportDashboardFromJSON)),
        'enableCsv': json['enableCsv'] == null ? undefined : json['enableCsv'],
        'enableDashboardUrl': json['enableDashboardUrl'] == null ? undefined : json['enableDashboardUrl'],
        'formats': json['formats'] == null ? undefined : json['formats'],
        'message': json['message'] == null ? undefined : json['message'],
        'name': json['name'] == null ? undefined : json['name'],
        'options': json['options'] == null ? undefined : ReportOptionsFromJSON(json['options']),
        'recipients': json['recipients'] == null ? undefined : json['recipients'],
        'replyTo': json['replyTo'] == null ? undefined : json['replyTo'],
        'scaleFactor': json['scaleFactor'] == null ? undefined : json['scaleFactor'],
        'schedule': json['schedule'] == null ? undefined : ReportScheduleFromJSON(json['schedule']),
        'state': json['state'] == null ? undefined : json['state'],
    };
}

export function CreateOrUpdateReportConfigToJSON(json: any): CreateOrUpdateReportConfig {
    return CreateOrUpdateReportConfigToJSONTyped(json, false);
}

export function CreateOrUpdateReportConfigToJSONTyped(value?: CreateOrUpdateReportConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'dashboards': value['dashboards'] == null ? undefined : ((value['dashboards'] as Array<any>).map(ReportDashboardToJSON)),
        'enableCsv': value['enableCsv'],
        'enableDashboardUrl': value['enableDashboardUrl'],
        'formats': value['formats'],
        'message': value['message'],
        'name': value['name'],
        'options': ReportOptionsToJSON(value['options']),
        'recipients': value['recipients'],
        'replyTo': value['replyTo'],
        'scaleFactor': value['scaleFactor'],
        'schedule': ReportScheduleToJSON(value['schedule']),
        'state': value['state'],
    };
}

