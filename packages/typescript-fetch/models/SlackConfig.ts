/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SlackField } from './SlackField';
import {
    SlackFieldFromJSON,
    SlackFieldFromJSONTyped,
    SlackFieldToJSON,
    SlackFieldToJSONTyped,
} from './SlackField';
import type { SlackAction } from './SlackAction';
import {
    SlackActionFromJSON,
    SlackActionFromJSONTyped,
    SlackActionToJSON,
    SlackActionToJSONTyped,
} from './SlackAction';
import type { HTTPClientConfig } from './HTTPClientConfig';
import {
    HTTPClientConfigFromJSON,
    HTTPClientConfigFromJSONTyped,
    HTTPClientConfigToJSON,
    HTTPClientConfigToJSONTyped,
} from './HTTPClientConfig';
import type { URL } from './URL';
import {
    URLFromJSON,
    URLFromJSONTyped,
    URLToJSON,
    URLToJSONTyped,
} from './URL';

/**
 * 
 * @export
 * @interface SlackConfig
 */
export interface SlackConfig {
    /**
     * 
     * @type {Array<SlackAction>}
     * @memberof SlackConfig
     */
    actions?: Array<SlackAction>;
    /**
     * 
     * @type {URL}
     * @memberof SlackConfig
     */
    apiUrl?: URL;
    /**
     * 
     * @type {string}
     * @memberof SlackConfig
     */
    apiUrlFile?: string;
    /**
     * 
     * @type {string}
     * @memberof SlackConfig
     */
    callbackId?: string;
    /**
     * Slack channel override, (like #other-channel or @username).
     * @type {string}
     * @memberof SlackConfig
     */
    channel?: string;
    /**
     * 
     * @type {string}
     * @memberof SlackConfig
     */
    color?: string;
    /**
     * 
     * @type {string}
     * @memberof SlackConfig
     */
    fallback?: string;
    /**
     * 
     * @type {Array<SlackField>}
     * @memberof SlackConfig
     */
    fields?: Array<SlackField>;
    /**
     * 
     * @type {string}
     * @memberof SlackConfig
     */
    footer?: string;
    /**
     * 
     * @type {HTTPClientConfig}
     * @memberof SlackConfig
     */
    httpConfig?: HTTPClientConfig;
    /**
     * 
     * @type {string}
     * @memberof SlackConfig
     */
    iconEmoji?: string;
    /**
     * 
     * @type {string}
     * @memberof SlackConfig
     */
    iconUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof SlackConfig
     */
    imageUrl?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SlackConfig
     */
    linkNames?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlackConfig
     */
    mrkdwnIn?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SlackConfig
     */
    pretext?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SlackConfig
     */
    sendResolved?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SlackConfig
     */
    shortFields?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SlackConfig
     */
    text?: string;
    /**
     * 
     * @type {string}
     * @memberof SlackConfig
     */
    thumbUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof SlackConfig
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SlackConfig
     */
    titleLink?: string;
    /**
     * 
     * @type {string}
     * @memberof SlackConfig
     */
    username?: string;
}

/**
 * Check if a given object implements the SlackConfig interface.
 */
export function instanceOfSlackConfig(value: object): value is SlackConfig {
    return true;
}

export function SlackConfigFromJSON(json: any): SlackConfig {
    return SlackConfigFromJSONTyped(json, false);
}

export function SlackConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): SlackConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'actions': json['actions'] == null ? undefined : ((json['actions'] as Array<any>).map(SlackActionFromJSON)),
        'apiUrl': json['api_url'] == null ? undefined : URLFromJSON(json['api_url']),
        'apiUrlFile': json['api_url_file'] == null ? undefined : json['api_url_file'],
        'callbackId': json['callback_id'] == null ? undefined : json['callback_id'],
        'channel': json['channel'] == null ? undefined : json['channel'],
        'color': json['color'] == null ? undefined : json['color'],
        'fallback': json['fallback'] == null ? undefined : json['fallback'],
        'fields': json['fields'] == null ? undefined : ((json['fields'] as Array<any>).map(SlackFieldFromJSON)),
        'footer': json['footer'] == null ? undefined : json['footer'],
        'httpConfig': json['http_config'] == null ? undefined : HTTPClientConfigFromJSON(json['http_config']),
        'iconEmoji': json['icon_emoji'] == null ? undefined : json['icon_emoji'],
        'iconUrl': json['icon_url'] == null ? undefined : json['icon_url'],
        'imageUrl': json['image_url'] == null ? undefined : json['image_url'],
        'linkNames': json['link_names'] == null ? undefined : json['link_names'],
        'mrkdwnIn': json['mrkdwn_in'] == null ? undefined : json['mrkdwn_in'],
        'pretext': json['pretext'] == null ? undefined : json['pretext'],
        'sendResolved': json['send_resolved'] == null ? undefined : json['send_resolved'],
        'shortFields': json['short_fields'] == null ? undefined : json['short_fields'],
        'text': json['text'] == null ? undefined : json['text'],
        'thumbUrl': json['thumb_url'] == null ? undefined : json['thumb_url'],
        'title': json['title'] == null ? undefined : json['title'],
        'titleLink': json['title_link'] == null ? undefined : json['title_link'],
        'username': json['username'] == null ? undefined : json['username'],
    };
}

export function SlackConfigToJSON(json: any): SlackConfig {
    return SlackConfigToJSONTyped(json, false);
}

export function SlackConfigToJSONTyped(value?: SlackConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'actions': value['actions'] == null ? undefined : ((value['actions'] as Array<any>).map(SlackActionToJSON)),
        'api_url': URLToJSON(value['apiUrl']),
        'api_url_file': value['apiUrlFile'],
        'callback_id': value['callbackId'],
        'channel': value['channel'],
        'color': value['color'],
        'fallback': value['fallback'],
        'fields': value['fields'] == null ? undefined : ((value['fields'] as Array<any>).map(SlackFieldToJSON)),
        'footer': value['footer'],
        'http_config': HTTPClientConfigToJSON(value['httpConfig']),
        'icon_emoji': value['iconEmoji'],
        'icon_url': value['iconUrl'],
        'image_url': value['imageUrl'],
        'link_names': value['linkNames'],
        'mrkdwn_in': value['mrkdwnIn'],
        'pretext': value['pretext'],
        'send_resolved': value['sendResolved'],
        'short_fields': value['shortFields'],
        'text': value['text'],
        'thumb_url': value['thumbUrl'],
        'title': value['title'],
        'title_link': value['titleLink'],
        'username': value['username'],
    };
}

