/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Transformation } from './Transformation';
import {
    TransformationFromJSON,
    TransformationFromJSONTyped,
    TransformationToJSON,
    TransformationToJSONTyped,
} from './Transformation';

/**
 * 
 * @export
 * @interface CorrelationConfig
 */
export interface CorrelationConfig {
    /**
     * Field used to attach the correlation link
     * @type {string}
     * @memberof CorrelationConfig
     */
    field: string;
    /**
     * Target data query
     * @type {{ [key: string]: object; }}
     * @memberof CorrelationConfig
     */
    target: { [key: string]: object; };
    /**
     * 
     * @type {Array<Transformation>}
     * @memberof CorrelationConfig
     */
    transformations?: Array<Transformation>;
    /**
     * the type of correlation, either query for containing query information, or external for containing an external URL
     * +enum
     * @type {string}
     * @memberof CorrelationConfig
     */
    type?: string;
}

/**
 * Check if a given object implements the CorrelationConfig interface.
 */
export function instanceOfCorrelationConfig(value: object): value is CorrelationConfig {
    if (!('field' in value) || value['field'] === undefined) return false;
    if (!('target' in value) || value['target'] === undefined) return false;
    return true;
}

export function CorrelationConfigFromJSON(json: any): CorrelationConfig {
    return CorrelationConfigFromJSONTyped(json, false);
}

export function CorrelationConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): CorrelationConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'field': json['field'],
        'target': json['target'],
        'transformations': json['transformations'] == null ? undefined : ((json['transformations'] as Array<any>).map(TransformationFromJSON)),
        'type': json['type'] == null ? undefined : json['type'],
    };
}

export function CorrelationConfigToJSON(json: any): CorrelationConfig {
    return CorrelationConfigToJSONTyped(json, false);
}

export function CorrelationConfigToJSONTyped(value?: CorrelationConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'field': value['field'],
        'target': value['target'],
        'transformations': value['transformations'] == null ? undefined : ((value['transformations'] as Array<any>).map(TransformationToJSON)),
        'type': value['type'],
    };
}

