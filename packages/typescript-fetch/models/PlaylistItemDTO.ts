/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PlaylistItemDTO
 */
export interface PlaylistItemDTO {
    /**
     * Title is an unused property -- it will be removed in the future
     * @type {string}
     * @memberof PlaylistItemDTO
     */
    title?: string;
    /**
     * Type of the item.
     * @type {string}
     * @memberof PlaylistItemDTO
     */
    type?: string;
    /**
     * Value depends on type and describes the playlist item.
     * 
     * dashboard_by_id: The value is an internal numerical identifier set by Grafana. This
     * is not portable as the numerical identifier is non-deterministic between different instances.
     * Will be replaced by dashboard_by_uid in the future. (deprecated)
     * dashboard_by_tag: The value is a tag which is set on any number of dashboards. All
     * dashboards behind the tag will be added to the playlist.
     * dashboard_by_uid: The value is the dashboard UID
     * @type {string}
     * @memberof PlaylistItemDTO
     */
    value?: string;
}

/**
 * Check if a given object implements the PlaylistItemDTO interface.
 */
export function instanceOfPlaylistItemDTO(value: object): value is PlaylistItemDTO {
    return true;
}

export function PlaylistItemDTOFromJSON(json: any): PlaylistItemDTO {
    return PlaylistItemDTOFromJSONTyped(json, false);
}

export function PlaylistItemDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlaylistItemDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'title': json['title'] == null ? undefined : json['title'],
        'type': json['type'] == null ? undefined : json['type'],
        'value': json['value'] == null ? undefined : json['value'],
    };
}

export function PlaylistItemDTOToJSON(json: any): PlaylistItemDTO {
    return PlaylistItemDTOToJSONTyped(json, false);
}

export function PlaylistItemDTOToJSONTyped(value?: PlaylistItemDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'type': value['type'],
        'value': value['value'],
    };
}

