/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface Permission
 */
export interface Permission {
    /**
     * 
     * @type {string}
     * @memberof Permission
     */
    action?: string;
    /**
     * 
     * @type {Date}
     * @memberof Permission
     */
    created?: Date;
    /**
     * 
     * @type {string}
     * @memberof Permission
     */
    scope?: string;
    /**
     * 
     * @type {Date}
     * @memberof Permission
     */
    updated?: Date;
}

/**
 * Check if a given object implements the Permission interface.
 */
export function instanceOfPermission(value: object): value is Permission {
    return true;
}

export function PermissionFromJSON(json: any): Permission {
    return PermissionFromJSONTyped(json, false);
}

export function PermissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Permission {
    if (json == null) {
        return json;
    }
    return {
        
        'action': json['action'] == null ? undefined : json['action'],
        'created': json['created'] == null ? undefined : (new Date(json['created'])),
        'scope': json['scope'] == null ? undefined : json['scope'],
        'updated': json['updated'] == null ? undefined : (new Date(json['updated'])),
    };
}

export function PermissionToJSON(json: any): Permission {
    return PermissionToJSONTyped(json, false);
}

export function PermissionToJSONTyped(value?: Permission | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'action': value['action'],
        'created': value['created'] == null ? undefined : ((value['created']).toISOString()),
        'scope': value['scope'],
        'updated': value['updated'] == null ? undefined : ((value['updated']).toISOString()),
    };
}

