/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface AnnotationPanelFilter
 */
export interface AnnotationPanelFilter {
    /**
     * Should the specified panels be included or excluded
     * @type {boolean}
     * @memberof AnnotationPanelFilter
     */
    exclude?: boolean;
    /**
     * Panel IDs that should be included or excluded
     * @type {Array<number>}
     * @memberof AnnotationPanelFilter
     */
    ids?: Array<number>;
}

/**
 * Check if a given object implements the AnnotationPanelFilter interface.
 */
export function instanceOfAnnotationPanelFilter(value: object): value is AnnotationPanelFilter {
    return true;
}

export function AnnotationPanelFilterFromJSON(json: any): AnnotationPanelFilter {
    return AnnotationPanelFilterFromJSONTyped(json, false);
}

export function AnnotationPanelFilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnnotationPanelFilter {
    if (json == null) {
        return json;
    }
    return {
        
        'exclude': json['exclude'] == null ? undefined : json['exclude'],
        'ids': json['ids'] == null ? undefined : json['ids'],
    };
}

export function AnnotationPanelFilterToJSON(json: any): AnnotationPanelFilter {
    return AnnotationPanelFilterToJSONTyped(json, false);
}

export function AnnotationPanelFilterToJSONTyped(value?: AnnotationPanelFilter | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'exclude': value['exclude'],
        'ids': value['ids'],
    };
}

