/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface UpdateAnnotationsCmd
 */
export interface UpdateAnnotationsCmd {
    /**
     * 
     * @type {object}
     * @memberof UpdateAnnotationsCmd
     */
    data?: object;
    /**
     * 
     * @type {number}
     * @memberof UpdateAnnotationsCmd
     */
    id?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateAnnotationsCmd
     */
    tags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UpdateAnnotationsCmd
     */
    text?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateAnnotationsCmd
     */
    time?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateAnnotationsCmd
     */
    timeEnd?: number;
}

/**
 * Check if a given object implements the UpdateAnnotationsCmd interface.
 */
export function instanceOfUpdateAnnotationsCmd(value: object): value is UpdateAnnotationsCmd {
    return true;
}

export function UpdateAnnotationsCmdFromJSON(json: any): UpdateAnnotationsCmd {
    return UpdateAnnotationsCmdFromJSONTyped(json, false);
}

export function UpdateAnnotationsCmdFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateAnnotationsCmd {
    if (json == null) {
        return json;
    }
    return {
        
        'data': json['data'] == null ? undefined : json['data'],
        'id': json['id'] == null ? undefined : json['id'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'text': json['text'] == null ? undefined : json['text'],
        'time': json['time'] == null ? undefined : json['time'],
        'timeEnd': json['timeEnd'] == null ? undefined : json['timeEnd'],
    };
}

export function UpdateAnnotationsCmdToJSON(json: any): UpdateAnnotationsCmd {
    return UpdateAnnotationsCmdToJSONTyped(json, false);
}

export function UpdateAnnotationsCmdToJSONTyped(value?: UpdateAnnotationsCmd | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'data': value['data'],
        'id': value['id'],
        'tags': value['tags'],
        'text': value['text'],
        'time': value['time'],
        'timeEnd': value['timeEnd'],
    };
}

