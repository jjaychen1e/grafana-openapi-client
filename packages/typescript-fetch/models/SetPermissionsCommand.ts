/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { SetResourcePermissionCommand } from './SetResourcePermissionCommand.js';
import {
    SetResourcePermissionCommandFromJSON,
    SetResourcePermissionCommandFromJSONTyped,
    SetResourcePermissionCommandToJSON,
    SetResourcePermissionCommandToJSONTyped,
} from './SetResourcePermissionCommand.js';

/**
 * 
 * @export
 * @interface SetPermissionsCommand
 */
export interface SetPermissionsCommand {
    /**
     * 
     * @type {Array<SetResourcePermissionCommand>}
     * @memberof SetPermissionsCommand
     */
    permissions?: Array<SetResourcePermissionCommand>;
}

/**
 * Check if a given object implements the SetPermissionsCommand interface.
 */
export function instanceOfSetPermissionsCommand(value: object): value is SetPermissionsCommand {
    return true;
}

export function SetPermissionsCommandFromJSON(json: any): SetPermissionsCommand {
    return SetPermissionsCommandFromJSONTyped(json, false);
}

export function SetPermissionsCommandFromJSONTyped(json: any, ignoreDiscriminator: boolean): SetPermissionsCommand {
    if (json == null) {
        return json;
    }
    return {
        
        'permissions': json['permissions'] == null ? undefined : ((json['permissions'] as Array<any>).map(SetResourcePermissionCommandFromJSON)),
    };
}

export function SetPermissionsCommandToJSON(json: any): SetPermissionsCommand {
    return SetPermissionsCommandToJSONTyped(json, false);
}

export function SetPermissionsCommandToJSONTyped(value?: SetPermissionsCommand | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'permissions': value['permissions'] == null ? undefined : ((value['permissions'] as Array<any>).map(SetResourcePermissionCommandToJSON)),
    };
}

