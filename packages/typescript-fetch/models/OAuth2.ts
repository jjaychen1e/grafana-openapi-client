/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TLSConfig } from './TLSConfig';
import {
    TLSConfigFromJSON,
    TLSConfigFromJSONTyped,
    TLSConfigToJSON,
    TLSConfigToJSONTyped,
} from './TLSConfig';
import type { URL } from './URL';
import {
    URLFromJSON,
    URLFromJSONTyped,
    URLToJSON,
    URLToJSONTyped,
} from './URL';

/**
 * 
 * @export
 * @interface OAuth2
 */
export interface OAuth2 {
    /**
     * 
     * @type {TLSConfig}
     * @memberof OAuth2
     */
    tLSConfig?: TLSConfig;
    /**
     * 
     * @type {string}
     * @memberof OAuth2
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2
     */
    clientSecret?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2
     */
    clientSecretFile?: string;
    /**
     * ClientSecretRef is the name of the secret within the secret manager to use as the client
     * secret.
     * @type {string}
     * @memberof OAuth2
     */
    clientSecretRef?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof OAuth2
     */
    endpointParams?: { [key: string]: string; };
    /**
     * NoProxy contains addresses that should not use a proxy.
     * @type {string}
     * @memberof OAuth2
     */
    noProxy?: string;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof OAuth2
     */
    proxyConnectHeader?: { [key: string]: Array<string>; };
    /**
     * ProxyFromEnvironment makes use of net/http ProxyFromEnvironment function
     * to determine proxies.
     * @type {boolean}
     * @memberof OAuth2
     */
    proxyFromEnvironment?: boolean;
    /**
     * 
     * @type {URL}
     * @memberof OAuth2
     */
    proxyUrl?: URL;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2
     */
    scopes?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OAuth2
     */
    tokenUrl?: string;
}

/**
 * Check if a given object implements the OAuth2 interface.
 */
export function instanceOfOAuth2(value: object): value is OAuth2 {
    return true;
}

export function OAuth2FromJSON(json: any): OAuth2 {
    return OAuth2FromJSONTyped(json, false);
}

export function OAuth2FromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuth2 {
    if (json == null) {
        return json;
    }
    return {
        
        'tLSConfig': json['TLSConfig'] == null ? undefined : TLSConfigFromJSON(json['TLSConfig']),
        'clientId': json['client_id'] == null ? undefined : json['client_id'],
        'clientSecret': json['client_secret'] == null ? undefined : json['client_secret'],
        'clientSecretFile': json['client_secret_file'] == null ? undefined : json['client_secret_file'],
        'clientSecretRef': json['client_secret_ref'] == null ? undefined : json['client_secret_ref'],
        'endpointParams': json['endpoint_params'] == null ? undefined : json['endpoint_params'],
        'noProxy': json['no_proxy'] == null ? undefined : json['no_proxy'],
        'proxyConnectHeader': json['proxy_connect_header'] == null ? undefined : json['proxy_connect_header'],
        'proxyFromEnvironment': json['proxy_from_environment'] == null ? undefined : json['proxy_from_environment'],
        'proxyUrl': json['proxy_url'] == null ? undefined : URLFromJSON(json['proxy_url']),
        'scopes': json['scopes'] == null ? undefined : json['scopes'],
        'tokenUrl': json['token_url'] == null ? undefined : json['token_url'],
    };
}

export function OAuth2ToJSON(json: any): OAuth2 {
    return OAuth2ToJSONTyped(json, false);
}

export function OAuth2ToJSONTyped(value?: OAuth2 | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'TLSConfig': TLSConfigToJSON(value['tLSConfig']),
        'client_id': value['clientId'],
        'client_secret': value['clientSecret'],
        'client_secret_file': value['clientSecretFile'],
        'client_secret_ref': value['clientSecretRef'],
        'endpoint_params': value['endpointParams'],
        'no_proxy': value['noProxy'],
        'proxy_connect_header': value['proxyConnectHeader'],
        'proxy_from_environment': value['proxyFromEnvironment'],
        'proxy_url': URLToJSON(value['proxyUrl']),
        'scopes': value['scopes'],
        'token_url': value['tokenUrl'],
    };
}

