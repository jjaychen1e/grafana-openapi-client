/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { EmailDTO } from './EmailDTO.js';
import {
    EmailDTOFromJSON,
    EmailDTOFromJSONTyped,
    EmailDTOToJSON,
    EmailDTOToJSONTyped,
} from './EmailDTO.js';

/**
 * 
 * @export
 * @interface PublicDashboard
 */
export interface PublicDashboard {
    /**
     * 
     * @type {string}
     * @memberof PublicDashboard
     */
    accessToken?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicDashboard
     */
    annotationsEnabled?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof PublicDashboard
     */
    createdAt?: Date;
    /**
     * 
     * @type {number}
     * @memberof PublicDashboard
     */
    createdBy?: number;
    /**
     * 
     * @type {string}
     * @memberof PublicDashboard
     */
    dashboardUid?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicDashboard
     */
    isEnabled?: boolean;
    /**
     * 
     * @type {Array<EmailDTO>}
     * @memberof PublicDashboard
     */
    recipients?: Array<EmailDTO>;
    /**
     * 
     * @type {string}
     * @memberof PublicDashboard
     */
    share?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicDashboard
     */
    timeSelectionEnabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicDashboard
     */
    uid?: string;
    /**
     * 
     * @type {Date}
     * @memberof PublicDashboard
     */
    updatedAt?: Date;
    /**
     * 
     * @type {number}
     * @memberof PublicDashboard
     */
    updatedBy?: number;
}

/**
 * Check if a given object implements the PublicDashboard interface.
 */
export function instanceOfPublicDashboard(value: object): value is PublicDashboard {
    return true;
}

export function PublicDashboardFromJSON(json: any): PublicDashboard {
    return PublicDashboardFromJSONTyped(json, false);
}

export function PublicDashboardFromJSONTyped(json: any, ignoreDiscriminator: boolean): PublicDashboard {
    if (json == null) {
        return json;
    }
    return {
        
        'accessToken': json['accessToken'] == null ? undefined : json['accessToken'],
        'annotationsEnabled': json['annotationsEnabled'] == null ? undefined : json['annotationsEnabled'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'createdBy': json['createdBy'] == null ? undefined : json['createdBy'],
        'dashboardUid': json['dashboardUid'] == null ? undefined : json['dashboardUid'],
        'isEnabled': json['isEnabled'] == null ? undefined : json['isEnabled'],
        'recipients': json['recipients'] == null ? undefined : ((json['recipients'] as Array<any>).map(EmailDTOFromJSON)),
        'share': json['share'] == null ? undefined : json['share'],
        'timeSelectionEnabled': json['timeSelectionEnabled'] == null ? undefined : json['timeSelectionEnabled'],
        'uid': json['uid'] == null ? undefined : json['uid'],
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
        'updatedBy': json['updatedBy'] == null ? undefined : json['updatedBy'],
    };
}

export function PublicDashboardToJSON(json: any): PublicDashboard {
    return PublicDashboardToJSONTyped(json, false);
}

export function PublicDashboardToJSONTyped(value?: PublicDashboard | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'accessToken': value['accessToken'],
        'annotationsEnabled': value['annotationsEnabled'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'createdBy': value['createdBy'],
        'dashboardUid': value['dashboardUid'],
        'isEnabled': value['isEnabled'],
        'recipients': value['recipients'] == null ? undefined : ((value['recipients'] as Array<any>).map(EmailDTOToJSON)),
        'share': value['share'],
        'timeSelectionEnabled': value['timeSelectionEnabled'],
        'uid': value['uid'],
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'updatedBy': value['updatedBy'],
    };
}

