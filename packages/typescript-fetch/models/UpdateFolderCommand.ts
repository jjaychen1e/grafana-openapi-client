/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * UpdateFolderCommand captures the information required by the folder service
 * to update a folder. Use Move to update a folder's parent folder.
 * @export
 * @interface UpdateFolderCommand
 */
export interface UpdateFolderCommand {
    /**
     * NewDescription it's an optional parameter used for overriding the existing folder description
     * @type {string}
     * @memberof UpdateFolderCommand
     */
    description?: string;
    /**
     * Overwrite only used by the legacy folder implementation
     * @type {boolean}
     * @memberof UpdateFolderCommand
     */
    overwrite?: boolean;
    /**
     * NewTitle it's an optional parameter used for overriding the existing folder title
     * @type {string}
     * @memberof UpdateFolderCommand
     */
    title?: string;
    /**
     * Version only used by the legacy folder implementation
     * @type {number}
     * @memberof UpdateFolderCommand
     */
    version?: number;
}

/**
 * Check if a given object implements the UpdateFolderCommand interface.
 */
export function instanceOfUpdateFolderCommand(value: object): value is UpdateFolderCommand {
    return true;
}

export function UpdateFolderCommandFromJSON(json: any): UpdateFolderCommand {
    return UpdateFolderCommandFromJSONTyped(json, false);
}

export function UpdateFolderCommandFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateFolderCommand {
    if (json == null) {
        return json;
    }
    return {
        
        'description': json['description'] == null ? undefined : json['description'],
        'overwrite': json['overwrite'] == null ? undefined : json['overwrite'],
        'title': json['title'] == null ? undefined : json['title'],
        'version': json['version'] == null ? undefined : json['version'],
    };
}

export function UpdateFolderCommandToJSON(json: any): UpdateFolderCommand {
    return UpdateFolderCommandToJSONTyped(json, false);
}

export function UpdateFolderCommandToJSONTyped(value?: UpdateFolderCommand | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'description': value['description'],
        'overwrite': value['overwrite'],
        'title': value['title'],
        'version': value['version'],
    };
}

