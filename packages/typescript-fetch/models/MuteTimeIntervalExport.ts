/* tslint:disable */
/* eslint-disable */
/**
 * Grafana HTTP API.
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TimeInterval } from './TimeInterval';
import {
    TimeIntervalFromJSON,
    TimeIntervalFromJSONTyped,
    TimeIntervalToJSON,
    TimeIntervalToJSONTyped,
} from './TimeInterval';

/**
 * 
 * @export
 * @interface MuteTimeIntervalExport
 */
export interface MuteTimeIntervalExport {
    /**
     * 
     * @type {string}
     * @memberof MuteTimeIntervalExport
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof MuteTimeIntervalExport
     */
    orgId?: number;
    /**
     * 
     * @type {Array<TimeInterval>}
     * @memberof MuteTimeIntervalExport
     */
    timeIntervals?: Array<TimeInterval>;
}

/**
 * Check if a given object implements the MuteTimeIntervalExport interface.
 */
export function instanceOfMuteTimeIntervalExport(value: object): value is MuteTimeIntervalExport {
    return true;
}

export function MuteTimeIntervalExportFromJSON(json: any): MuteTimeIntervalExport {
    return MuteTimeIntervalExportFromJSONTyped(json, false);
}

export function MuteTimeIntervalExportFromJSONTyped(json: any, ignoreDiscriminator: boolean): MuteTimeIntervalExport {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'orgId': json['orgId'] == null ? undefined : json['orgId'],
        'timeIntervals': json['time_intervals'] == null ? undefined : ((json['time_intervals'] as Array<any>).map(TimeIntervalFromJSON)),
    };
}

export function MuteTimeIntervalExportToJSON(json: any): MuteTimeIntervalExport {
    return MuteTimeIntervalExportToJSONTyped(json, false);
}

export function MuteTimeIntervalExportToJSONTyped(value?: MuteTimeIntervalExport | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'orgId': value['orgId'],
        'time_intervals': value['timeIntervals'] == null ? undefined : ((value['timeIntervals'] as Array<any>).map(TimeIntervalToJSON)),
    };
}

